/****************************************************************************
**
** Namespace esriSystem generated by dumpcpp from type library
** .\esriSystem.olb
**
****************************************************************************/

#ifndef QAX_DUMPCPP_ESRISYSTEM_H
#define QAX_DUMPCPP_ESRISYSTEM_H

// Define this symbol to __declspec(dllexport) or __declspec(dllimport)
#ifndef ESRISYSTEM_EXPORT
#define ESRISYSTEM_EXPORT
#endif


//#import "C:\Program Files (x86)\ArcGIS\Desktop10.1\com\esriSystem.olb"

#include <qaxobject.h>
#include <qaxwidget.h>
#include <qdatetime.h>
#include <qpixmap.h>

struct IDispatch;


// Referenced namespace

namespace esriSystem {


	struct _LARGE_INTEGER{
		long long v;
	};
	struct _ULARGE_INTEGER{
		unsigned long long v;
	};

	struct _TimeZoneTransitionTime {
		short Year;

		short Month;

		short DayOfWeek;

		short DayOccurrence;

		short Hour;

		short Minute;

		short Second;

		short Milliseconds;
	};

    enum JSONTokenType {
        JSONUndefined           = -1,
        JSONString              = 1,
        JSONNumber              = 2,
        JSONBoolean             = 3,
        JSONNull                = 4,
        JSONStartOfObject       = 5,
        JSONEndOfObject         = 6,
        JSONStartOfArray        = 7,
        JSONEndOfArray          = 8,
        JSONPropertyValueDelimiter= 9,
        JSONValueDelimiter      = 10
    };

    enum esriAGSInternetMessageFormat {
        esriAGSInternetMessageFormatSoap= 1,
        esriAGSInternetMessageFormatBin= 2
    };

    enum esriAnimations {
        esriAnimationDrawing    = 0,
        esriAnimationPrinting   = 1,
        esriAnimationOther      = 2,
        esriAnimationLast       = 3
    };

    enum esriArcGISVersion {
        esriArcGISVersion83     = 0,
        esriArcGISVersion90     = 1,
        esriArcGISVersion92     = 2,
        esriArcGISVersion93     = 3,
        esriArcGISVersion10     = 4,
        esriArcGISVersion101    = 5,
        esriArcGISVersionCurrent= 5
    };

    enum esriAreaUnits {
        esriUnknownAreaUnits    = 0,
        esriSquareInches        = 1,
        esriSquareFeet          = 2,
        esriSquareYards         = 3,
        esriAcres               = 4,
        esriSquareMiles         = 5,
        esriSquareMillimeters   = 6,
        esriSquareCentimeters   = 7,
        esriSquareDecimeters    = 8,
        esriSquareMeters        = 9,
        esriAres                = 10,
        esriHectares            = 11,
        esriSquareKilometers    = 12,
        esriAreaUnitsLast       = 13
    };

    enum esriByteSwapDataType {
        esriBSDTchar            = 0,
        esriBSDTbool            = 1,
        esriBSDTunsignedint     = 2,
        esriBSDTBYTE            = 3,
        esriBSDTBOOLU           = 4,
        esriBSDTUSHORT          = 5,
        esriBSDTSHORT           = 6,
        esriBSDTULONG           = 7,
        esriBSDTLONG            = 8,
        esriBSDTULONGLONG       = 9,
        esriBSDTLONGLONG        = 10,
        esriBSDTFLOAT           = 11,
        esriBSDTDOUBLE          = 12,
        esriBSDTGUID            = 13,
        esriBSDTWCHAR           = 14
    };

    enum esriCaseAppearance {
        esriCaseAppearanceUnchanged= 0,
        esriCaseAppearanceUpper = 1,
        esriCaseAppearanceLower = 2
    };

    enum esriCoreErrorReturnCodes {
        E_NOTLICENSED           = -2147221247,
        E_NO_PRODUCT_LICENSE    = -2147221246,
        E_NO_EXTENSION_LICENSE  = -2147221245,
        E_REQUIRES_SERVER_STANDARD_EDITION= -2147221244,
        E_REQUIRES_SERVER_ADVANCED_EDITION= -2147221243
    };

    enum esriDirectionFormatEnum {
        esriDFDegreesMinutesSeconds= 0,
        esriDFQuadrantBearing   = 1
    };

    enum esriDirectionType {
        esriDTNorthAzimuth      = 1,
        esriDTSouthAzimuth      = 2,
        esriDTPolar             = 3,
        esriDTQuadrantBearing   = 4
    };

    enum esriDirectionUnits {
        esriDURadians           = 9101,
        esriDUDecimalDegrees    = 2,
        esriDUDegreesMinutesSeconds= 3,
        esriDUGradians          = 9105,
        esriDUGons              = 9106
    };

    enum esriDrawOp {
        esriDrawPolyPolyline    = 0,
        esriDrawPolyPolygon     = 1,
        esriDrawPolyline        = 2,
        esriDrawPolygon         = 3,
        esriDrawBeginPath       = 4,
        esriDrawEndPath         = 5,
        esriDrawArcCW           = 6,
        esriDrawArcCCW          = 7,
        esriDrawPolyBezier      = 8,
        esriDrawRectangle       = 9,
        esriDrawCircle          = 10,
        esriDrawMoveTo          = 11,
        esriDrawMultipoint      = 12,
        esriDrawStop            = 13,
        esriDrawTrapezoids      = 14,
        esriDrawPolygonNoBorder = 15,
        esriDrawPolyPolygonNoBorder= 16
    };

    enum esriDrawPhase {
        esriDPGeography         = 1,
        esriDPAnnotation        = 2,
        esriDPSelection         = 4
    };

    enum esriExtensionState {
        esriESEnabled           = 1,
        esriESDisabled          = 2,
        esriESUnavailable       = 4
    };

    enum esriFilePermission {
        esriReadOnly            = 1,
        esriReadWrite           = 2
    };

    enum esriFractionOptionEnum {
        esriSpecifyFractionDigits= 0,
        esriSpecifyFractionDenominator= 1
    };

    enum esriHttpMethod {
        esriHttpMethodPost      = 0,
        esriHttpMethodGet       = 1,
        esriHttpMethodPut       = 2,
        esriHttpMethodDelete    = 3,
        esriHttpMethodHead      = 4,
        esriHttpMethodTrace     = 5,
        esriHttpMethodOptions   = 6
    };

    enum esriIntegerTimeFormat {
        esriITFYearThruSecond   = 0,
        esriITFYearThruMinute   = 1,
        esriITFYearThruHour     = 2,
        esriITFYearThruDay      = 3,
        esriITFYearThruMonth    = 4,
        esriITFYearOnly         = 5
    };

    enum esriJobMessageType {
        esriJobMessageTypeInformative= 0,
        esriJobMessageTypeWarning= 1,
        esriJobMessageTypeError = 2,
        esriJobMessageTypeEmpty = 3,
        esriJobMessageTypeAbort = 4,
        esriJobMessageTypeProcessStart= 5,
        esriJobMessageTypeProcessStop= 6,
        esriJobMessageTypeProcessDefinition= 7
    };

    enum esriJobStatus {
        esriJobNew              = 0,
        esriJobSubmitted        = 1,
        esriJobWaiting          = 2,
        esriJobExecuting        = 3,
        esriJobSucceeded        = 4,
        esriJobFailed           = 5,
        esriJobTimedOut         = 6,
        esriJobCancelling       = 7,
        esriJobCancelled        = 8,
        esriJobDeleting         = 9,
        esriJobDeleted          = 10
    };

    enum esriLicenseExtensionCode {
        esriLicenseExtensionCodeArcPress= 4,
        esriLicenseExtensionCodeTIFFLZW= 5,
        esriLicenseExtensionCodeGeoStats= 6,
        esriLicenseExtensionCodeMrSID= 7,
        esriLicenseExtensionCodeNetwork= 8,
        esriLicenseExtensionCode3DAnalyst= 9,
        esriLicenseExtensionCodeSpatialAnalyst= 10,
        esriLicenseExtensionCodeStreetMap= 12,
        esriLicenseExtensionCodeCOGO= 13,
        esriLicenseExtensionCodeMLE= 14,
        esriLicenseExtensionCodePublisher= 15,
        esriLicenseExtensionCodeArcMapServer= 31,
        esriLicenseExtensionCodeTracking= 32,
        esriLicenseExtensionCodeBusinessStandard= 33,
        esriLicenseExtensionCodeArcScan= 34,
        esriLicenseExtensionCodeBusiness= 35,
        esriLicenseExtensionCodeSchematics= 36,
        esriLicenseExtensionCodeSchematicsSDK= 37,
        esriLicenseExtensionCodeVirtualEarthEng= 38,
        esriLicenseExtensionCodeVBAExtension= 39,
        esriLicenseExtensionCodeWorkflowManager= 40,
        esriLicenseExtensionCodeDesigner= 43,
        esriLicenseExtensionCodeVector= 44,
        esriLicenseExtensionCodeDataInteroperability= 45,
        esriLicenseExtensionCodeProductionMapping= 46,
        esriLicenseExtensionCodeDataReViewer= 47,
        esriLicenseExtensionCodeMPSAtlas= 48,
        esriLicenseExtensionCodeDefense= 49,
        esriLicenseExtensionCodeNautical= 50,
        esriLicenseExtensionCodeIntelAgency= 51,
        esriLicenseExtensionCodeMappingAgency= 52,
        esriLicenseExtensionCodeAeronautical= 53,
        esriLicenseExtensionCodeVirtualEarth= 54,
        esriLicenseExtensionCodeServerStandardEdition= 55,
        esriLicenseExtensionCodeServerAdvancedEdition= 56,
        esriLicenseExtensionCodeServerEnterprise= 57,
        esriLicenseExtensionCodeImageExt= 58,
        esriLicenseExtensionCodeBingMaps= 59,
        esriLicenseExtensionCodeBingMapsEng= 60,
        esriLicenseExtensionCodeDefenseUS= 61,
        esriLicenseExtensionCodeDefenseINTL= 62,
        esriLicenseExtensionCodeAGINSPIRE= 63,
        esriLicenseExtensionCodeRuntimeBasic= 64,
        esriLicenseExtensionCodeRuntimeStandard= 65,
        esriLicenseExtensionCodeRuntimeAdvanced= 66,
        esriLicenseExtensionCodeHighways= 67,
        esriLicenseExtensionCodeVideo= 68,
        esriLicenseExtensionCodeBathymetry= 69,
        esriLicenseExtensionCodeAirports= 70
    };

    enum esriLicenseProductCode {
        esriLicenseProductCodeEngine= 10,
        esriLicenseProductCodeEngineGeoDB= 20,
        esriLicenseProductCodeArcServer= 30,
        esriLicenseProductCodeBasic= 40,
        esriLicenseProductCodeStandard= 50,
        esriLicenseProductCodeAdvanced= 60
    };

    enum esriLicenseServerEdition {
        esriLicenseServerEditionBasic= 100,
        esriLicenseServerEditionStandard= 200,
        esriLicenseServerEditionAdvanced= 300
    };

    enum esriLicenseStatus {
        esriLicenseAvailable    = 10,
        esriLicenseNotLicensed  = 20,
        esriLicenseUnavailable  = 30,
        esriLicenseFailure      = 40,
        esriLicenseAlreadyInitialized= 50,
        esriLicenseNotInitialized= 60,
        esriLicenseCheckedOut   = 70,
        esriLicenseCheckedIn    = 80,
        esriLicenseUntrusted    = 90
    };

    enum esriLockMgrType {
        esriLockMgrNone         = 0,
        esriLockMgrRead         = 1,
        esriLockMgrWrite        = 2,
        esriLockMgrEdit         = 3,
        esriLockMgrSchemaRead   = 4,
        esriLockMgrSchemaWrite  = 5
    };

    enum esriNumericAlignmentEnum {
        esriAlignRight          = 0,
        esriAlignLeft           = 1
    };

    enum esriProductCode {
        esriProductCodeReader   = 90,
        esriProductCodeReaderPro= 91,
        esriProductCodeBasic    = 100,
        esriProductCodeStandard = 200,
        esriProductCodeAdvanced = 300,
        esriProductCodeArcPress = 4,
        esriProductCodeTIFFLZW  = 5,
        esriProductCodeGeoStats = 6,
        esriProductCodeMrSID    = 7,
        esriProductCodeNetwork  = 8,
        esriProductCodeTIN      = 9,
        esriProductCodeGrid     = 10,
        esriProductCodeStreetMap= 12,
        esriProductCodeCOGO     = 13,
        esriProductCodeMLE      = 14,
        esriProductCodePublisher= 15,
        esriProductCodeAllEurope= 16,
        esriProductCodeAustria  = 17,
        esriProductCodeBelgium  = 18,
        esriProductCodeDenmark  = 19,
        esriProductCodeFrance   = 20,
        esriProductCodeGermany  = 21,
        esriProductCodeItaly    = 22,
        esriProductCodeLuxembourg= 23,
        esriProductCodeNetherlands= 24,
        esriProductCodePortugal = 25,
        esriProductCodeSpain    = 26,
        esriProductCodeSweden   = 27,
        esriProductCodeSwitzerland= 28,
        esriProductCodeUnitedKingdom= 29,
        esriProductPostCodesMajorRoads= 30,
        esriProductCodeArcMapServer= 31,
        esriProductCodeTracking = 32,
        esriProductCodeBusinessStandard= 33,
        esriProductCodeArcScan  = 34,
        esriProductCodeBusiness = 35,
        esriProductCodeSchematics= 36,
        esriProductCodeSchematicsSDK= 37,
        esriProductCodeVirtualEarthEng= 38,
        esriProductCodeVBAExtension= 39,
        esriProductCodeWorkflowManager= 40,
        esriProductCodeDesigner = 43,
        esriProductCodeVector   = 44,
        esriProductCodeDataInteroperability= 45,
        esriProductCodeProductionMapping= 46,
        esriProductCodeDataReViewer= 47,
        esriProductCodeMPSAtlas = 48,
        esriProductCodeDefense  = 49,
        esriProductCodeNautical = 50,
        esriProductCodeIntelAgency= 51,
        esriProductCodeMappingAgency= 52,
        esriProductCodeAeronautical= 53,
        esriProductCodeVirtualEarth= 54,
        esriProductCodeServerStandardEdition= 55,
        esriProductCodeServerAdvancedEdition= 56,
        esriProductCodeServerEnterprise= 57,
        esriProductCodeImageExt = 58,
        esriProductCodeBingMaps = 59,
        esriProductCodeBingMapsEng= 60,
        esriProductCodeDefenseUS= 61,
        esriProductCodeDefenseINTL= 62,
        esriProductCodeAGINSPIRE= 63,
        esriProductCodeRuntimeBasic= 64,
        esriProductCodeRuntimeStandard= 65,
        esriProductCodeRuntimeAdvanced= 66,
        esriProductCodeHighways = 67,
        esriProductCodeVideo    = 68,
        esriProductCodeBathymetry= 69,
        esriProductCodeAirports = 70
    };

    enum esriProductInstalled {
        esriProductsInstalledDesktop= 10,
        esriProductsInstalledEngineRuntime= 20,
        esriProductsInstalledReader= 30,
        esriProductsInstalledServerNET= 40,
        esriProductsInstalledServerJAVA= 50
    };

    enum esriRoundingOptionEnum {
        esriRoundNumberOfDecimals= 0,
        esriRoundNumberOfSignificantDigits= 1
    };

    enum esriScaleFormat {
        esriAbsoluteScale       = 0,
        esriImperialScale       = 1,
        esriCustomScale         = 2
    };

    enum esriServerMessageCodeEnum {
        esriSystemMessageCode_Debug= 100000,
        esriSystemMessageCode_StringRequestReceived= 100001,
        esriSystemMessageCode_StringResponseSent= 100002,
        esriSystemMessageCode_BinaryRequestReceived= 100003,
        esriSystemMessageCode_BinaryResponseSent= 100004,
        esriSystemMessageCode_RequestFailed= 100005,
        esriSystemMessageCode_ErrorLoadFromString= 100006,
        esriSystemMessageCode_ErrorReadXml= 100007,
        esriSystemMessageCode_ErrorWriteXml= 100008,
        esriSystemMessageCode_ErrorSaveToString= 100009,
        esriSystemMessageCode_ErrorImportFromMem= 100010,
        esriSystemMessageCode_ErrorLoadBinaryStream= 100011,
        esriSystemMessageCode_SetResponseStreamVersion= 100012,
        esriSystemMessageCode_ErrorWriteBinaryResponse= 100013
    };

    enum esriSystemMessageCodeEnum {
        esriSystemMessageCode_XMLTypeMappingFailed= 100100,
        esriSystemMessageCode_HTTPConnectionFailed= 100101,
        esriSystemMessageCode_CertFailed= 100102,
        esriSystemMessageCode_AuthFailed= 100103
    };

    enum esriTextureCompressionType {
        esriTextureCompressionNever= 1,
        esriTextureCompressionNone= 2,
        esriTextureCompressionJPEG= 3,
        esriTextureCompressionJPEGPlus= 4
    };

    enum esriTimeLocaleFormat {
        esriTLFDefaultDateTime  = 0,
        esriTLFLongDate         = 1,
        esriTLFShortDate        = 2,
        esriTLFLongTime         = 3,
        esriTLFShortTime        = 4
    };

    enum esriTimeRelation {
        esriTimeRelationOverlaps= 0,
        esriTimeRelationOverlapsStartWithinEnd= 1,
        esriTimeRelationAfterStartOverlapsEnd= 2
    };

    enum esriTimeStringFormat {
        esriTSFYearThruSubSecondWithSlash= 0,
        esriTSFYearThruSecondWithSlash= 1,
        esriTSFYearThruMinuteWithSlash= 2,
        esriTSFYearThruHourWithSlash= 3,
        esriTSFYearThruDayWithSlash= 4,
        esriTSFYearThruMonthWithSlash= 5,
        esriTSFYearThruSubSecondWithDash= 6,
        esriTSFYearThruSecondWithDash= 7,
        esriTSFYearThruMinuteWithDash= 8,
        esriTSFYearThruHourWithDash= 9,
        esriTSFYearThruDayWithDash= 10,
        esriTSFYearThruMonthWithDash= 11,
        esriTSFYearThruSubSecond= 12,
        esriTSFYearThruSecond   = 13,
        esriTSFYearThruMinute   = 14,
        esriTSFYearThruHour     = 15,
        esriTSFYearThruDay      = 16,
        esriTSFYearThruMonth    = 17,
        esriTSFYearOnly         = 18
    };

    enum esriTimeUnits {
        esriTimeUnitsUnknown    = 0,
        esriTimeUnitsMilliseconds= 1,
        esriTimeUnitsSeconds    = 2,
        esriTimeUnitsMinutes    = 3,
        esriTimeUnitsHours      = 4,
        esriTimeUnitsDays       = 5,
        esriTimeUnitsWeeks      = 6,
        esriTimeUnitsMonths     = 7,
        esriTimeUnitsYears      = 8,
        esriTimeUnitsDecades    = 9,
        esriTimeUnitsCenturies  = 10
    };

    enum esriTransportType {
        esriTransportTypeEmbedded= 1,
        esriTransportTypeUrl    = 2
    };

    enum esriUnits {
        esriUnknownUnits        = 0,
        esriInches              = 1,
        esriPoints              = 2,
        esriFeet                = 3,
        esriYards               = 4,
        esriMiles               = 5,
        esriNauticalMiles       = 6,
        esriMillimeters         = 7,
        esriCentimeters         = 8,
        esriMeters              = 9,
        esriKilometers          = 10,
        esriDecimalDegrees      = 11,
        esriDecimeters          = 12,
        esriUnitsLast           = 13
    };

    enum esriWebResponseDataType {
        esriWRDTPayload         = 0,
        esriWRDTFileToReturn    = 1
    };

    enum messageSupportError {
        MESSAGESUPPORT_E_BAD_REQUEST= -2147220991,
        MESSAGESUPPORT_E_UNAUTHORIZED= -2147220990,
        MESSAGESUPPORT_E_FORBIDDEN= -2147220989,
        MESSAGESUPPORT_E_NOT_FOUND= -2147220988,
        MESSAGESUPPORT_E_METHOD_NOT_ALLOWED= -2147220987,
        MESSAGESUPPORT_E_PROXY_AUTHENTICATION_REQUIRED= -2147220986,
        MESSAGESUPPORT_E_REQUEST_TIMEOUT= -2147220985,
        MESSAGESUPPORT_E_INTERNAL_SERVER_ERROR= -2147220984,
        MESSAGESUPPORT_E_NOT_IMPLEMENTED= -2147220983,
        MESSAGESUPPORT_E_BAD_GATEWAY= -2147220982,
        MESSAGESUPPORT_E_SERVICE_NOT_AVAILABLE= -2147220981,
        MESSAGESUPPORT_E_UNSUPPORTED_PROTOCOL= -2147220980,
        MESSAGESUPPORT_E_URL_MALFORMAT= -2147220979,
        MESSAGESUPPORT_E_COULDNT_RESOLVE_PROXY= -2147220978,
        MESSAGESUPPORT_E_COULDNT_RESOLVE_HOST= -2147220977,
        MESSAGESUPPORT_E_COULDNT_CONNECT= -2147220976,
        MESSAGESUPPORT_E_REQUEST_TOLARGE= -2147220975,
        MESSAGESUPPORT_E_NO_CONTENT= -2147220974,
        MESSAGESUPPORT_E_SSL_CACERT= -2147220973,
        MESSAGESUPPORT_E_SSL_CONNECT_ERROR= -2147220972,
        MESSAGESUPPORT_E_SSL_PEER_CERTIFICATE= -2147220971,
        MESSAGESUPPORT_E_INVALID_GET_FILE= -2147220970,
        MESSAGESUPPORT_E_OPERATION_TIMEDOUT= -2147220969,
        MESSAGESUPPORT_E_MEM_ALLOC_FAILED= -2147220968,
        MESSAGESUPPORT_E_AUTH_TOKEN_FAILURE= -2147220967,
        MESSAGESUPPORT_E_AUTH_TOKEN_REQUIRED= -2147220966,
        MESSAGESUPPORT_E_GET_TOKEN_FAILED= -2147220965,
        MESSAGESUPPORT_E_PROXY_GATEWAY_ERROR= -2147220964,
        MESSAGESUPPORT_E_NOT_ACCEPTABLE= -2147220963
    };

    enum scriptEngineError {
        SCRIPTENGINE_E_CANNOT_COCREATE_VBSCRIPT_CONTROL= -2147219711,
        SCRIPTENGINE_E_CANNOT_COCREATE_JSCRIPT_CONTROL= -2147219710
    };

    enum xmlSerializeError {
        XML_SERIALIZE_E_UNKNOWN = -2147209115,
        XML_SERIALIZE_E_INVALIDENUMVALUE= -2147209114,
        XML_SERIALIZE_E_CONVFAILED= -2147209113,
        XML_SERIALIZE_E_CANT_MAP_XMLTYPE_TO_CLASS= -2147209112
    };

// forward declarations
    enum esriDrawOp;
    enum esriByteSwapDataType;
    enum esriArcGISVersion;
    class IClassifyGEN;
    class IByteSwapStreamIO;
    class IStream;
    class ISequentialStream;
    struct _LARGE_INTEGER;
    struct _ULARGE_INTEGER;
    struct tagSTATSTG;
    struct _FILETIME;
    enum esriLicenseProductCode;
    enum esriLicenseExtensionCode;
    enum esriLicenseStatus;
    enum esriProductInstalled;
    enum esriServerMessageCodeEnum;
    enum esriSystemMessageCodeEnum;
    class IProductInstalled;
    class IAoInitialize;
    class IAuthorizeLicense;
    class ILicenseInfoEnum;
    class ILicenseInformation;
    class IVariantStreamIO;
    enum esriDrawPhase;
    class IVariantStream;
    class IPersistVariant;
    class IDocumentVersionSupportGEN;
    class ISet;
    class IArray;
    class IClone;
    class IPropertySupport;
    class IEnumBSTR;
    class IEnumNamedID;
    class IEnumVariantSimple;
    class IProgressor;
    class IErrorCollection;
    class IStepProgressor;
    class IAnimationProgressor;
    enum esriAnimations;
    class IStatusBar;
    class ITrackCancel;
    class ITrackCancel2;
    class ICheckProgressor;
    class IFileNames;
    class IFileNames2;
    class IComponentCategoryManager;
    class IEnumUID;
    class IComponentCategoryInfo;
    class ICategoryFactory;
    enum esriUnits;
    enum esriAreaUnits;
    enum esriCaseAppearance;
    enum esriDirectionType;
    enum esriDirectionUnits;
    class IUnitConverter;
    class IAngularConverter;
    class IAngularConverter2;
    class INumberFormat;
    enum esriScaleFormat;
    class IScaleFormat;
    class IGenerateStatistics;
    class IStatisticsResults;
    class IFrequencyStatistics;
    enum esriFilePermission;
    enum esriLockMgrType;
    class IFile;
    enum esriProductCode;
    class IESRILicenseInfo;
    class IName;
    class IEnumName;
    class IEnumNameEdit;
    class INameFactory;
    class IParseNameString;
    class IFileName;
    class IExtension;
    class IExtensionAccelerators;
    enum esriExtensionState;
    class IExtensionConfig;
    class IParentExtension;
    class IChildExtension;
    class IParentLicenseExtension;
    class IAutoExtension;
    enum esriCoreErrorReturnCodes;
    class IExtensionManager;
    class IExtensionManagerAdmin;
    class IArray2;
    class IPropertySet;
    class IPropertySet2;
    class IMemoryBlobStreamVariant;
    class ILongArray;
    class IDoubleArray;
    class IStringArray;
    class IVariantArray;
    class IPropertySetArray;
    class IObjectConstruct;
    class IObjectValidate;
    class IObjectActivate;
    class IObjectUpdate;
    class ILog;
    class ILog2;
    enum esriJobMessageType;
    class IJobMessage;
    class IJobTracker;
    class IEnvironmentManager;
    class IServerEnvironment;
    class IServerUserInfo;
    class IServerEnvironment2;
    class IServerEnvironment3;
    class ILogSupport;
    class IObjectCopy;
    class IXMLPersistedObject;
    class IJITExtensionManager;
    class ISystemBridge;
    class ITestConnection;
    class IRectHolder;
    struct tagRECT;
    class IShortcutName;
    class IArcGISLocale;
    class IInputDeviceManager;
    class IXMLSerialize;
    class IXMLSerializeData;
    class IObjectStream;
    class IDocumentVersion;
    class IPersist;
    class IPersistStream;
    class IBlobStream;
    class IMemoryBlobStream;
    class IMemoryBlobStream2;
    class ISupportErrorInfo;
    class IXMLVersionSupport;
    struct _WKSPoint;
    struct _WKSPointZ;
    struct _WKSEnvelope;
    struct _WKSEnvelopeZ;
    struct _esriPointAttributes;
    struct _esriPointAttributesEx;
    struct _esriSegmentModifier;
    enum esriLicenseServerEdition;
    class IClassID;
    class IClassify;
    class IClassifyMinMax;
    class IClassifyMinMax2;
    class IIntervalRange;
    class IIntervalRange2;
    class IDeviationInterval;
    enum esriRoundingOptionEnum;
    enum esriNumericAlignmentEnum;
    enum esriDirectionFormatEnum;
    class INumericFormat;
    class IPercentageFormat;
    enum esriFractionOptionEnum;
    class IFractionFormat;
    class ILatLonFormat;
    class ILatLonFormat2;
    class IAngleFormat;
    class IDirectionFormat;
    class IRateFormat;
    class ICustomNumberFormat;
    class IScientificNumberFormat;
    class INumberFormatOperations;
    class IXMLTypeMapper;
    class IXMLAttributes;
    class IXMLNamespaces;
    class IXMLReader;
    class IXMLWriter;
    class IXMLFlags;
    class IXMLSerializer;
    class IXMLSerializerAlt;
    class IXMLObjectElement;
    class IXMLStream;
    class IJSONWriter;
    class IExternalSerializer;
    class IExternalDeserializer;
    class IJSONSerializer;
    class IAMFWriter;
    class IAMFSerializer;
    enum JSONTokenType;
    class IJSONReader;
    class IJSONDeserializer;
    class IJSONObject;
    class IJSONArray;
    class IJSONWriter2;
    class IJSONReader2;
    enum xmlSerializeError;
    class ITimeReference;
    class ITimeZoneInfo;
    class ITimeZoneRule;
    struct _TimeZoneTransitionTime;
    class ITime;
    class ITimeDuration;
    struct _WKSTimeDuration;
    enum esriTimeStringFormat;
    enum esriTimeLocaleFormat;
    enum esriIntegerTimeFormat;
    struct _WKSDateTime;
    enum esriTimeUnits;
    enum esriTimeRelation;
    class ITime2;
    class ILocaleInfo;
    class ITimeValue;
    class ITimeExtent;
    class ITimeInstant;
    class ITimeZoneFactory;
    class ITimeZoneFactory2;
    class ITimeOffsetOperator;
    class ITimeRelationalOperator;
    enum messageSupportError;
    enum esriAGSInternetMessageFormat;
    enum esriTransportType;
    class IRequestHandler;
    class IRequestHandler2;
    enum esriHttpMethod;
    enum esriWebResponseDataType;
    class IWebRequestHandler;
    class IRESTRequestHandler;
    class IRESTOperation;
    class IRESTResource;
    class IEnumRESTResource;
    class IEnumRESTOperation;
    class IRESTCallback;
    class IRESTDispatcher;
    class IProxyServerInfo;
    class IProxyServerInfo2;
    class ISSLInfo;
    class IMessage;
    class IErrorInfo;
    enum esriTextureCompressionType;
    class IZipArchive;
    class IZipArchiveEx;
    class IZlibCompression;
    class ITextureCompression;
    class IGlobeCompression;
    class IJobDefinition;
    class IJobResults;
    class IJobMessages;
    class IJobInfo;
    class IJob;
    enum esriJobStatus;
    class IJobCatalog;
    class IJobRegistry;
    class IJobFilter;
    class IESRIScriptEngine;
    enum scriptEngineError;
    enum esriDrawOp;
    enum esriByteSwapDataType;
    enum esriArcGISVersion;
    class IClassifyGEN;
    class IUID;
    class IByteSwapStreamIO;
    class IStream;
    class ISequentialStream;
    struct _LARGE_INTEGER;
    struct _ULARGE_INTEGER;
    struct tagSTATSTG;
    struct _FILETIME;
    enum esriLicenseProductCode;
    enum esriLicenseExtensionCode;
    enum esriLicenseStatus;
    enum esriProductInstalled;
    enum esriServerMessageCodeEnum;
    enum esriSystemMessageCodeEnum;
    class IProductInstalled;
    class IAoInitialize;
    class IAuthorizeLicense;
    class ILicenseInfoEnum;
    class ILicenseInformation;
    class IVariantStreamIO;
    enum esriDrawPhase;
    class IVariantStream;
    class IPersistVariant;
    class IDocumentVersionSupportGEN;
    class ISet;
    class IArray;
    class IClone;
    class IPropertySupport;
    class IEnumBSTR;
    class IEnumNamedID;
    class IEnumVariantSimple;
    class IProgressor;
    class IErrorCollection;
    class IStepProgressor;
    class IAnimationProgressor;
    enum esriAnimations;
    class IStatusBar;
    class ITrackCancel;
    class ITrackCancel2;
    class ICheckProgressor;
    class IFileNames;
    class IFileNames2;
    class IComponentCategoryManager;
    class IEnumUID;
    class IComponentCategoryInfo;
    class ICategoryFactory;
    enum esriUnits;
    enum esriAreaUnits;
    enum esriCaseAppearance;
    enum esriDirectionType;
    enum esriDirectionUnits;
    class IUnitConverter;
    class IAngularConverter;
    class IAngularConverter2;
    class INumberFormat;
    enum esriScaleFormat;
    class IScaleFormat;
    class IGenerateStatistics;
    class IStatisticsResults;
    class IFrequencyStatistics;
    enum esriFilePermission;
    enum esriLockMgrType;
    class IFile;
    enum esriProductCode;
    class IESRILicenseInfo;
    class IName;
    class IEnumName;
    class IEnumNameEdit;
    class INameFactory;
    class IParseNameString;
    class IFileName;
    class IExtension;
    class IExtensionAccelerators;
    enum esriExtensionState;
    class IExtensionConfig;
    class IParentExtension;
    class IChildExtension;
    class IParentLicenseExtension;
    class IAutoExtension;
    enum esriCoreErrorReturnCodes;
    class IExtensionManager;
    class IExtensionManagerAdmin;
    class IArray2;
    class IPropertySet;
    class IPropertySet2;
    class IMemoryBlobStreamVariant;
    class ILongArray;
    class IDoubleArray;
    class IStringArray;
    class IVariantArray;
    class IPropertySetArray;
    class IObjectConstruct;
    class IObjectValidate;
    class IObjectActivate;
    class IObjectUpdate;
    class ILog;
    class ILog2;
    enum esriJobMessageType;
    class IJobMessage;
    class IJobTracker;
    class IEnvironmentManager;
    class IServerEnvironment;
    class IServerUserInfo;
    class IServerEnvironment2;
    class IServerEnvironment3;
    class ILogSupport;
    class IObjectCopy;
    class IXMLPersistedObject;
    class IJITExtensionManager;
    class ISystemBridge;
    class ITestConnection;
    class IRectHolder;
    struct tagRECT;
    class IShortcutName;
    class IArcGISLocale;
    class IInputDeviceManager;
    class IXMLSerializeData;
    class IXMLSerialize;
    struct GUID;
    class IObjectStream;
    class IDocumentVersion;
    class IPersist;
    class IPersistStream;
    class IBlobStream;
    class IMemoryBlobStream;
    class IMemoryBlobStream2;
    class ISupportErrorInfo;
    class IXMLVersionSupport;
    struct _WKSPoint;
    struct _WKSPointZ;
    struct _WKSEnvelope;
    struct _WKSEnvelopeZ;
    struct _esriPointAttributes;
    struct _esriPointAttributesEx;
    struct _esriSegmentModifier;
    enum esriLicenseServerEdition;
    class IClassID;
    class IClassify;
    class IClassifyMinMax;
    class IClassifyMinMax2;
    class IIntervalRange;
    class IIntervalRange2;
    class IDeviationInterval;
    enum esriRoundingOptionEnum;
    enum esriNumericAlignmentEnum;
    enum esriDirectionFormatEnum;
    class INumericFormat;
    class IPercentageFormat;
    enum esriFractionOptionEnum;
    class IFractionFormat;
    class ILatLonFormat;
    class ILatLonFormat2;
    class IAngleFormat;
    class IDirectionFormat;
    class IRateFormat;
    class ICustomNumberFormat;
    class IScientificNumberFormat;
    class INumberFormatOperations;
    class IXMLTypeMapper;
    class IXMLAttributes;
    class IXMLNamespaces;
    class IXMLReader;
    class IXMLWriter;
    class IXMLFlags;
    class IXMLSerializer;
    class IXMLSerializerAlt;
    class IXMLObjectElement;
    class IXMLStream;
    class IJSONWriter;
    class IExternalSerializer;
    class IExternalDeserializer;
    class IJSONSerializer;
    class IAMFWriter;
    class IAMFSerializer;
    enum JSONTokenType;
    class IJSONReader;
    class IJSONDeserializer;
    class IJSONObject;
    class IJSONArray;
    class IJSONWriter2;
    class IJSONReader2;
    enum xmlSerializeError;
    class ITimeReference;
    class ITimeZoneInfo;
    class ITimeZoneRule;
    struct _TimeZoneTransitionTime;
    class ITime;
    class ITimeDuration;
    struct _WKSTimeDuration;
    enum esriTimeStringFormat;
    enum esriTimeLocaleFormat;
    enum esriIntegerTimeFormat;
    struct _WKSDateTime;
    enum esriTimeUnits;
    enum esriTimeRelation;
    class ITime2;
    class ILocaleInfo;
    class ITimeValue;
    class ITimeExtent;
    class ITimeInstant;
    class ITimeZoneFactory;
    class ITimeZoneFactory2;
    class ITimeOffsetOperator;
    class ITimeRelationalOperator;
    enum messageSupportError;
    enum esriAGSInternetMessageFormat;
    enum esriTransportType;
    class IRequestHandler;
    class IRequestHandler2;
    enum esriHttpMethod;
    enum esriWebResponseDataType;
    class IWebRequestHandler;
    class IRESTRequestHandler;
    class IRESTOperation;
    class IRESTResource;
    class IEnumRESTResource;
    class IEnumRESTOperation;
    class IRESTCallback;
    class IRESTDispatcher;
    class IProxyServerInfo;
    class IProxyServerInfo2;
    class ISSLInfo;
    class IMessage;
    class IErrorInfo;
    enum esriTextureCompressionType;
    class IZipArchive;
    class IZipArchiveEx;
    class IZlibCompression;
    class ITextureCompression;
    class IGlobeCompression;
    class IJobDefinition;
    class IJobResults;
    class IJobMessages;
    class IJobInfo;
    class IJob;
    enum esriJobStatus;
    class IJobCatalog;
    class IJobRegistry;
    class IJobFilter;
    class IESRIScriptEngine;
    enum scriptEngineError;

// stub for vtable-only interface
class IClassifyGEN : public QAxObject {};

class ESRISYSTEM_EXPORT IUID : public QAxObject
{
public:
    IUID(IDispatch *subobject = 0, QAxObject *parent = 0)
    : QAxObject((IUnknown*)subobject, parent)
    {
        internalRelease();
    }

    /*
    Property SubType

    The subtype of the UID object.
For more information, see help context 1044 in C:\Program Files (x86)\ArcGIS\Desktop10.1\com\esriSystem.chm.
    */
    inline int SubType() const; //Returns the value of SubType
    inline void SetSubType(int value); //Sets the value of the SubType property

    /*
    Property Value

    The value of the UID object.
For more information, see help context 1039 in C:\Program Files (x86)\ArcGIS\Desktop10.1\com\esriSystem.chm.
    */
    inline QVariant Value() const; //Returns the value of Value
    inline void SetValue(const QVariant& value); //Sets the value of the Value property

    /*
    Method Compare

    Indicates if the two UID objects represent the same globally unique identifier.
For more information, see help context 10449 in C:\Program Files (x86)\ArcGIS\Desktop10.1\com\esriSystem.chm.
    */
    inline bool Compare(esriSystem::IUID* otherID);

    /*
    Method Generate

    Creates a new globally unique value for the UID object.
For more information, see help context 1040 in C:\Program Files (x86)\ArcGIS\Desktop10.1\com\esriSystem.chm.
    */
    inline void Generate();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// stub for vtable-only interface
class IByteSwapStreamIO : public QAxObject {};

// stub for vtable-only interface
class IStream : public QAxObject {};

// stub for vtable-only interface
class ISequentialStream : public QAxObject {};

// stub for vtable-only interface
class IProductInstalled : public QAxObject {};

// stub for vtable-only interface
class IAoInitialize : public QAxObject {};

// stub for vtable-only interface
class IAuthorizeLicense : public QAxObject {};

// stub for vtable-only interface
class ILicenseInfoEnum : public QAxObject {};

// stub for vtable-only interface
class ILicenseInformation : public QAxObject {};

// stub for vtable-only interface
class IVariantStreamIO : public QAxObject {};

// stub for vtable-only interface
class IVariantStream : public QAxObject {};

// stub for vtable-only interface
class IPersistVariant : public QAxObject {};

// stub for vtable-only interface
class IDocumentVersionSupportGEN : public QAxObject {};

// stub for vtable-only interface
class ISet : public QAxObject {};

// stub for vtable-only interface
class IArray : public QAxObject {};

// stub for vtable-only interface
class IClone : public QAxObject {};

// stub for vtable-only interface
class IPropertySupport : public QAxObject {};

// stub for vtable-only interface
class IEnumBSTR : public QAxObject {};

// stub for vtable-only interface
class IEnumNamedID : public QAxObject {};

// stub for vtable-only interface
class IEnumVariantSimple : public QAxObject {};

// stub for vtable-only interface
class IProgressor : public QAxObject {};

// stub for vtable-only interface
class IErrorCollection : public QAxObject {};

// stub for vtable-only interface
class IStepProgressor : public QAxObject {};

// stub for vtable-only interface
class IAnimationProgressor : public QAxObject {};

// stub for vtable-only interface
class IStatusBar : public QAxObject {};

// stub for vtable-only interface
class ITrackCancel : public QAxObject {};

// stub for vtable-only interface
class ITrackCancel2 : public QAxObject {};

// stub for vtable-only interface
class ICheckProgressor : public QAxObject {};

// stub for vtable-only interface
class IFileNames : public QAxObject {};

// stub for vtable-only interface
class IFileNames2 : public QAxObject {};

// stub for vtable-only interface
class IComponentCategoryManager : public QAxObject {};

// stub for vtable-only interface
class IEnumUID : public QAxObject {};

// stub for vtable-only interface
class IComponentCategoryInfo : public QAxObject {};

// stub for vtable-only interface
class ICategoryFactory : public QAxObject {};

// stub for vtable-only interface
class IUnitConverter : public QAxObject {};

// stub for vtable-only interface
class IAngularConverter : public QAxObject {};

// stub for vtable-only interface
class IAngularConverter2 : public QAxObject {};

// stub for vtable-only interface
class INumberFormat : public QAxObject {};

// stub for vtable-only interface
class IScaleFormat : public QAxObject {};

// stub for vtable-only interface
class IGenerateStatistics : public QAxObject {};

// stub for vtable-only interface
class IStatisticsResults : public QAxObject {};

// stub for vtable-only interface
class IFrequencyStatistics : public QAxObject {};

// stub for vtable-only interface
class IFile : public QAxObject {};

// stub for vtable-only interface
class IESRILicenseInfo : public QAxObject {};

// stub for vtable-only interface
class IName : public QAxObject {};

// stub for vtable-only interface
class IEnumName : public QAxObject {};

// stub for vtable-only interface
class IEnumNameEdit : public QAxObject {};

// stub for vtable-only interface
class INameFactory : public QAxObject {};

// stub for vtable-only interface
class IParseNameString : public QAxObject {};

// stub for vtable-only interface
class IFileName : public QAxObject {};

// stub for vtable-only interface
class IExtension : public QAxObject {};

// stub for vtable-only interface
class IExtensionAccelerators : public QAxObject {};

// stub for vtable-only interface
class IExtensionConfig : public QAxObject {};

// stub for vtable-only interface
class IParentExtension : public QAxObject {};

// stub for vtable-only interface
class IChildExtension : public QAxObject {};

// stub for vtable-only interface
class IParentLicenseExtension : public QAxObject {};

// stub for vtable-only interface
class IAutoExtension : public QAxObject {};

// stub for vtable-only interface
class IExtensionManager : public QAxObject {};

// stub for vtable-only interface
class IExtensionManagerAdmin : public QAxObject {};

// stub for vtable-only interface
class IArray2 : public QAxObject {};

// stub for vtable-only interface
class IPropertySet : public QAxObject {};

// stub for vtable-only interface
class IPropertySet2 : public QAxObject {};

// stub for vtable-only interface
class IMemoryBlobStreamVariant : public QAxObject {};

// stub for vtable-only interface
class ILongArray : public QAxObject {};

// stub for vtable-only interface
class IDoubleArray : public QAxObject {};

// stub for vtable-only interface
class IStringArray : public QAxObject {};

// stub for vtable-only interface
class IVariantArray : public QAxObject {};

// stub for vtable-only interface
class IPropertySetArray : public QAxObject {};

// stub for vtable-only interface
class IObjectConstruct : public QAxObject {};

// stub for vtable-only interface
class IObjectValidate : public QAxObject {};

// stub for vtable-only interface
class IObjectActivate : public QAxObject {};

// stub for vtable-only interface
class IObjectUpdate : public QAxObject {};

// stub for vtable-only interface
class ILog : public QAxObject {};

// stub for vtable-only interface
class ILog2 : public QAxObject {};

// stub for vtable-only interface
class IJobMessage : public QAxObject {};

// stub for vtable-only interface
class IJobTracker : public QAxObject {};

// stub for vtable-only interface
class IEnvironmentManager : public QAxObject {};

// stub for vtable-only interface
class IServerEnvironment : public QAxObject {};

// stub for vtable-only interface
class IServerUserInfo : public QAxObject {};

// stub for vtable-only interface
class IServerEnvironment2 : public QAxObject {};

// stub for vtable-only interface
class IServerEnvironment3 : public QAxObject {};

// stub for vtable-only interface
class ILogSupport : public QAxObject {};

// stub for vtable-only interface
class IObjectCopy : public QAxObject {};

// stub for vtable-only interface
class IXMLPersistedObject : public QAxObject {};

// stub for vtable-only interface
class IJITExtensionManager : public QAxObject {};

// stub for vtable-only interface
class ISystemBridge : public QAxObject {};

// stub for vtable-only interface
class ITestConnection : public QAxObject {};

// stub for vtable-only interface
class IRectHolder : public QAxObject {};

// stub for vtable-only interface
class IShortcutName : public QAxObject {};

// stub for vtable-only interface
class IArcGISLocale : public QAxObject {};

// stub for vtable-only interface
class IInputDeviceManager : public QAxObject {};

// stub for vtable-only interface
class IXMLSerialize : public QAxObject {};

// stub for vtable-only interface
class IXMLSerializeData : public QAxObject {};

// stub for vtable-only interface
class IObjectStream : public QAxObject {};

// stub for vtable-only interface
class IDocumentVersion : public QAxObject {};

// stub for vtable-only interface
class IPersist : public QAxObject {};

// stub for vtable-only interface
class IPersistStream : public QAxObject {};

// stub for vtable-only interface
class IBlobStream : public QAxObject {};

// stub for vtable-only interface
class IMemoryBlobStream : public QAxObject {};

// stub for vtable-only interface
class IMemoryBlobStream2 : public QAxObject {};

// stub for vtable-only interface
class ISupportErrorInfo : public QAxObject {};

// stub for vtable-only interface
class IXMLVersionSupport : public QAxObject {};

// stub for vtable-only interface
class IClassID : public QAxObject {};

// stub for vtable-only interface
class IClassify : public QAxObject {};

// stub for vtable-only interface
class IClassifyMinMax : public QAxObject {};

// stub for vtable-only interface
class IClassifyMinMax2 : public QAxObject {};

// stub for vtable-only interface
class IIntervalRange : public QAxObject {};

// stub for vtable-only interface
class IIntervalRange2 : public QAxObject {};

// stub for vtable-only interface
class IDeviationInterval : public QAxObject {};

// stub for vtable-only interface
class INumericFormat : public QAxObject {};

// stub for vtable-only interface
class IPercentageFormat : public QAxObject {};

// stub for vtable-only interface
class IFractionFormat : public QAxObject {};

// stub for vtable-only interface
class ILatLonFormat : public QAxObject {};

// stub for vtable-only interface
class ILatLonFormat2 : public QAxObject {};

// stub for vtable-only interface
class IAngleFormat : public QAxObject {};

// stub for vtable-only interface
class IDirectionFormat : public QAxObject {};

// stub for vtable-only interface
class IRateFormat : public QAxObject {};

// stub for vtable-only interface
class ICustomNumberFormat : public QAxObject {};

// stub for vtable-only interface
class IScientificNumberFormat : public QAxObject {};

// stub for vtable-only interface
class INumberFormatOperations : public QAxObject {};

// stub for vtable-only interface
class IXMLTypeMapper : public QAxObject {};

// stub for vtable-only interface
class IXMLAttributes : public QAxObject {};

// stub for vtable-only interface
class IXMLNamespaces : public QAxObject {};

// stub for vtable-only interface
class IXMLReader : public QAxObject {};

// stub for vtable-only interface
class IXMLWriter : public QAxObject {};

// stub for vtable-only interface
class IXMLFlags : public QAxObject {};

// stub for vtable-only interface
class IXMLSerializer : public QAxObject {};

// stub for vtable-only interface
class IXMLSerializerAlt : public QAxObject {};

// stub for vtable-only interface
class IXMLObjectElement : public QAxObject {};

// stub for vtable-only interface
class IXMLStream : public QAxObject {};

// stub for vtable-only interface
class IJSONWriter : public QAxObject {};

// stub for vtable-only interface
class IExternalSerializer : public QAxObject {};

// stub for vtable-only interface
class IExternalDeserializer : public QAxObject {};

// stub for vtable-only interface
class IJSONSerializer : public QAxObject {};

// stub for vtable-only interface
class IAMFWriter : public QAxObject {};

// stub for vtable-only interface
class IAMFSerializer : public QAxObject {};

// stub for vtable-only interface
class IJSONReader : public QAxObject {};

// stub for vtable-only interface
class IJSONDeserializer : public QAxObject {};

// stub for vtable-only interface
class IJSONObject : public QAxObject {};

// stub for vtable-only interface
class IJSONArray : public QAxObject {};

// stub for vtable-only interface
class IJSONWriter2 : public QAxObject {};

// stub for vtable-only interface
class IJSONReader2 : public QAxObject {};

// stub for vtable-only interface
class ITimeReference : public QAxObject {};

// stub for vtable-only interface
class ITimeZoneInfo : public QAxObject {};

// stub for vtable-only interface
class ITimeZoneRule : public QAxObject {};

// stub for vtable-only interface
class ITime : public QAxObject {};

// stub for vtable-only interface
class ITimeDuration : public QAxObject {};

// stub for vtable-only interface
class ITime2 : public QAxObject {};

// stub for vtable-only interface
class ILocaleInfo : public QAxObject {};

// stub for vtable-only interface
class ITimeValue : public QAxObject {};

// stub for vtable-only interface
class ITimeExtent : public QAxObject {};

// stub for vtable-only interface
class ITimeInstant : public QAxObject {};

// stub for vtable-only interface
class ITimeZoneFactory : public QAxObject {};

// stub for vtable-only interface
class ITimeZoneFactory2 : public QAxObject {};

// stub for vtable-only interface
class ITimeOffsetOperator : public QAxObject {};

// stub for vtable-only interface
class ITimeRelationalOperator : public QAxObject {};

// stub for vtable-only interface
class IRequestHandler : public QAxObject {};

// stub for vtable-only interface
class IRequestHandler2 : public QAxObject {};

// stub for vtable-only interface
class IWebRequestHandler : public QAxObject {};

// stub for vtable-only interface
class IRESTRequestHandler : public QAxObject {};

// stub for vtable-only interface
class IRESTOperation : public QAxObject {};

// stub for vtable-only interface
class IRESTResource : public QAxObject {};

// stub for vtable-only interface
class IEnumRESTResource : public QAxObject {};

// stub for vtable-only interface
class IEnumRESTOperation : public QAxObject {};

// stub for vtable-only interface
class IRESTCallback : public QAxObject {};

// stub for vtable-only interface
class IRESTDispatcher : public QAxObject {};

// stub for vtable-only interface
class IProxyServerInfo : public QAxObject {};

// stub for vtable-only interface
class IProxyServerInfo2 : public QAxObject {};

// stub for vtable-only interface
class ISSLInfo : public QAxObject {};

// stub for vtable-only interface
class IMessage : public QAxObject {};

// stub for vtable-only interface
class IErrorInfo : public QAxObject {};

// stub for vtable-only interface
class IZipArchive : public QAxObject {};

// stub for vtable-only interface
class IZipArchiveEx : public QAxObject {};

// stub for vtable-only interface
class IZlibCompression : public QAxObject {};

// stub for vtable-only interface
class ITextureCompression : public QAxObject {};

// stub for vtable-only interface
class IGlobeCompression : public QAxObject {};

// stub for vtable-only interface
class IJobDefinition : public QAxObject {};

// stub for vtable-only interface
class IJobResults : public QAxObject {};

// stub for vtable-only interface
class IJobMessages : public QAxObject {};

// stub for vtable-only interface
class IJobInfo : public QAxObject {};

// stub for vtable-only interface
class IJob : public QAxObject {};

// stub for vtable-only interface
class IJobCatalog : public QAxObject {};

// stub for vtable-only interface
class IJobRegistry : public QAxObject {};

// stub for vtable-only interface
class IJobFilter : public QAxObject {};

// stub for vtable-only interface
class IESRIScriptEngine : public QAxObject {};

// Actual coclasses
class ESRISYSTEM_EXPORT InputDeviceManager : public QAxObject
{
public:
    InputDeviceManager(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{71d66954-d2bf-4fdd-86c6-68b062402780}");
    }

    InputDeviceManager(IInputDeviceManager *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property DeviceCount
    */
    inline int DeviceCount() const; //Returns the value of DeviceCount

    /*
    Method AddDevice
    */
    inline void AddDevice(esriSystem::IUID* pDeviceCLSID, QVariant& initializationData);

    /*
    Method Device
    */
    inline esriSystem::IExtension* Device(int index);

    /*
    Method DeviceCLSID
    */
    inline esriSystem::IUID* DeviceCLSID(int index);

    /*
    Method FindDevice
    */
    inline esriSystem::IExtension* FindDevice(const QVariant& nameOrID);

    /*
    Method ShutdownDevices
    */
    inline void ShutdownDevices();

    /*
    Method StartupDevices
    */
    inline void StartupDevices(QVariant& initializationData);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT Set : public QAxObject
{
public:
    Set(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{33848e03-983b-11d1-8463-0000f875b9c6}");
    }

    Set(ISet *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Count
    */
    inline int Count() const; //Returns the value of Count

    /*
    Method Add
    */
    inline void Add(IUnknown* unk);

    /*
    Method Find
    */
    inline bool Find(IUnknown* unk);

    /*
    Method Next
    */
    inline IUnknown* Next();

    /*
    Method Remove
    */
    inline void Remove(IUnknown* unk);

    /*
    Method RemoveAll
    */
    inline void RemoveAll();

    /*
    Method Reset
    */
    inline void Reset();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT Array : public QAxObject
{
public:
    Array(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{8f2b6061-ab00-11d2-87f4-0000f8751720}");
    }

    Array(IArray *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    Array(IArray2 *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    Array(IXMLSerialize *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Count
    */
    inline int Count() const; //Returns the value of Count

    /*
    Method Add
    */
    inline void Add(IUnknown* unk);

    /*
    Method Deserialize
    */
    inline void Deserialize(esriSystem::IXMLSerializeData* data);

    /*
    Method Element
    */
    inline IUnknown* Element(int index);

    /*
    Method Insert
    */
    inline void Insert(int index, IUnknown* unk);

    /*
    Method Remove
    */
    inline void Remove(int index);

    /*
    Method RemoveAll
    */
    inline void RemoveAll();

    /*
    Method Replace
    */
    inline void Replace(int index, IUnknown* unk);

    /*
    Method Serialize
    */
    inline void Serialize(esriSystem::IXMLSerializeData* data);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT ObjectStream : public QAxObject
{
public:
    ObjectStream(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{043731d0-a7cf-11d1-8bd1-080009ee4e41}");
    }

    ObjectStream(IObjectStream *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    ObjectStream(IDocumentVersion *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property DocumentVersion
    */
    inline esriSystem::esriArcGISVersion DocumentVersion() const; //Returns the value of DocumentVersion

    /*
    Property Stream
    */
    inline esriSystem::IStream* Stream() const; //Returns the value of Stream

    /*
    Property Version
    */
    inline QString Version() const; //Returns the value of Version

    /*
    Method LoadObject
    */
    inline IUnknown* LoadObject(GUID* riid, IUnknown* pUnkOuter);

    /*
    Method ReplaceObject
    */
    inline void ReplaceObject(IUnknown* unknown);

    /*
    Method SaveObject
    */
    inline void SaveObject(IUnknown* pUnk);

    /*
    Method SetDocumentVersion
    */
    inline void SetDocumentVersion(esriSystem::esriArcGISVersion DocumentVersion);

    /*
    Method SetStream
    */
    inline void SetStream(esriSystem::IStream* Stream);

    /*
    Method SetVersion
    */
    inline void SetVersion(const QString& Version);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT ByteSwapStreamIO : public QAxObject
{
public:
    ByteSwapStreamIO(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{74d3b3a0-e54f-46d2-b9e8-4167a0b21f87}");
    }

    ByteSwapStreamIO(IByteSwapStreamIO *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Stream
    */
    inline esriSystem::IStream* Stream() const; //Returns the value of Stream

    /*
    Method Read
    */
    inline void Read(esriSystem::esriByteSwapDataType dataType, void*& pv, uint cb, uint& pcbRead);

    /*
    Method SetStream
    */
    inline void SetStream(esriSystem::IStream* Stream);

    /*
    Method Write
    */
    inline void Write(esriSystem::esriByteSwapDataType dataType, void* pv, uint cb, uint& pcbWritten);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT VariantStreamIO : public QAxObject
{
public:
    VariantStreamIO(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{12dadd0e-4d96-4599-b4ba-f9246a8ad312}");
    }

    VariantStreamIO(IVariantStreamIO *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    VariantStreamIO(IVariantStream *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    VariantStreamIO(IDocumentVersion *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property DocumentVersion
    */
    inline esriSystem::esriArcGISVersion DocumentVersion() const; //Returns the value of DocumentVersion

    /*
    Property Stream
    */
    inline esriSystem::IStream* Stream() const; //Returns the value of Stream
    inline void SetStream(esriSystem::IStream* value); //Sets the value of the Stream property

    /*
    Method Read
    */
    inline QVariant Read();

    /*
    Method SetDocumentVersion
    */
    inline void SetDocumentVersion(esriSystem::esriArcGISVersion DocumentVersion);

    /*
    Method Write
    */
    inline void Write(const QVariant& Value);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT UID : public QAxObject
{
public:
    UID(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{78ff7fa1-fb2f-11d1-94a2-080009eebecb}");
    }

    UID(IPersist *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    UID(IPersistStream *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    UID(IXMLSerialize *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property SubType

    The subtype of the UID object.
For more information, see help context 1044 in C:\Program Files (x86)\ArcGIS\Desktop10.1\com\esriSystem.chm.
    */
    inline int SubType() const; //Returns the value of SubType
    inline void SetSubType(int value); //Sets the value of the SubType property

    /*
    Property Value

    The value of the UID object.
For more information, see help context 1039 in C:\Program Files (x86)\ArcGIS\Desktop10.1\com\esriSystem.chm.
    */
    inline QVariant Value() const; //Returns the value of Value
    inline void SetValue(const QVariant& value); //Sets the value of the Value property

    /*
    Method Compare

    Indicates if the two UID objects represent the same globally unique identifier.
For more information, see help context 10449 in C:\Program Files (x86)\ArcGIS\Desktop10.1\com\esriSystem.chm.
    */
    inline bool Compare(esriSystem::IUID* otherID);

    /*
    Method Deserialize
    */
    inline void Deserialize(esriSystem::IXMLSerializeData* data);

    /*
    Method Generate

    Creates a new globally unique value for the UID object.
For more information, see help context 1040 in C:\Program Files (x86)\ArcGIS\Desktop10.1\com\esriSystem.chm.
    */
    inline void Generate();

    /*
    Method GetClassID
    */
    inline void GetClassID(GUID*& pClassID);

    /*
    Method GetSizeMax
    */
    inline void GetSizeMax(_ULARGE_INTEGER*& pcbSize);

    /*
    Method IsDirty
    */
    inline void IsDirty();

    /*
    Method Load
    */
    inline void Load(esriSystem::IStream* pstm);

    /*
    Method Save
    */
    inline void Save(esriSystem::IStream* pstm, int fClearDirty);

    /*
    Method Serialize
    */
    inline void Serialize(esriSystem::IXMLSerializeData* data);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT ComponentCategoryManager : public QAxObject
{
public:
    ComponentCategoryManager(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{d9b58742-322d-11d2-a29a-080009b6f22b}");
    }

    ComponentCategoryManager(IComponentCategoryManager *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    ComponentCategoryManager(IComponentCategoryInfo *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Method Create
    */
    inline void Create(const QString& Name, esriSystem::IUID* category);

    /*
    Method GetComponentsInCategory
    */
    inline esriSystem::IEnumUID* GetComponentsInCategory(esriSystem::IUID* pCategoryID);

    /*
    Method Setup
    */
    inline void Setup(const QString& pathname, esriSystem::IUID* objectType, esriSystem::IUID* category, bool install);

    /*
    Method SetupObject
    */
    inline void SetupObject(const QString& pathname, esriSystem::IUID* obj, esriSystem::IUID* category, bool install);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT CategoryFactory : public QAxObject
{
public:
    CategoryFactory(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{a8253eb1-9381-11d2-8521-0000f875b9c6}");
    }

    CategoryFactory(ICategoryFactory *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property CategoryID
    */
    inline esriSystem::IUID* CategoryID() const; //Returns the value of CategoryID
    inline void SetCategoryID(esriSystem::IUID* value); //Sets the value of the CategoryID property

    /*
    Method CreateNext
    */
    inline IUnknown* CreateNext();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT BaseStatistics : public QAxObject
{
public:
    BaseStatistics(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{b9c4358c-78b8-11d2-ae60-080009ec732a}");
    }

    BaseStatistics(IGenerateStatistics *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    BaseStatistics(IStatisticsResults *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    BaseStatistics(IFrequencyStatistics *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Count
    */
    inline int Count() const; //Returns the value of Count

    /*
    Property FrequencyIntervalCount
    */
    inline int FrequencyIntervalCount() const; //Returns the value of FrequencyIntervalCount
    inline void SetFrequencyIntervalCount(int value); //Sets the value of the FrequencyIntervalCount property

    /*
    Property FrequencyIntervalSize
    */
    inline double FrequencyIntervalSize() const; //Returns the value of FrequencyIntervalSize

    /*
    Property Maximum
    */
    inline double Maximum() const; //Returns the value of Maximum

    /*
    Property Mean
    */
    inline double Mean() const; //Returns the value of Mean

    /*
    Property Minimum
    */
    inline double Minimum() const; //Returns the value of Minimum

    /*
    Property Sample
    */
    inline bool Sample() const; //Returns the value of Sample
    inline void SetSample(bool value); //Sets the value of the Sample property

    /*
    Property SimpleStats
    */
    inline bool SimpleStats() const; //Returns the value of SimpleStats
    inline void SetSimpleStats(bool value); //Sets the value of the SimpleStats property

    /*
    Property StandardDeviation
    */
    inline double StandardDeviation() const; //Returns the value of StandardDeviation

    /*
    Property Sum
    */
    inline double Sum() const; //Returns the value of Sum

    /*
    Method AddValue
    */
    inline void AddValue(double Value);

    /*
    Method ComputeAutoFrequencyIntervals
    */
    inline void ComputeAutoFrequencyIntervals();

    /*
    Method FinalCompute
    */
    inline void FinalCompute();

    /*
    Method FrequencyClassCount
    */
    inline int FrequencyClassCount(int intervalIndex);

    /*
    Method Reset
    */
    inline void Reset(bool SimpleStats);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT FileStream : public QAxObject
{
public:
    FileStream(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{381d1aa1-c06f-11d2-9f82-00c04f8ed211}");
    }

    FileStream(IBlobStream *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    FileStream(IFile *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    FileStream(IDocumentVersion *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property DocumentVersion
    */
    inline esriSystem::esriArcGISVersion DocumentVersion() const; //Returns the value of DocumentVersion

    /*
    Property Size
    */
    inline uint Size() const; //Returns the value of Size
    inline void SetSize(uint value); //Sets the value of the Size property

    /*
    Method LoadFromFile
    */
    inline void LoadFromFile(const QString& FileName);

    /*
    Method Open
    */
    inline void Open(const QString& FileName, esriSystem::esriFilePermission permission);

    /*
    Method SaveToFile
    */
    inline void SaveToFile(const QString& FileName);

    /*
    Method SetDocumentVersion
    */
    inline void SetDocumentVersion(esriSystem::esriArcGISVersion DocumentVersion);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT NameFactory : public QAxObject
{
public:
    NameFactory(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{db1eccc0-c6c6-11d2-9f24-00c04f6bc69e}");
    }

    NameFactory(INameFactory *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Method Create
    */
    inline esriSystem::IName* Create(const QString& NameString);

    /*
    Method PackageNames
    */
    inline QVariant PackageNames(esriSystem::IEnumName* names);

    /*
    Method UnpackageNames
    */
    inline esriSystem::IEnumName* UnpackageNames(QVariant& bytesArray);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT FileName : public QAxObject
{
public:
    FileName(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{53da75df-d01a-11d2-9f27-00c04f6bc69e}");
    }

    FileName(IName *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    FileName(IFileName *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    FileName(IPersistStream *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property NameString
    */
    inline QString NameString() const; //Returns the value of NameString

    /*
    Property Path
    */
    inline QString Path() const; //Returns the value of Path

    /*
    Method GetSizeMax
    */
    inline void GetSizeMax(_ULARGE_INTEGER*& pcbSize);

    /*
    Method IsDirty
    */
    inline void IsDirty();

    /*
    Method Load
    */
    inline void Load(esriSystem::IStream* pstm);

    /*
    Method Open
    */
    inline IUnknown* Open();

    /*
    Method Save
    */
    inline void Save(esriSystem::IStream* pstm, int fClearDirty);

    /*
    Method SetNameString
    */
    inline void SetNameString(const QString& NameString);

    /*
    Method SetPath
    */
    inline void SetPath(const QString& Path);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT MemoryBlobStream : public QAxObject
{
public:
    MemoryBlobStream(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{bc929960-e736-11d0-9a93-080009ec734b}");
    }

    MemoryBlobStream(IMemoryBlobStream *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    MemoryBlobStream(IMemoryBlobStream2 *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    MemoryBlobStream(IMemoryBlobStreamVariant *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    MemoryBlobStream(IDocumentVersion *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    MemoryBlobStream(ISupportErrorInfo *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property AllocSize
    */
    inline uint AllocSize() const; //Returns the value of AllocSize
    inline void SetAllocSize(uint value); //Sets the value of the AllocSize property

    /*
    Property DocumentVersion
    */
    inline esriSystem::esriArcGISVersion DocumentVersion() const; //Returns the value of DocumentVersion

    /*
    Property PaddingSize
    */
    inline uint PaddingSize() const; //Returns the value of PaddingSize
    inline void SetPaddingSize(uint value); //Sets the value of the PaddingSize property

    /*
    Method AttachToMemory
    */
    inline void AttachToMemory(uint& blobMemory, uint Size, int transferOwnership);

    /*
    Method ExportToVariant
    */
    inline void ExportToVariant(QVariant& Value);

    /*
    Method ImportFromMemory
    */
    inline void ImportFromMemory(uint& blobMemory, uint Size);

    /*
    Method ImportFromVariant
    */
    inline void ImportFromVariant(const QVariant& Value);

    /*
    Method InterfaceSupportsErrorInfo
    */
    inline void InterfaceSupportsErrorInfo(GUID* riid);

    /*
    Method Memory
    */
    inline HRESULT Memory(uint** blobMemory, uint& Size);

    /*
    Method SetDocumentVersion
    */
    inline void SetDocumentVersion(esriSystem::esriArcGISVersion DocumentVersion);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT ESRILicenseInfo : public QAxObject
{
public:
    ESRILicenseInfo(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{2cca83e3-efe4-4cba-9852-6c0c7521ad8e}");
    }

    ESRILicenseInfo(IESRILicenseInfo *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property DefaultProduct
    */
    inline esriSystem::esriProductCode DefaultProduct() const; //Returns the value of DefaultProduct

    /*
    Method IsLicensed
    */
    inline bool IsLicensed(esriSystem::esriProductCode ProductCode);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT ExtensionManager : public QAxObject
{
public:
    ExtensionManager(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{6120bc0a-3d90-4274-97ca-713c41f1faff}");
    }

    ExtensionManager(IExtensionManager *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    ExtensionManager(IExtensionManagerAdmin *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    ExtensionManager(ISupportErrorInfo *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    ExtensionManager(IJITExtensionManager *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property ExtensionCount
    */
    inline int ExtensionCount() const; //Returns the value of ExtensionCount

    /*
    Property JITExtensionCount
    */
    inline int JITExtensionCount() const; //Returns the value of JITExtensionCount

    /*
    Method AddExtension
    */
    inline void AddExtension(esriSystem::IUID* ExtensionCLSID, QVariant& initializationData);

    /*
    Method Extension
    */
    inline esriSystem::IExtension* Extension(int index);

    /*
    Method ExtensionCLSID
    */
    inline esriSystem::IUID* ExtensionCLSID(int index);

    /*
    Method FindExtension
    */
    inline esriSystem::IExtension* FindExtension(const QVariant& nameOrID);

    /*
    Method InsertExtension
    */
    inline void InsertExtension(esriSystem::IUID* pExtCLSID, esriSystem::IExtension* pExtension);

    /*
    Method InterfaceSupportsErrorInfo
    */
    inline void InterfaceSupportsErrorInfo(GUID* riid);

    /*
    Method IsExtensionEnabled
    */
    inline bool IsExtensionEnabled(esriSystem::IUID* pExtCLSID);

    /*
    Method IsLoaded
    */
    inline bool IsLoaded(esriSystem::IUID* pID);

    /*
    Method JITExtensionCLSID
    */
    inline esriSystem::IUID* JITExtensionCLSID(int index);

    /*
    Method RemoveExtension
    */
    inline void RemoveExtension(esriSystem::IExtension* pExtension);

    /*
    Method ShutdownExtensions
    */
    inline void ShutdownExtensions();

    /*
    Method StartupExtensions
    */
    inline void StartupExtensions(esriSystem::IUID* componentCategory, esriSystem::IUID* jitCategory, QVariant& initializationData);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT FileNames : public QAxObject
{
public:
    FileNames(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{a3dcea3a-ebd5-11d4-a656-0008c711c8c1}");
    }

    FileNames(IFileNames *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    FileNames(IFileNames2 *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Method Add
    */
    inline void Add(const QString& FileName);

    /*
    Method Find
    */
    inline bool Find(const QString& FileName);

    /*
    Method GetContainedExtensions
    */
    inline QString GetContainedExtensions();

    /*
    Method GetSubset
    */
    inline esriSystem::IFileNames* GetSubset(const QString& extSet);

    /*
    Method IsDirectory
    */
    inline bool IsDirectory();

    /*
    Method LoadFromPath
    */
    inline void LoadFromPath(const QString& Path);

    /*
    Method Next
    */
    inline QString Next();

    /*
    Method Remove
    */
    inline void Remove();

    /*
    Method Reset
    */
    inline void Reset();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT PropertySet : public QAxObject
{
public:
    PropertySet(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{588e5a11-d09b-11d1-aa7c-00c04fa33a15}");
    }

    PropertySet(IPropertySet *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    PropertySet(IPropertySet2 *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    PropertySet(IXMLSerialize *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    PropertySet(IPersist *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    PropertySet(IPersistStream *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    PropertySet(IClone *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Count
    */
    inline int Count() const; //Returns the value of Count

    /*
    Method Assign
    */
    inline void Assign(esriSystem::IClone* src);

    /*
    Method Clone
    */
    inline esriSystem::IClone* Clone();

    /*
    Method Deserialize
    */
    inline void Deserialize(esriSystem::IXMLSerializeData* data);

    /*
    Method GetAllProperties
    */
    inline void GetAllProperties(QVariant& names, QVariant& values);

    /*
    Method GetClassID
    */
    inline void GetClassID(GUID*& pClassID);

    /*
    Method GetProperties
    */
    inline void GetProperties(const QVariant& names, QVariant& values);

    /*
    Method GetProperty
    */
    inline QVariant GetProperty(const QString& Name);

    /*
    Method GetSizeMax
    */
    inline void GetSizeMax(_ULARGE_INTEGER*& pcbSize);

    /*
    Method IsDirty
    */
    inline void IsDirty();

    /*
    Method IsEqual
    */
    inline bool IsEqual(esriSystem::IClone* other);

    /*
    Method IsEqual
    */
    inline bool IsEqual(esriSystem::IPropertySet* PropertySet);

    /*
    Method IsEqualNoCase
    */
    inline bool IsEqualNoCase(esriSystem::IPropertySet* PropertySet);

    /*
    Method IsIdentical
    */
    inline bool IsIdentical(esriSystem::IClone* other);

    /*
    Method Load
    */
    inline void Load(esriSystem::IStream* pstm);

    /*
    Method RemoveProperty
    */
    inline void RemoveProperty(const QString& Name);

    /*
    Method Save
    */
    inline void Save(esriSystem::IStream* pstm, int fClearDirty);

    /*
    Method Serialize
    */
    inline void Serialize(esriSystem::IXMLSerializeData* data);

    /*
    Method SetProperties
    */
    inline void SetProperties(const QVariant& names, const QVariant& values);

    /*
    Method SetProperty
    */
    inline void SetProperty(const QString& Name, const QVariant& Value);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT EnvironmentManager : public QAxObject
{
public:
    EnvironmentManager(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{8a626d49-5f5e-47d9-9463-0b802e9c4167}");
    }

    EnvironmentManager(IEnvironmentManager *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Method AddEnvironment
    */
    inline void AddEnvironment(esriSystem::IUID* pGuid, IUnknown* pUnk);

    /*
    Method GetEnvironment
    */
    inline IUnknown* GetEnvironment(esriSystem::IUID* pGuid);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT DoubleArray : public QAxObject
{
public:
    DoubleArray(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{60c06ca7-e09e-11d2-9f7b-00c04f8ece27}");
    }

    DoubleArray(IDoubleArray *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    DoubleArray(IXMLSerialize *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    DoubleArray(IPersist *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    DoubleArray(IPersistStream *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Count
    */
    inline int Count() const; //Returns the value of Count

    /*
    Method Add
    */
    inline void Add(double Element);

    /*
    Method Deserialize
    */
    inline void Deserialize(esriSystem::IXMLSerializeData* data);

    /*
    Method Element
    */
    inline double Element(int index);

    /*
    Method GetClassID
    */
    inline void GetClassID(GUID*& pClassID);

    /*
    Method GetSizeMax
    */
    inline void GetSizeMax(_ULARGE_INTEGER*& pcbSize);

    /*
    Method Insert
    */
    inline void Insert(int index, double Element);

    /*
    Method IsDirty
    */
    inline void IsDirty();

    /*
    Method Load
    */
    inline void Load(esriSystem::IStream* pstm);

    /*
    Method Remove
    */
    inline void Remove(int index);

    /*
    Method RemoveAll
    */
    inline void RemoveAll();

    /*
    Method Save
    */
    inline void Save(esriSystem::IStream* pstm, int fClearDirty);

    /*
    Method Serialize
    */
    inline void Serialize(esriSystem::IXMLSerializeData* data);

    /*
    Method SetElement
    */
    inline void SetElement(int index, double pElement);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT LongArray : public QAxObject
{
public:
    LongArray(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{98bfb808-e91f-11d2-9f81-00c04f8ece27}");
    }

    LongArray(ILongArray *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    LongArray(IXMLSerialize *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    LongArray(IPersist *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    LongArray(IPersistStream *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Count
    */
    inline int Count() const; //Returns the value of Count

    /*
    Method Add
    */
    inline void Add(int Element);

    /*
    Method Deserialize
    */
    inline void Deserialize(esriSystem::IXMLSerializeData* data);

    /*
    Method Element
    */
    inline int Element(int index);

    /*
    Method GetClassID
    */
    inline void GetClassID(GUID*& pClassID);

    /*
    Method GetSizeMax
    */
    inline void GetSizeMax(_ULARGE_INTEGER*& pcbSize);

    /*
    Method Insert
    */
    inline void Insert(int index, int Element);

    /*
    Method IsDirty
    */
    inline void IsDirty();

    /*
    Method Load
    */
    inline void Load(esriSystem::IStream* pstm);

    /*
    Method Remove
    */
    inline void Remove(int index);

    /*
    Method RemoveAll
    */
    inline void RemoveAll();

    /*
    Method Save
    */
    inline void Save(esriSystem::IStream* pstm, int fClearDirty);

    /*
    Method Serialize
    */
    inline void Serialize(esriSystem::IXMLSerializeData* data);

    /*
    Method SetElement
    */
    inline void SetElement(int index, int pElement);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT StrArray : public QAxObject
{
public:
    StrArray(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{a7f92065-36ce-47b6-a463-4763da947cc2}");
    }

    StrArray(IStringArray *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    StrArray(IXMLSerialize *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    StrArray(IPersist *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    StrArray(IPersistStream *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Count
    */
    inline int Count() const; //Returns the value of Count

    /*
    Method Add
    */
    inline void Add(const QString& Element);

    /*
    Method Deserialize
    */
    inline void Deserialize(esriSystem::IXMLSerializeData* data);

    /*
    Method Element
    */
    inline QString Element(int index);

    /*
    Method GetClassID
    */
    inline void GetClassID(GUID*& pClassID);

    /*
    Method GetSizeMax
    */
    inline void GetSizeMax(_ULARGE_INTEGER*& pcbSize);

    /*
    Method Insert
    */
    inline void Insert(int index, const QString& Element);

    /*
    Method IsDirty
    */
    inline void IsDirty();

    /*
    Method Load
    */
    inline void Load(esriSystem::IStream* pstm);

    /*
    Method Remove
    */
    inline void Remove(int index);

    /*
    Method RemoveAll
    */
    inline void RemoveAll();

    /*
    Method Save
    */
    inline void Save(esriSystem::IStream* pstm, int fClearDirty);

    /*
    Method Serialize
    */
    inline void Serialize(esriSystem::IXMLSerializeData* data);

    /*
    Method SetElement
    */
    inline void SetElement(int index, const QString& Element);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT VarArray : public QAxObject
{
public:
    VarArray(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{762f0474-eca2-475b-99f4-26678d79436e}");
    }

    VarArray(IVariantArray *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    VarArray(IXMLSerialize *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    VarArray(IPersist *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    VarArray(IPersistStream *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Count
    */
    inline int Count() const; //Returns the value of Count

    /*
    Method Add
    */
    inline void Add(const QVariant& Element);

    /*
    Method Deserialize
    */
    inline void Deserialize(esriSystem::IXMLSerializeData* data);

    /*
    Method Element
    */
    inline QVariant Element(int index);

    /*
    Method GetClassID
    */
    inline void GetClassID(GUID*& pClassID);

    /*
    Method GetSizeMax
    */
    inline void GetSizeMax(_ULARGE_INTEGER*& pcbSize);

    /*
    Method Insert
    */
    inline void Insert(int index, const QVariant& Element);

    /*
    Method IsDirty
    */
    inline void IsDirty();

    /*
    Method Load
    */
    inline void Load(esriSystem::IStream* pstm);

    /*
    Method Remove
    */
    inline void Remove(int index);

    /*
    Method RemoveAll
    */
    inline void RemoveAll();

    /*
    Method Save
    */
    inline void Save(esriSystem::IStream* pstm, int fClearDirty);

    /*
    Method Serialize
    */
    inline void Serialize(esriSystem::IXMLSerializeData* data);

    /*
    Method SetElement
    */
    inline void SetElement(int index, const QVariant& Element);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT PropertySetArray : public QAxObject
{
public:
    PropertySetArray(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{c94bbd8a-ec33-4921-8ec3-6ad4b33232c3}");
    }

    PropertySetArray(IPropertySetArray *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    PropertySetArray(IXMLSerialize *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    PropertySetArray(IPersistStream *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    PropertySetArray(IPersist *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    PropertySetArray(IXMLVersionSupport *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Count
    */
    inline int Count() const; //Returns the value of Count

    /*
    Property MinNamespaceSupported
    */
    inline QString MinNamespaceSupported() const; //Returns the value of MinNamespaceSupported

    /*
    Method Add
    */
    inline void Add(esriSystem::IPropertySet* pPropertySet);

    /*
    Method Deserialize
    */
    inline void Deserialize(esriSystem::IXMLSerializeData* data);

    /*
    Method Element
    */
    inline esriSystem::IPropertySet* Element(int index);

    /*
    Method GetClassID
    */
    inline void GetClassID(GUID*& pClassID);

    /*
    Method GetSizeMax
    */
    inline void GetSizeMax(_ULARGE_INTEGER*& pcbSize);

    /*
    Method Insert
    */
    inline void Insert(int index, esriSystem::IPropertySet* pPropertySet);

    /*
    Method IsDirty
    */
    inline void IsDirty();

    /*
    Method Load
    */
    inline void Load(esriSystem::IStream* pstm);

    /*
    Method Remove
    */
    inline void Remove(int index);

    /*
    Method RemoveAll
    */
    inline void RemoveAll();

    /*
    Method Save
    */
    inline void Save(esriSystem::IStream* pstm, int fClearDirty);

    /*
    Method Serialize
    */
    inline void Serialize(esriSystem::IXMLSerializeData* data);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT UnitConverter : public QAxObject
{
public:
    UnitConverter(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{2f65c2f2-701b-4e11-9157-fc4a3d0b6069}");
    }

    UnitConverter(IUnitConverter *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Method ConvertUnits
    */
    inline double ConvertUnits(double dValue, esriSystem::esriUnits inUnits, esriSystem::esriUnits outUnits);

    /*
    Method EsriUnitsAsString
    */
    inline QString EsriUnitsAsString(esriSystem::esriUnits units, esriSystem::esriCaseAppearance appearance, bool bPlural);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT AngularConverter : public QAxObject
{
public:
    AngularConverter(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{4d380153-9b16-41ac-8f9f-a23d9c2ddfe4}");
    }

    AngularConverter(IAngularConverter *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    AngularConverter(IAngularConverter2 *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property NegativeAngles
    */
    inline bool NegativeAngles() const; //Returns the value of NegativeAngles

    /*
    Method GetAngle
    */
    inline double GetAngle(esriSystem::esriDirectionType dt, esriSystem::esriDirectionUnits du);

    /*
    Method GetString
    */
    inline QString GetString(esriSystem::esriDirectionType dt, esriSystem::esriDirectionUnits du, int precision);

    /*
    Method SetAngle
    */
    inline bool SetAngle(double angle, esriSystem::esriDirectionType dt, esriSystem::esriDirectionUnits du);

    /*
    Method SetNegativeAngles
    */
    inline void SetNegativeAngles(bool NegativeAngles);

    /*
    Method SetString
    */
    inline bool SetString(const QString& angle, esriSystem::esriDirectionType dt, esriSystem::esriDirectionUnits du);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT ScaleFormat : public QAxObject
{
public:
    ScaleFormat(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{7b759b6d-df88-4aed-add7-6f53105b47a4}");
    }

    ScaleFormat(IScaleFormat *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    ScaleFormat(IPersistStream *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    ScaleFormat(IPersist *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    ScaleFormat(IClone *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    ScaleFormat(IDocumentVersionSupportGEN *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property AbbreviateUnits
    */
    inline bool AbbreviateUnits() const; //Returns the value of AbbreviateUnits

    /*
    Property CapitolizeUnits
    */
    inline bool CapitolizeUnits() const; //Returns the value of CapitolizeUnits

    /*
    Property CustomFormat
    */
    inline QString CustomFormat() const; //Returns the value of CustomFormat

    /*
    Property Equals
    */
    inline QString Equals() const; //Returns the value of Equals

    /*
    Property Format
    */
    inline esriSystem::esriScaleFormat Format() const; //Returns the value of Format

    /*
    Property MapUnits
    */
    inline esriSystem::esriUnits MapUnits() const; //Returns the value of MapUnits

    /*
    Property NumberFormat
    */
    inline esriSystem::INumberFormat* NumberFormat() const; //Returns the value of NumberFormat

    /*
    Property PageUnitValue
    */
    inline double PageUnitValue() const; //Returns the value of PageUnitValue

    /*
    Property PageUnits
    */
    inline esriSystem::esriUnits PageUnits() const; //Returns the value of PageUnits

    /*
    Property ReverseOrder
    */
    inline bool ReverseOrder() const; //Returns the value of ReverseOrder

    /*
    Property Separator
    */
    inline QString Separator() const; //Returns the value of Separator

    /*
    Method Assign
    */
    inline void Assign(esriSystem::IClone* src);

    /*
    Method CalcMapUnitValue
    */
    inline double CalcMapUnitValue(double absoluteScale);

    /*
    Method Clone
    */
    inline esriSystem::IClone* Clone();

    /*
    Method ConvertToSupportedObject
    */
    inline QVariant ConvertToSupportedObject(esriSystem::esriArcGISVersion docVersion);

    /*
    Method GetClassID
    */
    inline void GetClassID(GUID*& pClassID);

    /*
    Method GetSizeMax
    */
    inline void GetSizeMax(_ULARGE_INTEGER*& pcbSize);

    /*
    Method IsDirty
    */
    inline void IsDirty();

    /*
    Method IsEqual
    */
    inline bool IsEqual(esriSystem::IClone* other);

    /*
    Method IsIdentical
    */
    inline bool IsIdentical(esriSystem::IClone* other);

    /*
    Method IsSupportedAtVersion
    */
    inline bool IsSupportedAtVersion(esriSystem::esriArcGISVersion docVersion);

    /*
    Method Load
    */
    inline void Load(esriSystem::IStream* pstm);

    /*
    Method LoadFromRegistry
    */
    inline void LoadFromRegistry();

    /*
    Method Save
    */
    inline void Save(esriSystem::IStream* pstm, int fClearDirty);

    /*
    Method SaveToRegistry
    */
    inline void SaveToRegistry();

    /*
    Method ScaleToString
    */
    inline QString ScaleToString(double Scale);

    /*
    Method SetAbbreviateUnits
    */
    inline void SetAbbreviateUnits(bool AbbreviateUnits);

    /*
    Method SetCapitolizeUnits
    */
    inline void SetCapitolizeUnits(bool CapitolizeUnits);

    /*
    Method SetCustomFormat
    */
    inline void SetCustomFormat(const QString& CustomFormat);

    /*
    Method SetEquals
    */
    inline void SetEquals(const QString& Equals);

    /*
    Method SetFormat
    */
    inline void SetFormat(esriSystem::esriScaleFormat Format);

    /*
    Method SetMapUnits
    */
    inline void SetMapUnits(esriSystem::esriUnits MapUnits);

    /*
    Method SetNumberFormat
    */
    inline void SetNumberFormat(esriSystem::INumberFormat* NumberFormat);

    /*
    Method SetPageUnitValue
    */
    inline void SetPageUnitValue(double PageUnitValue);

    /*
    Method SetPageUnits
    */
    inline void SetPageUnits(esriSystem::esriUnits PageUnits);

    /*
    Method SetReverseOrder
    */
    inline void SetReverseOrder(bool ReverseOrder);

    /*
    Method SetSeparator
    */
    inline void SetSeparator(const QString& Separator);

    /*
    Method StringToScale
    */
    inline double StringToScale(const QString& scaleStr);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT AoInitialize : public QAxObject
{
public:
    AoInitialize(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{e01be902-cc85-4b13-a828-02e789e0dda9}");
    }

    AoInitialize(IAoInitialize *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    AoInitialize(ISupportErrorInfo *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    AoInitialize(ILicenseInformation *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Method CheckInExtension
    */
    inline esriLicenseStatus CheckInExtension(esriSystem::esriLicenseExtensionCode extensionCode);

    /*
    Method CheckOutExtension
    */
    inline esriLicenseStatus CheckOutExtension(esriSystem::esriLicenseExtensionCode extensionCode);

    /*
    Method GetLicenseExtensionName
    */
    inline QString GetLicenseExtensionName(esriSystem::esriLicenseExtensionCode extensionCode);

    /*
    Method GetLicenseProductName
    */
    inline QString GetLicenseProductName(esriSystem::esriLicenseProductCode ProductCode);

    /*
    Method GetProductExtensions
    */
    inline esriSystem::ILicenseInfoEnum* GetProductExtensions(esriSystem::esriLicenseProductCode ProductCode);

    /*
    Method Initialize
    */
    inline esriLicenseStatus Initialize(esriSystem::esriLicenseProductCode ProductCode);

    /*
    Method InitializedProduct
    */
    inline esriLicenseProductCode InitializedProduct();

    /*
    Method InterfaceSupportsErrorInfo
    */
    inline void InterfaceSupportsErrorInfo(GUID* riid);

    /*
    Method IsExtensionCheckedOut
    */
    inline bool IsExtensionCheckedOut(esriSystem::esriLicenseExtensionCode extensionCode);

    /*
    Method IsExtensionCodeAvailable
    */
    inline esriLicenseStatus IsExtensionCodeAvailable(esriSystem::esriLicenseProductCode ProductCode, esriSystem::esriLicenseExtensionCode extensionCode);

    /*
    Method IsProductCodeAvailable
    */
    inline esriLicenseStatus IsProductCodeAvailable(esriSystem::esriLicenseProductCode ProductCode);

    /*
    Method Shutdown
    */
    inline void Shutdown();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT ProductInstalled : public QAxObject
{
public:
    ProductInstalled(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{872135d9-837d-48d6-8d25-81e874d8ae82}");
    }

    ProductInstalled(IProductInstalled *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Method IsProductInstalled
    */
    inline bool IsProductInstalled(esriSystem::esriProductInstalled ProductInstalled);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT LicenseInfoEnum : public QAxObject
{
public:
    LicenseInfoEnum(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{e495e958-5244-4f9b-bf02-42c276964953}");
    }

    LicenseInfoEnum(ILicenseInfoEnum *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Method Next
    */
    inline esriLicenseExtensionCode Next();

    /*
    Method Reset
    */
    inline void Reset();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT AoAuthorizeLicense : public QAxObject
{
public:
    AoAuthorizeLicense(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{6dbe8bf8-6000-4734-b1a8-c81c69651c06}");
    }

    AoAuthorizeLicense(IAuthorizeLicense *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property FeaturesAdded
    */
    inline QString FeaturesAdded() const; //Returns the value of FeaturesAdded

    /*
    Method AuthorizeASR
    */
    inline void AuthorizeASR(const QString& strAsr, const QString& Password);

    /*
    Method AuthorizeASRFromFile
    */
    inline void AuthorizeASRFromFile(const QString& FileName, const QString& Password);

    /*
    Method CheckASR
    */
    inline void CheckASR(const QString& strAsr, const QString& Password);

    /*
    Method CheckASRFromFile
    */
    inline void CheckASRFromFile(const QString& FileName, const QString& Password);

    /*
    Method DeauthorizeASR
    */
    inline void DeauthorizeASR(const QString& strAsr, const QString& Password);

    /*
    Method DeauthorizeASRFromFile
    */
    inline void DeauthorizeASRFromFile(const QString& FileName, const QString& Password);

    /*
    Method LastError
    */
    inline int LastError(QString& LastError);

    /*
    Method RepairASR
    */
    inline void RepairASR(const QString& strAsr, const QString& Password);

    /*
    Method RepairASRFromFile
    */
    inline void RepairASRFromFile(const QString& FileName, const QString& Password);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT ObjectCopy : public QAxObject
{
public:
    ObjectCopy(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{9c3673eb-bc0a-11d5-a9df-00104bb6fc1c}");
    }

    ObjectCopy(IObjectCopy *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Method Copy
    */
    inline IUnknown* Copy(IUnknown* pInObject);

    /*
    Method Overwrite
    */
    inline void Overwrite(IUnknown* pInObject, IUnknown** pOverwriteObject);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT XMLPersistedObject : public QAxObject
{
public:
    XMLPersistedObject(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{c0d4ad6b-adb3-4b98-8927-1f0ec039bb5e}");
    }

    XMLPersistedObject(IXMLPersistedObject *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    XMLPersistedObject(IXMLSerialize *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Object
    */
    inline IUnknown* Object() const; //Returns the value of Object
    inline void SetObject(IUnknown* value); //Sets the value of the Object property

    /*
    Method Deserialize
    */
    inline void Deserialize(esriSystem::IXMLSerializeData* data);

    /*
    Method Serialize
    */
    inline void Serialize(esriSystem::IXMLSerializeData* data);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT SystemHelper : public QAxObject
{
public:
    SystemHelper(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{be49d696-3c46-4b81-960b-f67d1bbd238d}");
    }

    SystemHelper(ISystemBridge *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Method Classify
    */
    inline void Classify(esriSystem::IClassifyGEN* pClassify, QVariantList* doubleArrayValues, QVariantList* longArrayFrequencies, int& numClasses);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT ShortcutName : public QAxObject
{
public:
    ShortcutName(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{3beb09e4-3941-4a07-9d1a-ec2b43ba7d50}");
    }

    ShortcutName(IName *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    ShortcutName(IFileName *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    ShortcutName(IShortcutName *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    ShortcutName(IPersistStream *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property NameString
    */
    inline QString NameString() const; //Returns the value of NameString

    /*
    Property Path
    */
    inline QString Path() const; //Returns the value of Path

    /*
    Property TargetName
    */
    inline esriSystem::IName* TargetName() const; //Returns the value of TargetName
    inline void SetTargetName(esriSystem::IName* value); //Sets the value of the TargetName property

    /*
    Method GetSizeMax
    */
    inline void GetSizeMax(_ULARGE_INTEGER*& pcbSize);

    /*
    Method IsDirty
    */
    inline void IsDirty();

    /*
    Method Load
    */
    inline void Load(esriSystem::IStream* pstm);

    /*
    Method Open
    */
    inline IUnknown* Open();

    /*
    Method Save
    */
    inline void Save(esriSystem::IStream* pstm, int fClearDirty);

    /*
    Method SetNameString
    */
    inline void SetNameString(const QString& NameString);

    /*
    Method SetPath
    */
    inline void SetPath(const QString& Path);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT ArcGISLocale : public QAxObject
{
public:
    ArcGISLocale(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{495ec746-46d4-4a6e-bd06-3a08c38465ca}");
    }

    ArcGISLocale(IArcGISLocale *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property CountryID
    */
    inline int CountryID() const; //Returns the value of CountryID

    /*
    Property LangID
    */
    inline int LangID() const; //Returns the value of LangID

    /*
    Property Locale
    */
    inline int Locale() const; //Returns the value of Locale

    /*
    Property RightToLeft
    */
    inline bool RightToLeft() const; //Returns the value of RightToLeft

    /*
    Property RightToLeftTable
    */
    inline bool RightToLeftTable() const; //Returns the value of RightToLeftTable

    /*
    Property RightToLeftUI
    */
    inline bool RightToLeftUI() const; //Returns the value of RightToLeftUI

    /*
    Property UICountryID
    */
    inline int UICountryID() const; //Returns the value of UICountryID

    /*
    Property UILangID
    */
    inline int UILangID() const; //Returns the value of UILangID

    /*
    Property UILocale
    */
    inline int UILocale() const; //Returns the value of UILocale

    /*
    Method SetLocale
    */
    inline void SetLocale();

    /*
    Method SetThreadLocale
    */
    inline void SetThreadLocale();

    /*
    Method SetThreadUILocale
    */
    inline void SetThreadUILocale();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT EqualInterval : public QAxObject
{
public:
    EqualInterval(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{62144be1-e05e-11d1-aaae-00c04fa334b3}");
    }

    EqualInterval(IClassifyGEN *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    EqualInterval(IClassify *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    EqualInterval(IClassifyMinMax *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    EqualInterval(IClassifyMinMax2 *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property ClassBreaks
    */
    inline QVariant ClassBreaks() const; //Returns the value of ClassBreaks

    /*
    Property ClassID
    */
    inline esriSystem::IUID* ClassID() const; //Returns the value of ClassID

    /*
    Property Maximum
    */
    inline double Maximum() const; //Returns the value of Maximum
    inline void SetMaximum(double value); //Sets the value of the Maximum property

    /*
    Property MethodName
    */
    inline QString MethodName() const; //Returns the value of MethodName

    /*
    Property Minimum
    */
    inline double Minimum() const; //Returns the value of Minimum
    inline void SetMinimum(double value); //Sets the value of the Minimum property

    /*
    Method Classify
    */
    inline void Classify(const QVariant& doubleArrayValues, const QVariant& longArrayFrequencies, int& numClasses);

    /*
    Method Classify
    */
    inline void Classify(int& numClasses);

    /*
    Method ClassifyMinMax
    */
    inline void ClassifyMinMax(double min, double max, int& numClasses);

    /*
    Method SetHistogramData
    */
    inline void SetHistogramData(const QVariant& doubleArrayValues, const QVariant& longArrayFrequencies);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT Quantile : public QAxObject
{
public:
    Quantile(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{62144be9-e05e-11d1-aaae-00c04fa334b3}");
    }

    Quantile(IClassifyGEN *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    Quantile(IClassify *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property ClassBreaks
    */
    inline QVariant ClassBreaks() const; //Returns the value of ClassBreaks

    /*
    Property ClassID
    */
    inline esriSystem::IUID* ClassID() const; //Returns the value of ClassID

    /*
    Property MethodName
    */
    inline QString MethodName() const; //Returns the value of MethodName

    /*
    Method Classify
    */
    inline void Classify(const QVariant& doubleArrayValues, const QVariant& longArrayFrequencies, int& numClasses);

    /*
    Method Classify
    */
    inline void Classify(int& numClasses);

    /*
    Method SetHistogramData
    */
    inline void SetHistogramData(const QVariant& doubleArrayValues, const QVariant& longArrayFrequencies);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT DefinedInterval : public QAxObject
{
public:
    DefinedInterval(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{62144be8-e05e-11d1-aaae-00c04fa334b3}");
    }

    DefinedInterval(IClassifyGEN *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    DefinedInterval(IClassify *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    DefinedInterval(IClassifyMinMax *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    DefinedInterval(IClassifyMinMax2 *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    DefinedInterval(IIntervalRange *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    DefinedInterval(IIntervalRange2 *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property ClassBreaks
    */
    inline QVariant ClassBreaks() const; //Returns the value of ClassBreaks

    /*
    Property ClassID
    */
    inline esriSystem::IUID* ClassID() const; //Returns the value of ClassID

    /*
    Property Default
    */
    inline double Default() const; //Returns the value of Default

    /*
    Property IntervalRange
    */
    inline double IntervalRange() const; //Returns the value of IntervalRange
    inline void SetIntervalRange(double value); //Sets the value of the IntervalRange property

    /*
    Property Maximum
    */
    inline double Maximum() const; //Returns the value of Maximum
    inline void SetMaximum(double value); //Sets the value of the Maximum property

    /*
    Property MethodName
    */
    inline QString MethodName() const; //Returns the value of MethodName

    /*
    Property Minimum
    */
    inline double Minimum() const; //Returns the value of Minimum
    inline void SetMinimum(double value); //Sets the value of the Minimum property

    /*
    Method Classify
    */
    inline void Classify(const QVariant& doubleArrayValues, const QVariant& longArrayFrequencies, int& numClasses);

    /*
    Method Classify
    */
    inline void Classify(int& numClasses);

    /*
    Method ClassifyMinMax
    */
    inline void ClassifyMinMax(double min, double max, int& numClasses);

    /*
    Method SetHistogramData
    */
    inline void SetHistogramData(const QVariant& doubleArrayValues, const QVariant& longArrayFrequencies);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT NaturalBreaks : public QAxObject
{
public:
    NaturalBreaks(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{62144bea-e05e-11d1-aaae-00c04fa334b3}");
    }

    NaturalBreaks(IClassifyGEN *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    NaturalBreaks(IClassify *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property ClassBreaks
    */
    inline QVariant ClassBreaks() const; //Returns the value of ClassBreaks

    /*
    Property ClassID
    */
    inline esriSystem::IUID* ClassID() const; //Returns the value of ClassID

    /*
    Property MethodName
    */
    inline QString MethodName() const; //Returns the value of MethodName

    /*
    Method Classify
    */
    inline void Classify(const QVariant& doubleArrayValues, const QVariant& longArrayFrequencies, int& numClasses);

    /*
    Method Classify
    */
    inline void Classify(int& numClasses);

    /*
    Method SetHistogramData
    */
    inline void SetHistogramData(const QVariant& doubleArrayValues, const QVariant& longArrayFrequencies);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT StandardDeviation : public QAxObject
{
public:
    StandardDeviation(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{dc6d8015-49c2-11d2-aaff-00c04fa334b3}");
    }

    StandardDeviation(IClassifyGEN *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    StandardDeviation(IClassify *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    StandardDeviation(IDeviationInterval *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property ClassBreaks
    */
    inline QVariant ClassBreaks() const; //Returns the value of ClassBreaks

    /*
    Property ClassID
    */
    inline esriSystem::IUID* ClassID() const; //Returns the value of ClassID

    /*
    Property DeviationInterval
    */
    inline double DeviationInterval() const; //Returns the value of DeviationInterval

    /*
    Property Mean
    */
    inline double Mean() const; //Returns the value of Mean
    inline void SetMean(double value); //Sets the value of the Mean property

    /*
    Property MethodName
    */
    inline QString MethodName() const; //Returns the value of MethodName

    /*
    Property StandardDev
    */
    inline double StandardDev() const; //Returns the value of StandardDev
    inline void SetStandardDev(double value); //Sets the value of the StandardDev property

    /*
    Method Classify
    */
    inline void Classify(const QVariant& doubleArrayValues, const QVariant& longArrayFrequencies, int& numClasses);

    /*
    Method Classify
    */
    inline void Classify(int& numClasses);

    /*
    Method SetDeviationInterval
    */
    inline void SetDeviationInterval(double DeviationInterval);

    /*
    Method SetHistogramData
    */
    inline void SetHistogramData(const QVariant& doubleArrayValues, const QVariant& longArrayFrequencies);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT GeometricalInterval : public QAxObject
{
public:
    GeometricalInterval(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{c79eb120-e98e-4af9-903d-70273e0c140e}");
    }

    GeometricalInterval(IClassifyGEN *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    GeometricalInterval(IClassify *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property ClassBreaks
    */
    inline QVariant ClassBreaks() const; //Returns the value of ClassBreaks

    /*
    Property ClassID
    */
    inline esriSystem::IUID* ClassID() const; //Returns the value of ClassID

    /*
    Property MethodName
    */
    inline QString MethodName() const; //Returns the value of MethodName

    /*
    Method Classify
    */
    inline void Classify(const QVariant& doubleArrayValues, const QVariant& longArrayFrequencies, int& numClasses);

    /*
    Method Classify
    */
    inline void Classify(int& numClasses);

    /*
    Method SetHistogramData
    */
    inline void SetHistogramData(const QVariant& doubleArrayValues, const QVariant& longArrayFrequencies);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT NumericFormat : public QAxObject
{
public:
    NumericFormat(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{7e4f4719-8e54-11d2-aad8-000000000000}");
    }

    NumericFormat(INumberFormat *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    NumericFormat(INumericFormat *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    NumericFormat(INumberFormatOperations *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    NumericFormat(IClone *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    NumericFormat(IPersist *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    NumericFormat(IPersistStream *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    NumericFormat(IXMLSerialize *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property AlignmentOption
    */
    inline esriSystem::esriNumericAlignmentEnum AlignmentOption() const; //Returns the value of AlignmentOption

    /*
    Property AlignmentWidth
    */
    inline int AlignmentWidth() const; //Returns the value of AlignmentWidth

    /*
    Property RoundingOption
    */
    inline esriSystem::esriRoundingOptionEnum RoundingOption() const; //Returns the value of RoundingOption

    /*
    Property RoundingValue
    */
    inline int RoundingValue() const; //Returns the value of RoundingValue

    /*
    Property ShowPlusSign
    */
    inline bool ShowPlusSign() const; //Returns the value of ShowPlusSign

    /*
    Property UseSeparator
    */
    inline bool UseSeparator() const; //Returns the value of UseSeparator

    /*
    Property ZeroPad
    */
    inline bool ZeroPad() const; //Returns the value of ZeroPad

    /*
    Method Assign
    */
    inline void Assign(esriSystem::IClone* src);

    /*
    Method Clone
    */
    inline esriSystem::IClone* Clone();

    /*
    Method Deserialize
    */
    inline void Deserialize(esriSystem::IXMLSerializeData* data);

    /*
    Method GetClassID
    */
    inline void GetClassID(GUID*& pClassID);

    /*
    Method GetSizeMax
    */
    inline void GetSizeMax(_ULARGE_INTEGER*& pcbSize);

    /*
    Method Increment
    */
    inline double Increment(double Value);

    /*
    Method IsDirty
    */
    inline void IsDirty();

    /*
    Method IsEqual
    */
    inline bool IsEqual(esriSystem::IClone* other);

    /*
    Method IsIdentical
    */
    inline bool IsIdentical(esriSystem::IClone* other);

    /*
    Method Load
    */
    inline void Load(esriSystem::IStream* pstm);

    /*
    Method Save
    */
    inline void Save(esriSystem::IStream* pstm, int fClearDirty);

    /*
    Method Serialize
    */
    inline void Serialize(esriSystem::IXMLSerializeData* data);

    /*
    Method SetAlignmentOption
    */
    inline void SetAlignmentOption(esriSystem::esriNumericAlignmentEnum AlignmentOption);

    /*
    Method SetAlignmentWidth
    */
    inline void SetAlignmentWidth(int AlignmentWidth);

    /*
    Method SetRoundingOption
    */
    inline void SetRoundingOption(esriSystem::esriRoundingOptionEnum RoundingOption);

    /*
    Method SetRoundingValue
    */
    inline void SetRoundingValue(int RoundingValue);

    /*
    Method SetShowPlusSign
    */
    inline void SetShowPlusSign(bool ShowPlusSign);

    /*
    Method SetUseSeparator
    */
    inline void SetUseSeparator(bool UseSeparator);

    /*
    Method SetZeroPad
    */
    inline void SetZeroPad(bool ZeroPad);

    /*
    Method StringToValue
    */
    inline double StringToValue(const QString& str);

    /*
    Method ValueToString
    */
    inline QString ValueToString(double Value);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT CurrencyFormat : public QAxObject
{
public:
    CurrencyFormat(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{7e4f471a-8e54-11d2-aad8-000000000000}");
    }

    CurrencyFormat(INumberFormat *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    CurrencyFormat(INumberFormatOperations *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    CurrencyFormat(IClone *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    CurrencyFormat(IPersist *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    CurrencyFormat(IPersistStream *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Method Assign
    */
    inline void Assign(esriSystem::IClone* src);

    /*
    Method Clone
    */
    inline esriSystem::IClone* Clone();

    /*
    Method GetClassID
    */
    inline void GetClassID(GUID*& pClassID);

    /*
    Method GetSizeMax
    */
    inline void GetSizeMax(_ULARGE_INTEGER*& pcbSize);

    /*
    Method Increment
    */
    inline double Increment(double Value);

    /*
    Method IsDirty
    */
    inline void IsDirty();

    /*
    Method IsEqual
    */
    inline bool IsEqual(esriSystem::IClone* other);

    /*
    Method IsIdentical
    */
    inline bool IsIdentical(esriSystem::IClone* other);

    /*
    Method Load
    */
    inline void Load(esriSystem::IStream* pstm);

    /*
    Method Save
    */
    inline void Save(esriSystem::IStream* pstm, int fClearDirty);

    /*
    Method StringToValue
    */
    inline double StringToValue(const QString& str);

    /*
    Method ValueToString
    */
    inline QString ValueToString(double Value);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT PercentageFormat : public QAxObject
{
public:
    PercentageFormat(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{7e4f471b-8e54-11d2-aad8-000000000000}");
    }

    PercentageFormat(INumberFormat *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    PercentageFormat(INumericFormat *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    PercentageFormat(IPercentageFormat *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    PercentageFormat(INumberFormatOperations *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    PercentageFormat(IClone *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    PercentageFormat(IPersist *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    PercentageFormat(IPersistStream *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property AdjustPercentage
    */
    inline bool AdjustPercentage() const; //Returns the value of AdjustPercentage

    /*
    Property AlignmentOption
    */
    inline esriSystem::esriNumericAlignmentEnum AlignmentOption() const; //Returns the value of AlignmentOption

    /*
    Property AlignmentWidth
    */
    inline int AlignmentWidth() const; //Returns the value of AlignmentWidth

    /*
    Property RoundingOption
    */
    inline esriSystem::esriRoundingOptionEnum RoundingOption() const; //Returns the value of RoundingOption

    /*
    Property RoundingValue
    */
    inline int RoundingValue() const; //Returns the value of RoundingValue

    /*
    Property ShowPlusSign
    */
    inline bool ShowPlusSign() const; //Returns the value of ShowPlusSign

    /*
    Property UseSeparator
    */
    inline bool UseSeparator() const; //Returns the value of UseSeparator

    /*
    Property ZeroPad
    */
    inline bool ZeroPad() const; //Returns the value of ZeroPad

    /*
    Method Assign
    */
    inline void Assign(esriSystem::IClone* src);

    /*
    Method Clone
    */
    inline esriSystem::IClone* Clone();

    /*
    Method GetClassID
    */
    inline void GetClassID(GUID*& pClassID);

    /*
    Method GetSizeMax
    */
    inline void GetSizeMax(_ULARGE_INTEGER*& pcbSize);

    /*
    Method Increment
    */
    inline double Increment(double Value);

    /*
    Method IsDirty
    */
    inline void IsDirty();

    /*
    Method IsEqual
    */
    inline bool IsEqual(esriSystem::IClone* other);

    /*
    Method IsIdentical
    */
    inline bool IsIdentical(esriSystem::IClone* other);

    /*
    Method Load
    */
    inline void Load(esriSystem::IStream* pstm);

    /*
    Method Save
    */
    inline void Save(esriSystem::IStream* pstm, int fClearDirty);

    /*
    Method SetAdjustPercentage
    */
    inline void SetAdjustPercentage(bool AdjustPercentage);

    /*
    Method SetAlignmentOption
    */
    inline void SetAlignmentOption(esriSystem::esriNumericAlignmentEnum AlignmentOption);

    /*
    Method SetAlignmentWidth
    */
    inline void SetAlignmentWidth(int AlignmentWidth);

    /*
    Method SetRoundingOption
    */
    inline void SetRoundingOption(esriSystem::esriRoundingOptionEnum RoundingOption);

    /*
    Method SetRoundingValue
    */
    inline void SetRoundingValue(int RoundingValue);

    /*
    Method SetShowPlusSign
    */
    inline void SetShowPlusSign(bool ShowPlusSign);

    /*
    Method SetUseSeparator
    */
    inline void SetUseSeparator(bool UseSeparator);

    /*
    Method SetZeroPad
    */
    inline void SetZeroPad(bool ZeroPad);

    /*
    Method StringToValue
    */
    inline double StringToValue(const QString& str);

    /*
    Method ValueToString
    */
    inline QString ValueToString(double Value);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT FractionFormat : public QAxObject
{
public:
    FractionFormat(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{7e4f471c-8e54-11d2-aad8-000000000000}");
    }

    FractionFormat(INumberFormat *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    FractionFormat(INumberFormatOperations *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    FractionFormat(IFractionFormat *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    FractionFormat(IClone *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    FractionFormat(IPersist *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    FractionFormat(IPersistStream *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property FractionFactor
    */
    inline int FractionFactor() const; //Returns the value of FractionFactor

    /*
    Property FractionOption
    */
    inline esriSystem::esriFractionOptionEnum FractionOption() const; //Returns the value of FractionOption

    /*
    Method Assign
    */
    inline void Assign(esriSystem::IClone* src);

    /*
    Method Clone
    */
    inline esriSystem::IClone* Clone();

    /*
    Method GetClassID
    */
    inline void GetClassID(GUID*& pClassID);

    /*
    Method GetSizeMax
    */
    inline void GetSizeMax(_ULARGE_INTEGER*& pcbSize);

    /*
    Method Increment
    */
    inline double Increment(double Value);

    /*
    Method IsDirty
    */
    inline void IsDirty();

    /*
    Method IsEqual
    */
    inline bool IsEqual(esriSystem::IClone* other);

    /*
    Method IsIdentical
    */
    inline bool IsIdentical(esriSystem::IClone* other);

    /*
    Method Load
    */
    inline void Load(esriSystem::IStream* pstm);

    /*
    Method Save
    */
    inline void Save(esriSystem::IStream* pstm, int fClearDirty);

    /*
    Method SetFractionFactor
    */
    inline void SetFractionFactor(int FractionFactor);

    /*
    Method SetFractionOption
    */
    inline void SetFractionOption(esriSystem::esriFractionOptionEnum FractionOption);

    /*
    Method StringToValue
    */
    inline double StringToValue(const QString& str);

    /*
    Method ValueToString
    */
    inline QString ValueToString(double Value);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT LatLonFormat : public QAxObject
{
public:
    LatLonFormat(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{7e4f471d-8e54-11d2-aad8-000000000000}");
    }

    LatLonFormat(INumberFormat *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    LatLonFormat(INumericFormat *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    LatLonFormat(INumberFormatOperations *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    LatLonFormat(ILatLonFormat *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    LatLonFormat(ILatLonFormat2 *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    LatLonFormat(IClone *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    LatLonFormat(IPersist *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    LatLonFormat(IPersistStream *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property AlignmentOption
    */
    inline esriSystem::esriNumericAlignmentEnum AlignmentOption() const; //Returns the value of AlignmentOption

    /*
    Property AlignmentWidth
    */
    inline int AlignmentWidth() const; //Returns the value of AlignmentWidth

    /*
    Property IsLatitude
    */
    inline bool IsLatitude() const; //Returns the value of IsLatitude

    /*
    Property RoundingOption
    */
    inline esriSystem::esriRoundingOptionEnum RoundingOption() const; //Returns the value of RoundingOption

    /*
    Property RoundingValue
    */
    inline int RoundingValue() const; //Returns the value of RoundingValue

    /*
    Property ShowDirections
    */
    inline bool ShowDirections() const; //Returns the value of ShowDirections

    /*
    Property ShowPlusSign
    */
    inline bool ShowPlusSign() const; //Returns the value of ShowPlusSign

    /*
    Property ShowZeroMinutes
    */
    inline bool ShowZeroMinutes() const; //Returns the value of ShowZeroMinutes

    /*
    Property ShowZeroSeconds
    */
    inline bool ShowZeroSeconds() const; //Returns the value of ShowZeroSeconds

    /*
    Property UseSeparator
    */
    inline bool UseSeparator() const; //Returns the value of UseSeparator

    /*
    Property ZeroPad
    */
    inline bool ZeroPad() const; //Returns the value of ZeroPad

    /*
    Method Assign
    */
    inline void Assign(esriSystem::IClone* src);

    /*
    Method Clone
    */
    inline esriSystem::IClone* Clone();

    /*
    Method GetClassID
    */
    inline void GetClassID(GUID*& pClassID);

    /*
    Method GetDMS
    */
    inline void GetDMS(double Value, int& degrees, int& Minutes, double& Seconds);

    /*
    Method GetSizeMax
    */
    inline void GetSizeMax(_ULARGE_INTEGER*& pcbSize);

    /*
    Method Increment
    */
    inline double Increment(double Value);

    /*
    Method IsDirty
    */
    inline void IsDirty();

    /*
    Method IsEqual
    */
    inline bool IsEqual(esriSystem::IClone* other);

    /*
    Method IsIdentical
    */
    inline bool IsIdentical(esriSystem::IClone* other);

    /*
    Method Load
    */
    inline void Load(esriSystem::IStream* pstm);

    /*
    Method Save
    */
    inline void Save(esriSystem::IStream* pstm, int fClearDirty);

    /*
    Method SetAlignmentOption
    */
    inline void SetAlignmentOption(esriSystem::esriNumericAlignmentEnum AlignmentOption);

    /*
    Method SetAlignmentWidth
    */
    inline void SetAlignmentWidth(int AlignmentWidth);

    /*
    Method SetIsLatitude
    */
    inline void SetIsLatitude(bool IsLatitude);

    /*
    Method SetRoundingOption
    */
    inline void SetRoundingOption(esriSystem::esriRoundingOptionEnum RoundingOption);

    /*
    Method SetRoundingValue
    */
    inline void SetRoundingValue(int RoundingValue);

    /*
    Method SetShowDirections
    */
    inline void SetShowDirections(bool ShowDirections);

    /*
    Method SetShowPlusSign
    */
    inline void SetShowPlusSign(bool ShowPlusSign);

    /*
    Method SetShowZeroMinutes
    */
    inline void SetShowZeroMinutes(bool ShowZeroMinutes);

    /*
    Method SetShowZeroSeconds
    */
    inline void SetShowZeroSeconds(bool ShowZeroSeconds);

    /*
    Method SetUseSeparator
    */
    inline void SetUseSeparator(bool UseSeparator);

    /*
    Method SetZeroPad
    */
    inline void SetZeroPad(bool ZeroPad);

    /*
    Method StringToValue
    */
    inline double StringToValue(const QString& str);

    /*
    Method ValueToString
    */
    inline QString ValueToString(double Value);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT AngleFormat : public QAxObject
{
public:
    AngleFormat(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{7e4f471e-8e54-11d2-aad8-000000000000}");
    }

    AngleFormat(INumberFormat *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    AngleFormat(INumericFormat *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    AngleFormat(INumberFormatOperations *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    AngleFormat(IAngleFormat *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    AngleFormat(IClone *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    AngleFormat(IPersist *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    AngleFormat(IPersistStream *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    AngleFormat(IDocumentVersionSupportGEN *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property AlignmentOption
    */
    inline esriSystem::esriNumericAlignmentEnum AlignmentOption() const; //Returns the value of AlignmentOption

    /*
    Property AlignmentWidth
    */
    inline int AlignmentWidth() const; //Returns the value of AlignmentWidth

    /*
    Property AngleInDegrees
    */
    inline bool AngleInDegrees() const; //Returns the value of AngleInDegrees

    /*
    Property DisplayDegrees
    */
    inline bool DisplayDegrees() const; //Returns the value of DisplayDegrees

    /*
    Property RoundingOption
    */
    inline esriSystem::esriRoundingOptionEnum RoundingOption() const; //Returns the value of RoundingOption

    /*
    Property RoundingValue
    */
    inline int RoundingValue() const; //Returns the value of RoundingValue

    /*
    Property ShowPlusSign
    */
    inline bool ShowPlusSign() const; //Returns the value of ShowPlusSign

    /*
    Property UseSeparator
    */
    inline bool UseSeparator() const; //Returns the value of UseSeparator

    /*
    Property ZeroPad
    */
    inline bool ZeroPad() const; //Returns the value of ZeroPad

    /*
    Method Assign
    */
    inline void Assign(esriSystem::IClone* src);

    /*
    Method Clone
    */
    inline esriSystem::IClone* Clone();

    /*
    Method ConvertToSupportedObject
    */
    inline QVariant ConvertToSupportedObject(esriSystem::esriArcGISVersion docVersion);

    /*
    Method GetClassID
    */
    inline void GetClassID(GUID*& pClassID);

    /*
    Method GetSizeMax
    */
    inline void GetSizeMax(_ULARGE_INTEGER*& pcbSize);

    /*
    Method Increment
    */
    inline double Increment(double Value);

    /*
    Method IsDirty
    */
    inline void IsDirty();

    /*
    Method IsEqual
    */
    inline bool IsEqual(esriSystem::IClone* other);

    /*
    Method IsIdentical
    */
    inline bool IsIdentical(esriSystem::IClone* other);

    /*
    Method IsSupportedAtVersion
    */
    inline bool IsSupportedAtVersion(esriSystem::esriArcGISVersion docVersion);

    /*
    Method Load
    */
    inline void Load(esriSystem::IStream* pstm);

    /*
    Method Save
    */
    inline void Save(esriSystem::IStream* pstm, int fClearDirty);

    /*
    Method SetAlignmentOption
    */
    inline void SetAlignmentOption(esriSystem::esriNumericAlignmentEnum AlignmentOption);

    /*
    Method SetAlignmentWidth
    */
    inline void SetAlignmentWidth(int AlignmentWidth);

    /*
    Method SetAngleInDegrees
    */
    inline void SetAngleInDegrees(bool AngleInDegrees);

    /*
    Method SetDisplayDegrees
    */
    inline void SetDisplayDegrees(bool DisplayDegrees);

    /*
    Method SetRoundingOption
    */
    inline void SetRoundingOption(esriSystem::esriRoundingOptionEnum RoundingOption);

    /*
    Method SetRoundingValue
    */
    inline void SetRoundingValue(int RoundingValue);

    /*
    Method SetShowPlusSign
    */
    inline void SetShowPlusSign(bool ShowPlusSign);

    /*
    Method SetUseSeparator
    */
    inline void SetUseSeparator(bool UseSeparator);

    /*
    Method SetZeroPad
    */
    inline void SetZeroPad(bool ZeroPad);

    /*
    Method StringToValue
    */
    inline double StringToValue(const QString& str);

    /*
    Method ValueToString
    */
    inline QString ValueToString(double Value);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT DirectionFormat : public QAxObject
{
public:
    DirectionFormat(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{36d7e361-b440-4feb-b2ac-fede1a2fd7a7}");
    }

    DirectionFormat(INumberFormat *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    DirectionFormat(INumberFormatOperations *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    DirectionFormat(IDirectionFormat *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    DirectionFormat(IClone *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    DirectionFormat(IPersist *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    DirectionFormat(IPersistStream *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property DecimalPlaces
    */
    inline int DecimalPlaces() const; //Returns the value of DecimalPlaces

    /*
    Property DirectionType
    */
    inline esriSystem::esriDirectionType DirectionType() const; //Returns the value of DirectionType

    /*
    Property DirectionUnits
    */
    inline esriSystem::esriDirectionUnits DirectionUnits() const; //Returns the value of DirectionUnits

    /*
    Property DisplayFormat
    */
    inline esriSystem::esriDirectionFormatEnum DisplayFormat() const; //Returns the value of DisplayFormat

    /*
    Method Assign
    */
    inline void Assign(esriSystem::IClone* src);

    /*
    Method Clone
    */
    inline esriSystem::IClone* Clone();

    /*
    Method GetClassID
    */
    inline void GetClassID(GUID*& pClassID);

    /*
    Method GetSizeMax
    */
    inline void GetSizeMax(_ULARGE_INTEGER*& pcbSize);

    /*
    Method Increment
    */
    inline double Increment(double Value);

    /*
    Method IsDirty
    */
    inline void IsDirty();

    /*
    Method IsEqual
    */
    inline bool IsEqual(esriSystem::IClone* other);

    /*
    Method IsIdentical
    */
    inline bool IsIdentical(esriSystem::IClone* other);

    /*
    Method Load
    */
    inline void Load(esriSystem::IStream* pstm);

    /*
    Method Save
    */
    inline void Save(esriSystem::IStream* pstm, int fClearDirty);

    /*
    Method SetDecimalPlaces
    */
    inline void SetDecimalPlaces(int DecimalPlaces);

    /*
    Method SetDirectionType
    */
    inline void SetDirectionType(esriSystem::esriDirectionType DirectionType);

    /*
    Method SetDirectionUnits
    */
    inline void SetDirectionUnits(esriSystem::esriDirectionUnits DirectionUnits);

    /*
    Method SetDisplayFormat
    */
    inline void SetDisplayFormat(esriSystem::esriDirectionFormatEnum DisplayFormat);

    /*
    Method StringToValue
    */
    inline double StringToValue(const QString& str);

    /*
    Method ValueToString
    */
    inline QString ValueToString(double Value);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT ScientificFormat : public QAxObject
{
public:
    ScientificFormat(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{7e4f471f-8e54-11d2-aad8-000000000000}");
    }

    ScientificFormat(INumberFormat *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    ScientificFormat(INumberFormatOperations *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    ScientificFormat(IScientificNumberFormat *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    ScientificFormat(IClone *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    ScientificFormat(IPersist *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    ScientificFormat(IPersistStream *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property DecimalPlaces
    */
    inline int DecimalPlaces() const; //Returns the value of DecimalPlaces

    /*
    Method Assign
    */
    inline void Assign(esriSystem::IClone* src);

    /*
    Method Clone
    */
    inline esriSystem::IClone* Clone();

    /*
    Method GetClassID
    */
    inline void GetClassID(GUID*& pClassID);

    /*
    Method GetSizeMax
    */
    inline void GetSizeMax(_ULARGE_INTEGER*& pcbSize);

    /*
    Method Increment
    */
    inline double Increment(double Value);

    /*
    Method IsDirty
    */
    inline void IsDirty();

    /*
    Method IsEqual
    */
    inline bool IsEqual(esriSystem::IClone* other);

    /*
    Method IsIdentical
    */
    inline bool IsIdentical(esriSystem::IClone* other);

    /*
    Method Load
    */
    inline void Load(esriSystem::IStream* pstm);

    /*
    Method Save
    */
    inline void Save(esriSystem::IStream* pstm, int fClearDirty);

    /*
    Method SetDecimalPlaces
    */
    inline void SetDecimalPlaces(int DecimalPlaces);

    /*
    Method StringToValue
    */
    inline double StringToValue(const QString& str);

    /*
    Method ValueToString
    */
    inline QString ValueToString(double Value);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT RateFormat : public QAxObject
{
public:
    RateFormat(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{7e4f4721-8e54-11d2-aad8-000000000000}");
    }

    RateFormat(INumberFormat *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    RateFormat(INumericFormat *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    RateFormat(INumberFormatOperations *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    RateFormat(IRateFormat *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    RateFormat(IClone *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    RateFormat(IPersist *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    RateFormat(IPersistStream *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property AlignmentOption
    */
    inline esriSystem::esriNumericAlignmentEnum AlignmentOption() const; //Returns the value of AlignmentOption

    /*
    Property AlignmentWidth
    */
    inline int AlignmentWidth() const; //Returns the value of AlignmentWidth

    /*
    Property RateFactor
    */
    inline double RateFactor() const; //Returns the value of RateFactor

    /*
    Property RateString
    */
    inline QString RateString() const; //Returns the value of RateString

    /*
    Property RoundingOption
    */
    inline esriSystem::esriRoundingOptionEnum RoundingOption() const; //Returns the value of RoundingOption

    /*
    Property RoundingValue
    */
    inline int RoundingValue() const; //Returns the value of RoundingValue

    /*
    Property ShowPlusSign
    */
    inline bool ShowPlusSign() const; //Returns the value of ShowPlusSign

    /*
    Property UseSeparator
    */
    inline bool UseSeparator() const; //Returns the value of UseSeparator

    /*
    Property ZeroPad
    */
    inline bool ZeroPad() const; //Returns the value of ZeroPad

    /*
    Method Assign
    */
    inline void Assign(esriSystem::IClone* src);

    /*
    Method Clone
    */
    inline esriSystem::IClone* Clone();

    /*
    Method GetClassID
    */
    inline void GetClassID(GUID*& pClassID);

    /*
    Method GetSizeMax
    */
    inline void GetSizeMax(_ULARGE_INTEGER*& pcbSize);

    /*
    Method Increment
    */
    inline double Increment(double Value);

    /*
    Method IsDirty
    */
    inline void IsDirty();

    /*
    Method IsEqual
    */
    inline bool IsEqual(esriSystem::IClone* other);

    /*
    Method IsIdentical
    */
    inline bool IsIdentical(esriSystem::IClone* other);

    /*
    Method Load
    */
    inline void Load(esriSystem::IStream* pstm);

    /*
    Method Save
    */
    inline void Save(esriSystem::IStream* pstm, int fClearDirty);

    /*
    Method SetAlignmentOption
    */
    inline void SetAlignmentOption(esriSystem::esriNumericAlignmentEnum AlignmentOption);

    /*
    Method SetAlignmentWidth
    */
    inline void SetAlignmentWidth(int AlignmentWidth);

    /*
    Method SetRateFactor
    */
    inline void SetRateFactor(double RateFactor);

    /*
    Method SetRateString
    */
    inline void SetRateString(const QString& RateString);

    /*
    Method SetRoundingOption
    */
    inline void SetRoundingOption(esriSystem::esriRoundingOptionEnum RoundingOption);

    /*
    Method SetRoundingValue
    */
    inline void SetRoundingValue(int RoundingValue);

    /*
    Method SetShowPlusSign
    */
    inline void SetShowPlusSign(bool ShowPlusSign);

    /*
    Method SetUseSeparator
    */
    inline void SetUseSeparator(bool UseSeparator);

    /*
    Method SetZeroPad
    */
    inline void SetZeroPad(bool ZeroPad);

    /*
    Method StringToValue
    */
    inline double StringToValue(const QString& str);

    /*
    Method ValueToString
    */
    inline QString ValueToString(double Value);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT CustomNumberFormat : public QAxObject
{
public:
    CustomNumberFormat(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{7e4f4722-8e54-11d2-aad8-000000000000}");
    }

    CustomNumberFormat(INumberFormat *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    CustomNumberFormat(ICustomNumberFormat *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    CustomNumberFormat(INumberFormatOperations *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    CustomNumberFormat(IClone *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    CustomNumberFormat(IPersist *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    CustomNumberFormat(IPersistStream *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property FormatString
    */
    inline QString FormatString() const; //Returns the value of FormatString

    /*
    Method Assign
    */
    inline void Assign(esriSystem::IClone* src);

    /*
    Method Clone
    */
    inline esriSystem::IClone* Clone();

    /*
    Method GetClassID
    */
    inline void GetClassID(GUID*& pClassID);

    /*
    Method GetSizeMax
    */
    inline void GetSizeMax(_ULARGE_INTEGER*& pcbSize);

    /*
    Method Increment
    */
    inline double Increment(double Value);

    /*
    Method IsDirty
    */
    inline void IsDirty();

    /*
    Method IsEqual
    */
    inline bool IsEqual(esriSystem::IClone* other);

    /*
    Method IsIdentical
    */
    inline bool IsIdentical(esriSystem::IClone* other);

    /*
    Method Load
    */
    inline void Load(esriSystem::IStream* pstm);

    /*
    Method Save
    */
    inline void Save(esriSystem::IStream* pstm, int fClearDirty);

    /*
    Method SetFormatString
    */
    inline void SetFormatString(const QString& FormatString);

    /*
    Method StringToValue
    */
    inline double StringToValue(const QString& str);

    /*
    Method ValueToString
    */
    inline QString ValueToString(double Value);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT XMLStream : public QAxObject
{
public:
    XMLStream(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{db2cde6f-a264-4129-a4ce-99f9a47f1830}");
    }

    XMLStream(IXMLStream *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    XMLStream(IStream *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Method Clone
    */
    inline void Clone(esriSystem::IStream** ppstm);

    /*
    Method Commit
    */
    inline void Commit(uint grfCommitFlags);

    /*
    Method LoadFromBytes
    */
    inline void LoadFromBytes(QByteArray& bytes);

    /*
    Method LoadFromFile
    */
    inline void LoadFromFile(const QString& filePath);

    /*
    Method LoadFromString
    */
    inline void LoadFromString(const QString& XML);

    /*
    Method LockRegion
    */
    inline void LockRegion(esriSystem::_ULARGE_INTEGER libOffset, esriSystem::_ULARGE_INTEGER cb, uint dwLockType);

    /*
    Method RemoteCopyTo
    */
    inline void RemoteCopyTo(esriSystem::IStream* pstm, esriSystem::_ULARGE_INTEGER cb, _ULARGE_INTEGER*& pcbRead, _ULARGE_INTEGER*& pcbWritten);

    /*
    Method RemoteSeek
    */
    inline void RemoteSeek(esriSystem::_LARGE_INTEGER dlibMove, uint dwOrigin, _ULARGE_INTEGER*& plibNewPosition);

    /*
    Method Reset
    */
    inline void Reset();

    /*
    Method Revert
    */
    inline void Revert();

    /*
    Method SaveToBytes
    */
    inline QByteArray SaveToBytes();

    /*
    Method SaveToFile
    */
    inline void SaveToFile(const QString& filePath);

    /*
    Method SaveToString
    */
    inline QString SaveToString();

    /*
    Method SetSize
    */
    inline void SetSize(esriSystem::_ULARGE_INTEGER libNewSize);

    /*
    Method Stat
    */
    inline void Stat(tagSTATSTG*& pstatstg, uint grfStatFlag);

    /*
    Method UnlockRegion
    */
    inline void UnlockRegion(esriSystem::_ULARGE_INTEGER libOffset, esriSystem::_ULARGE_INTEGER cb, uint dwLockType);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT XMLReader : public QAxObject
{
public:
    XMLReader(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{b853965e-fd52-4ed2-80c2-f0e27a2c6e8a}");
    }

    XMLReader(IXMLReader *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    XMLReader(ISupportErrorInfo *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Attributes
    */
    inline esriSystem::IXMLAttributes* Attributes() const; //Returns the value of Attributes

    /*
    Property HasElementChildren
    */
    inline bool HasElementChildren() const; //Returns the value of HasElementChildren

    /*
    Property IsLastChild
    */
    inline bool IsLastChild() const; //Returns the value of IsLastChild

    /*
    Property LocalName
    */
    inline QString LocalName() const; //Returns the value of LocalName

    /*
    Property NamespaceDeclarations
    */
    inline esriSystem::IXMLNamespaces* NamespaceDeclarations() const; //Returns the value of NamespaceDeclarations

    /*
    Property NamespacePrefix
    */
    inline QString NamespacePrefix() const; //Returns the value of NamespacePrefix

    /*
    Property NamespaceURI
    */
    inline QString NamespaceURI() const; //Returns the value of NamespaceURI

    /*
    Property Text
    */
    inline QString Text() const; //Returns the value of Text

    /*
    Method CloseElement
    */
    inline void CloseElement();

    /*
    Method InterfaceSupportsErrorInfo
    */
    inline void InterfaceSupportsErrorInfo(GUID* riid);

    /*
    Method LookupPrefix
    */
    inline QString LookupPrefix(const QString& Prefix);

    /*
    Method NextElement
    */
    inline void NextElement();

    /*
    Method OpenElement
    */
    inline void OpenElement();

    /*
    Method ReadBinary
    */
    inline QByteArray ReadBinary();

    /*
    Method ReadBoolean
    */
    inline bool ReadBoolean();

    /*
    Method ReadByte
    */
    inline uint ReadByte();

    /*
    Method ReadDate
    */
    inline QDateTime ReadDate();

    /*
    Method ReadDouble
    */
    inline double ReadDouble();

    /*
    Method ReadFloat
    */
    inline double ReadFloat();

    /*
    Method ReadFrom
    */
    inline void ReadFrom(esriSystem::IStream* inputStream);

    /*
    Method ReadInteger
    */
    inline int ReadInteger();

    /*
    Method ReadShort
    */
    inline int ReadShort();

    /*
    Method ReadVariant
    */
    inline QVariant ReadVariant();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT XMLWriter : public QAxObject
{
public:
    XMLWriter(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{105a5345-85f8-4b27-a1d2-5d2262c6d27e}");
    }

    XMLWriter(IXMLWriter *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    XMLWriter(ISupportErrorInfo *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Method InterfaceSupportsErrorInfo
    */
    inline void InterfaceSupportsErrorInfo(GUID* riid);

    /*
    Method LookupNamespace
    */
    inline QString LookupNamespace(const QString& uri);

    /*
    Method WriteBinary
    */
    inline void WriteBinary(QByteArray& Value);

    /*
    Method WriteBoolean
    */
    inline void WriteBoolean(bool Value);

    /*
    Method WriteByte
    */
    inline void WriteByte(uint Value);

    /*
    Method WriteCData
    */
    inline void WriteCData(const QString& cdata);

    /*
    Method WriteDate
    */
    inline void WriteDate(const QDateTime& Value);

    /*
    Method WriteDouble
    */
    inline void WriteDouble(double Value);

    /*
    Method WriteEndTag
    */
    inline void WriteEndTag();

    /*
    Method WriteFloat
    */
    inline void WriteFloat(double Value);

    /*
    Method WriteInteger
    */
    inline void WriteInteger(int Value);

    /*
    Method WriteNewLine
    */
    inline void WriteNewLine();

    /*
    Method WriteShort
    */
    inline void WriteShort(int Value);

    /*
    Method WriteStartTag
    */
    inline void WriteStartTag(const QString& LocalName, const QString& uri, esriSystem::IXMLAttributes* Attributes, esriSystem::IXMLNamespaces* namespaces, bool isEmpty);

    /*
    Method WriteTab
    */
    inline void WriteTab();

    /*
    Method WriteText
    */
    inline void WriteText(const QString& Text);

    /*
    Method WriteTo
    */
    inline void WriteTo(esriSystem::IStream* outputStream);

    /*
    Method WriteVariant
    */
    inline void WriteVariant(const QVariant& Value);

    /*
    Method WriteXML
    */
    inline void WriteXML(const QString& XML);

    /*
    Method WriteXMLDeclaration
    */
    inline void WriteXMLDeclaration();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT XMLAttributes : public QAxObject
{
public:
    XMLAttributes(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{176edc78-13ad-474c-9f42-083d86ffba33}");
    }

    XMLAttributes(IXMLAttributes *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property AttributeCount
    */
    inline int AttributeCount() const; //Returns the value of AttributeCount

    /*
    Method AddAttribute
    */
    inline void AddAttribute(const QString& LocalName, const QString& NamespaceURI, const QString& Value);

    /*
    Method DeleteAttribute
    */
    inline void DeleteAttribute(const QString& LocalName, const QString& NamespaceURI);

    /*
    Method FindAttribute
    */
    inline int FindAttribute(const QString& LocalName, const QString& NamespaceURI);

    /*
    Method LocalName
    */
    inline QString LocalName(int index);

    /*
    Method NamespaceURI
    */
    inline QString NamespaceURI(int index);

    /*
    Method Value
    */
    inline QString Value(int index);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT XMLNamespaces : public QAxObject
{
public:
    XMLNamespaces(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{95547dd2-8871-498b-918b-cf10eaf50f63}");
    }

    XMLNamespaces(IXMLNamespaces *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property NamespaceCount
    */
    inline int NamespaceCount() const; //Returns the value of NamespaceCount

    /*
    Method AddNamespace
    */
    inline void AddNamespace(const QString& Prefix, const QString& uri);

    /*
    Method DeleteNamespace
    */
    inline void DeleteNamespace(const QString& uri);

    /*
    Method NamespaceURI
    */
    inline QString NamespaceURI(int index);

    /*
    Method Prefix
    */
    inline QString Prefix(int index);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT XMLTypeMapper : public QAxObject
{
public:
    XMLTypeMapper(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{dcb0f748-2d17-40b5-90c2-7d0b39660405}");
    }

    XMLTypeMapper(IXMLTypeMapper *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    XMLTypeMapper(ISupportErrorInfo *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Method FromBinary
    */
    inline QString FromBinary(QByteArray& Value);

    /*
    Method FromBoolean
    */
    inline QString FromBoolean(bool Value);

    /*
    Method FromByte
    */
    inline QString FromByte(uint Value);

    /*
    Method FromDate
    */
    inline QString FromDate(const QDateTime& Value);

    /*
    Method FromDouble
    */
    inline QString FromDouble(double Value);

    /*
    Method FromFloat
    */
    inline QString FromFloat(double Value);

    /*
    Method FromInteger
    */
    inline QString FromInteger(int Value);

    /*
    Method FromShort
    */
    inline QString FromShort(int Value);

    /*
    Method InterfaceSupportsErrorInfo
    */
    inline void InterfaceSupportsErrorInfo(GUID* riid);

    /*
    Method ToBinary
    */
    inline QByteArray ToBinary(const QString& Text);

    /*
    Method ToBoolean
    */
    inline bool ToBoolean(const QString& Text);

    /*
    Method ToByte
    */
    inline uint ToByte(const QString& Text);

    /*
    Method ToDate
    */
    inline QDateTime ToDate(const QString& Text);

    /*
    Method ToDouble
    */
    inline double ToDouble(const QString& Text);

    /*
    Method ToFloat
    */
    inline double ToFloat(const QString& Text);

    /*
    Method ToInteger
    */
    inline int ToInteger(const QString& Text);

    /*
    Method ToObject
    */
    inline IUnknown* ToObject(const QString& NamespaceURI, const QString& TypeName);

    /*
    Method ToShort
    */
    inline int ToShort(const QString& Text);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT XMLSerializer : public QAxObject
{
public:
    XMLSerializer(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{4fe5c28e-35e6-403f-8431-e16b1f99ae4e}");
    }

    XMLSerializer(IXMLSerializer *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    XMLSerializer(ISupportErrorInfo *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Method InterfaceSupportsErrorInfo
    */
    inline void InterfaceSupportsErrorInfo(GUID* riid);

    /*
    Method LoadFromString
    */
    inline IUnknown* LoadFromString(const QString& XML, esriSystem::IPropertySet* environment, esriSystem::IXMLFlags* flags);

    /*
    Method ReadObject
    */
    inline IUnknown* ReadObject(esriSystem::IXMLReader* pReader, esriSystem::IPropertySet* environment, esriSystem::IXMLFlags* flags);

    /*
    Method ReadObjectByType
    */
    inline IUnknown* ReadObjectByType(esriSystem::IXMLReader* pReader, esriSystem::IPropertySet* environment, esriSystem::IXMLFlags* flags, const QString& typeNamespace, const QString& TypeName);

    /*
    Method SaveToString
    */
    inline QString SaveToString(IUnknown* obj, esriSystem::IPropertySet* environment, esriSystem::IXMLFlags* flags);

    /*
    Method WriteObject
    */
    inline void WriteObject(esriSystem::IXMLWriter* pWriter, esriSystem::IPropertySet* environment, esriSystem::IXMLFlags* flags, const QString& elementName, const QString& elementNamespaceURI, IUnknown* obj);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT XMLSerializerAlt : public QAxObject
{
public:
    XMLSerializerAlt(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{364eef73-3c3c-493c-b99a-76dbe62f6fc6}");
    }

    XMLSerializerAlt(IXMLSerializerAlt *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    XMLSerializerAlt(ISupportErrorInfo *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Method InterfaceSupportsErrorInfo
    */
    inline void InterfaceSupportsErrorInfo(GUID* riid);

    /*
    Method LoadFromString
    */
    inline IUnknown* LoadFromString(const QString& XML, const QString& TypeName, const QString& TypeNamespaceURI);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT XMLFlags : public QAxObject
{
public:
    XMLFlags(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{23d488e6-6c77-47e8-948b-cceee3589ca2}");
    }

    XMLFlags(IXMLFlags *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Count
    */
    inline int Count() const; //Returns the value of Count

    /*
    Method FlagName
    */
    inline QString FlagName(int index);

    /*
    Method FlagValue
    */
    inline bool FlagValue(int index);

    /*
    Method GetFlag
    */
    inline bool GetFlag(const QString& Name);

    /*
    Method SetFlag
    */
    inline void SetFlag(const QString& Name, bool FlagValue);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT JSONArray : public QAxObject
{
public:
    JSONArray(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{7f763998-814e-45bd-9ebd-28cda2a10fc6}");
    }

    JSONArray(IJSONArray *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    JSONArray(ISupportErrorInfo *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Count
    */
    inline int Count() const; //Returns the value of Count

    /*
    Method Add
    */
    inline void Add(const QVariant& Value);

    /*
    Method AddBoolean
    */
    inline void AddBoolean(bool Value);

    /*
    Method AddDate
    */
    inline void AddDate(const QDateTime& Value);

    /*
    Method AddDouble
    */
    inline void AddDouble(double Value);

    /*
    Method AddDoubleEx
    */
    inline void AddDoubleEx(double Value, int precision);

    /*
    Method AddJSONArray
    */
    inline void AddJSONArray(esriSystem::IJSONArray* Value);

    /*
    Method AddJSONObject
    */
    inline void AddJSONObject(esriSystem::IJSONObject* Value);

    /*
    Method AddLong
    */
    inline void AddLong(int Value);

    /*
    Method AddNull
    */
    inline void AddNull();

    /*
    Method AddString
    */
    inline void AddString(const QString& Value);

    /*
    Method ClearAll
    */
    inline void ClearAll();

    /*
    Method CreateMemberArray
    */
    inline void CreateMemberArray(esriSystem::IJSONArray** Value);

    /*
    Method CreateMemberObject
    */
    inline void CreateMemberObject(esriSystem::IJSONObject** Value);

    /*
    Method InterfaceSupportsErrorInfo
    */
    inline void InterfaceSupportsErrorInfo(GUID* riid);

    /*
    Method IsValueNull
    */
    inline bool IsValueNull(int index);

    /*
    Method ParseJSON
    */
    inline void ParseJSON(esriSystem::IJSONReader* pReader);

    /*
    Method ParseString
    */
    inline void ParseString(const QString& json);

    /*
    Method RemoveValue
    */
    inline void RemoveValue(int index);

    /*
    Method ToJSON
    */
    inline void ToJSON(const QString& objectName, esriSystem::IJSONWriter* pWriter);

    /*
    Method ToJSONString
    */
    inline QString ToJSONString(esriSystem::IPropertySet* props);

    /*
    Method TryGetValueAsArray
    */
    inline bool TryGetValueAsArray(int index, esriSystem::IJSONArray** Value);

    /*
    Method TryGetValueAsBoolean
    */
    inline bool TryGetValueAsBoolean(int index, bool& Value);

    /*
    Method TryGetValueAsDate
    */
    inline bool TryGetValueAsDate(int index, QDateTime& Value);

    /*
    Method TryGetValueAsDouble
    */
    inline bool TryGetValueAsDouble(int index, double& Value);

    /*
    Method TryGetValueAsLong
    */
    inline bool TryGetValueAsLong(int index, int& Value);

    /*
    Method TryGetValueAsObject
    */
    inline bool TryGetValueAsObject(int index, esriSystem::IJSONObject** Value);

    /*
    Method TryGetValueAsString
    */
    inline bool TryGetValueAsString(int index, QString& Value);

    /*
    Method Value
    */
    inline QVariant Value(int index);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT JSONObject : public QAxObject
{
public:
    JSONObject(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{db25e387-8d9f-4d79-b1df-8f65694465f0}");
    }

    JSONObject(IJSONObject *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    JSONObject(ISupportErrorInfo *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property CaseSensitiveNames
    */
    inline bool CaseSensitiveNames() const; //Returns the value of CaseSensitiveNames
    inline void SetCaseSensitiveNames(bool value); //Sets the value of the CaseSensitiveNames property

    /*
    Property MemberCount
    */
    inline int MemberCount() const; //Returns the value of MemberCount

    /*
    Method Add
    */
    inline void Add(const QString& Name, const QVariant& Value);

    /*
    Method AddBoolean
    */
    inline void AddBoolean(const QString& Name, bool Value);

    /*
    Method AddDate
    */
    inline void AddDate(const QString& Name, const QDateTime& Value);

    /*
    Method AddDouble
    */
    inline void AddDouble(const QString& Name, double Value);

    /*
    Method AddDoubleEx
    */
    inline void AddDoubleEx(const QString& Name, double Value, int precision);

    /*
    Method AddJSONArray
    */
    inline void AddJSONArray(const QString& Name, esriSystem::IJSONArray* Value);

    /*
    Method AddJSONObject
    */
    inline void AddJSONObject(const QString& Name, esriSystem::IJSONObject* Value);

    /*
    Method AddLong
    */
    inline void AddLong(const QString& Name, int Value);

    /*
    Method AddNull
    */
    inline void AddNull(const QString& Name);

    /*
    Method AddString
    */
    inline void AddString(const QString& Name, const QString& Value);

    /*
    Method ClearAll
    */
    inline void ClearAll();

    /*
    Method CreateMemberArray
    */
    inline void CreateMemberArray(const QString& Name, esriSystem::IJSONArray** Value);

    /*
    Method CreateMemberObject
    */
    inline void CreateMemberObject(const QString& Name, esriSystem::IJSONObject** Value);

    /*
    Method GetMemberAt
    */
    inline void GetMemberAt(int index, QString& Name, QVariant& Value);

    /*
    Method InterfaceSupportsErrorInfo
    */
    inline void InterfaceSupportsErrorInfo(GUID* riid);

    /*
    Method IsValueNull
    */
    inline bool IsValueNull(const QString& Name);

    /*
    Method MakeValueNull
    */
    inline void MakeValueNull(const QString& Name);

    /*
    Method MemberExists
    */
    inline bool MemberExists(const QString& Name);

    /*
    Method ParseJSON
    */
    inline void ParseJSON(esriSystem::IJSONReader* pReader);

    /*
    Method ParseString
    */
    inline void ParseString(const QString& json);

    /*
    Method RemoveMember
    */
    inline void RemoveMember(const QString& Name);

    /*
    Method ToJSON
    */
    inline void ToJSON(const QString& objectName, esriSystem::IJSONWriter* pWriter);

    /*
    Method ToJSONString
    */
    inline QString ToJSONString(esriSystem::IPropertySet* props);

    /*
    Method TryGetValue
    */
    inline bool TryGetValue(const QString& Name, QVariant& Value);

    /*
    Method TryGetValueAsArray
    */
    inline bool TryGetValueAsArray(const QString& Name, esriSystem::IJSONArray** Value);

    /*
    Method TryGetValueAsBoolean
    */
    inline bool TryGetValueAsBoolean(const QString& Name, bool& Value);

    /*
    Method TryGetValueAsDate
    */
    inline bool TryGetValueAsDate(const QString& Name, QDateTime& Value);

    /*
    Method TryGetValueAsDouble
    */
    inline bool TryGetValueAsDouble(const QString& Name, double& Value);

    /*
    Method TryGetValueAsLong
    */
    inline bool TryGetValueAsLong(const QString& Name, int& Value);

    /*
    Method TryGetValueAsObject
    */
    inline bool TryGetValueAsObject(const QString& Name, esriSystem::IJSONObject** Value);

    /*
    Method TryGetValueAsString
    */
    inline bool TryGetValueAsString(const QString& Name, QString& Value);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT JSONWriter : public QAxObject
{
public:
    JSONWriter(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{bec303dc-37ae-4eb3-92f5-397e5b6e7509}");
    }

    JSONWriter(IJSONWriter *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    JSONWriter(IJSONWriter2 *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    JSONWriter(ISupportErrorInfo *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Stream
    */
    inline esriSystem::IStream* Stream() const; //Returns the value of Stream

    /*
    Method EndArray
    */
    inline void EndArray();

    /*
    Method EndObject
    */
    inline void EndObject();

    /*
    Method GetStringBuffer
    */
    inline QByteArray GetStringBuffer();

    /*
    Method InterfaceSupportsErrorInfo
    */
    inline void InterfaceSupportsErrorInfo(GUID* riid);

    /*
    Method Reset
    */
    inline void Reset();

    /*
    Method SetFormatted
    */
    inline void SetFormatted(bool Value);

    /*
    Method SetIndent
    */
    inline void SetIndent(int Value);

    /*
    Method StartArray
    */
    inline void StartArray(const QString& Name);

    /*
    Method StartObject
    */
    inline void StartObject(const QString& Name);

    /*
    Method WriteBinary
    */
    inline void WriteBinary(const QString& Name, QByteArray& Value);

    /*
    Method WriteBinaryVal
    */
    inline void WriteBinaryVal(QByteArray& Value);

    /*
    Method WriteBoolean
    */
    inline void WriteBoolean(const QString& Name, bool Value);

    /*
    Method WriteBooleanVal
    */
    inline void WriteBooleanVal(bool Value);

    /*
    Method WriteByte
    */
    inline void WriteByte(const QString& Name, uint Value);

    /*
    Method WriteByteVal
    */
    inline void WriteByteVal(uint Value);

    /*
    Method WriteDate
    */
    inline void WriteDate(const QString& Name, const QDateTime& Value, bool asString);

    /*
    Method WriteDateVal
    */
    inline void WriteDateVal(const QDateTime& Value, bool asString);

    /*
    Method WriteDouble
    */
    inline void WriteDouble(const QString& Name, double Value);

    /*
    Method WriteDoubleEx
    */
    inline void WriteDoubleEx(const QString& Name, double Value, int precision);

    /*
    Method WriteDoubleVal
    */
    inline void WriteDoubleVal(double Value);

    /*
    Method WriteDoubleValEx
    */
    inline void WriteDoubleValEx(double Value, int precision);

    /*
    Method WriteFloat
    */
    inline void WriteFloat(const QString& Name, double Value);

    /*
    Method WriteFloatVal
    */
    inline void WriteFloatVal(double Value);

    /*
    Method WriteInteger
    */
    inline void WriteInteger(const QString& Name, int Value);

    /*
    Method WriteIntegerVal
    */
    inline void WriteIntegerVal(int Value);

    /*
    Method WriteNull
    */
    inline void WriteNull(const QString& Name);

    /*
    Method WriteNullVal
    */
    inline void WriteNullVal();

    /*
    Method WriteRawString
    */
    inline void WriteRawString(const QString& Name, const QString& Value);

    /*
    Method WriteRawStringVal
    */
    inline void WriteRawStringVal(const QString& Value);

    /*
    Method WriteShort
    */
    inline void WriteShort(const QString& Name, int Value);

    /*
    Method WriteShortVal
    */
    inline void WriteShortVal(int Value);

    /*
    Method WriteString
    */
    inline void WriteString(const QString& Name, const QString& Value);

    /*
    Method WriteStringVal
    */
    inline void WriteStringVal(const QString& Value);

    /*
    Method WriteTo
    */
    inline void WriteTo(esriSystem::IStream* outputStream);

    /*
    Method WriteToString
    */
    inline void WriteToString();

    /*
    Method WriteVariant
    */
    inline void WriteVariant(const QString& Name, const QVariant& Value);

    /*
    Method WriteVariantVal
    */
    inline void WriteVariantVal(const QVariant& Value);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT AMFWriter : public QAxObject
{
public:
    AMFWriter(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{e312a49e-4a72-4766-9e5b-4b3fe8ca2eec}");
    }

    AMFWriter(IAMFWriter *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    AMFWriter(ISupportErrorInfo *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Stream
    */
    inline esriSystem::IStream* Stream() const; //Returns the value of Stream

    /*
    Method EndAMF3Array
    */
    inline void EndAMF3Array();

    /*
    Method EndAMF3Object
    */
    inline void EndAMF3Object();

    /*
    Method EndAMF3ObjectTraits
    */
    inline void EndAMF3ObjectTraits();

    /*
    Method GetCopy
    */
    inline void GetCopy(esriSystem::IAMFWriter** ppOutWriter);

    /*
    Method InterfaceSupportsErrorInfo
    */
    inline void InterfaceSupportsErrorInfo(GUID* riid);

    /*
    Method StartAMF3Array
    */
    inline void StartAMF3Array(int denseCount, int& obj_ref);

    /*
    Method StartAMF3CustomObject
    */
    inline void StartAMF3CustomObject(const QString& classname, int& obj_ref);

    /*
    Method StartAMF3Object
    */
    inline void StartAMF3Object(int traits_ref, int& obj_ref);

    /*
    Method StartAMF3ObjectWithTraits
    */
    inline void StartAMF3ObjectWithTraits(const QString& classname, int MemberCount, bool dynamic, int& traits_ref, int& obj_ref);

    /*
    Method WriteAMF3ArrayDenseMarker
    */
    inline void WriteAMF3ArrayDenseMarker();

    /*
    Method WriteAMF3ArrayRef
    */
    inline void WriteAMF3ArrayRef(int obj_ref);

    /*
    Method WriteAMF3Bool
    */
    inline void WriteAMF3Bool(bool Value);

    /*
    Method WriteAMF3ByteArray
    */
    inline void WriteAMF3ByteArray(QByteArray& ppArray, int& obj_ref);

    /*
    Method WriteAMF3ByteArrayRef
    */
    inline void WriteAMF3ByteArrayRef(int obj_ref);

    /*
    Method WriteAMF3Date
    */
    inline void WriteAMF3Date(const QDateTime& Value, bool asJsonNumber, int& obj_ref);

    /*
    Method WriteAMF3DateRef
    */
    inline void WriteAMF3DateRef(int obj_ref);

    /*
    Method WriteAMF3Double
    */
    inline void WriteAMF3Double(double Value);

    /*
    Method WriteAMF3Int
    */
    inline void WriteAMF3Int(int Value);

    /*
    Method WriteAMF3Null
    */
    inline void WriteAMF3Null();

    /*
    Method WriteAMF3ObjectRef
    */
    inline void WriteAMF3ObjectRef(int obj_ref);

    /*
    Method WriteAMF3String
    */
    inline void WriteAMF3String(const QString& Value, int& string_ref);

    /*
    Method WriteAMF3StringRef
    */
    inline void WriteAMF3StringRef(int string_ref);

    /*
    Method WriteAMF3Undefined
    */
    inline void WriteAMF3Undefined();

    /*
    Method WriteAMF3Variant
    */
    inline void WriteAMF3Variant(const QVariant& Value, int& value_ref);

    /*
    Method WriteAMF3Xml
    */
    inline void WriteAMF3Xml(const QString& Value, int& obj_ref);

    /*
    Method WriteAMF3XmlDoc
    */
    inline void WriteAMF3XmlDoc(const QString& Value, int& obj_ref);

    /*
    Method WriteAMF3XmlDocRef
    */
    inline void WriteAMF3XmlDocRef(int obj_ref);

    /*
    Method WriteAMF3XmlRef
    */
    inline void WriteAMF3XmlRef(int obj_ref);

    /*
    Method WriteAMF3_UTF8
    */
    inline void WriteAMF3_UTF8(const QString& Value, int& string_ref);

    /*
    Method WriteAMF3_UTF8Ref
    */
    inline void WriteAMF3_UTF8Ref(int string_ref);

    /*
    Method WriteTo
    */
    inline void WriteTo(esriSystem::IStream* outputStream);

    /*
    Method WriteU16
    */
    inline void WriteU16(int b);

    /*
    Method WriteU32
    */
    inline void WriteU32(int b);

    /*
    Method WriteU8
    */
    inline void WriteU8(uint b);

    /*
    Method WriteUTF8
    */
    inline void WriteUTF8(const QString& Value);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT JSONReader : public QAxObject
{
public:
    JSONReader(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{b4578901-05de-4bda-aaeb-849ec52102b1}");
    }

    JSONReader(IJSONReader *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    JSONReader(IJSONReader2 *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    JSONReader(ISupportErrorInfo *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property CurrentTokenType
    */
    inline esriSystem::JSONTokenType CurrentTokenType() const; //Returns the value of CurrentTokenType

    /*
    Property Stream
    */
    inline esriSystem::IStream* Stream() const; //Returns the value of Stream

    /*
    Method FindProperties
    */
    inline int FindProperties(esriSystem::IStringArray* propnames);

    /*
    Method FindProperty
    */
    inline bool FindProperty(const QString& propname);

    /*
    Method InterfaceSupportsErrorInfo
    */
    inline void InterfaceSupportsErrorInfo(GUID* riid);

    /*
    Method IsBoolean
    */
    inline bool IsBoolean();

    /*
    Method IsEndOfArray
    */
    inline bool IsEndOfArray();

    /*
    Method IsEndOfObject
    */
    inline bool IsEndOfObject();

    /*
    Method IsNull
    */
    inline bool IsNull();

    /*
    Method IsNumber
    */
    inline bool IsNumber();

    /*
    Method IsStartOfArray
    */
    inline bool IsStartOfArray();

    /*
    Method IsStartOfObject
    */
    inline bool IsStartOfObject();

    /*
    Method IsString
    */
    inline bool IsString();

    /*
    Method ParseJSONString
    */
    inline IUnknown* ParseJSONString(const QString& json);

    /*
    Method Read
    */
    inline void Read();

    /*
    Method ReadFrom
    */
    inline void ReadFrom(esriSystem::IStream* inputStream);

    /*
    Method ReadFromString
    */
    inline void ReadFromString(const QString& Text);

    /*
    Method ReadPropertyName
    */
    inline QString ReadPropertyName();

    /*
    Method ReadValue
    */
    inline QVariant ReadValue();

    /*
    Method ReadValueAsBoolean
    */
    inline bool ReadValueAsBoolean();

    /*
    Method ReadValueAsDate
    */
    inline QDateTime ReadValueAsDate();

    /*
    Method ReadValueAsDouble
    */
    inline double ReadValueAsDouble();

    /*
    Method ReadValueAsLong
    */
    inline int ReadValueAsLong();

    /*
    Method ReadValueAsString
    */
    inline QString ReadValueAsString();

    /*
    Method ReadValueEx
    */
    inline void ReadValueEx(QVariant& pVal, int& precision);

    /*
    Method RemoveAllBookmarks
    */
    inline void RemoveAllBookmarks();

    /*
    Method RemoveBookmark
    */
    inline void RemoveBookmark(const QString& Name);

    /*
    Method ReturnToBookmark
    */
    inline void ReturnToBookmark(const QString& Name);

    /*
    Method SetBookmark
    */
    inline void SetBookmark(const QString& Name);

    /*
    Method SkipUntilArrayEnds
    */
    inline void SkipUntilArrayEnds();

    /*
    Method SkipUntilObjectEnds
    */
    inline void SkipUntilObjectEnds();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT Time : public QAxObject
{
public:
    Time(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{e1721810-8210-45b1-8590-fc4c911fba20}");
    }

    Time(ITime *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    Time(ITime2 *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    Time(ITimeOffsetOperator *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    Time(IXMLSerialize *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    Time(IXMLVersionSupport *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    Time(IClone *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    Time(IPersistStream *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    Time(IDocumentVersionSupportGEN *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Day
    */
    inline int Day() const; //Returns the value of Day
    inline void SetDay(int value); //Sets the value of the Day property

    /*
    Property DayOfWeek
    */
    inline int DayOfWeek() const; //Returns the value of DayOfWeek

    /*
    Property DayOfYear
    */
    inline int DayOfYear() const; //Returns the value of DayOfYear

    /*
    Property Hour
    */
    inline int Hour() const; //Returns the value of Hour
    inline void SetHour(int value); //Sets the value of the Hour property

    /*
    Property MinNamespaceSupported
    */
    inline QString MinNamespaceSupported() const; //Returns the value of MinNamespaceSupported

    /*
    Property Minute
    */
    inline int Minute() const; //Returns the value of Minute
    inline void SetMinute(int value); //Sets the value of the Minute property

    /*
    Property Month
    */
    inline int Month() const; //Returns the value of Month
    inline void SetMonth(int value); //Sets the value of the Month property

    /*
    Property Nanoseconds
    */
    inline int Nanoseconds() const; //Returns the value of Nanoseconds
    inline void SetNanoseconds(int value); //Sets the value of the Nanoseconds property

    /*
    Property Second
    */
    inline int Second() const; //Returns the value of Second
    inline void SetSecond(int value); //Sets the value of the Second property

    /*
    Property Year
    */
    inline int Year() const; //Returns the value of Year
    inline void SetYear(int value); //Sets the value of the Year property

    /*
    Method AddDays
    */
    inline void AddDays(double Value);

    /*
    Method AddDuration
    */
    inline void AddDuration(esriSystem::ITimeDuration* TimeDuration);

    /*
    Method AddHours
    */
    inline void AddHours(double Value);

    /*
    Method AddMilliseconds
    */
    inline void AddMilliseconds(double Value);

    /*
    Method AddMinutes
    */
    inline void AddMinutes(double Value);

    /*
    Method AddMonths
    */
    inline bool AddMonths(double Value, bool preserveEndOfMonth, bool goForwardOnInvalidDate);

    /*
    Method AddNanoseconds
    */
    inline void AddNanoseconds(qlonglong Value);

    /*
    Method AddSeconds
    */
    inline void AddSeconds(double Value);

    /*
    Method AddWeeks
    */
    inline void AddWeeks(double Value);

    /*
    Method AddYears
    */
    inline bool AddYears(double Value, bool preserveEndOfMonth, bool goForwardOnInvalidDate);

    /*
    Method Assign
    */
    inline void Assign(esriSystem::IClone* src);

    /*
    Method Clone
    */
    inline esriSystem::IClone* Clone();

    /*
    Method Compare
    */
    inline int Compare(esriSystem::ITime* otherTime);

    /*
    Method ConvertToSupportedObject
    */
    inline QVariant ConvertToSupportedObject(esriSystem::esriArcGISVersion docVersion);

    /*
    Method Deserialize
    */
    inline void Deserialize(esriSystem::IXMLSerializeData* data);

    /*
    Method GetSizeMax
    */
    inline void GetSizeMax(_ULARGE_INTEGER*& pcbSize);

    /*
    Method IsDirty
    */
    inline void IsDirty();

    /*
    Method IsEqual
    */
    inline bool IsEqual(esriSystem::IClone* other);

    /*
    Method IsIdentical
    */
    inline bool IsIdentical(esriSystem::IClone* other);

    /*
    Method IsSupportedAtVersion
    */
    inline bool IsSupportedAtVersion(esriSystem::esriArcGISVersion docVersion);

    /*
    Method Load
    */
    inline void Load(esriSystem::IStream* pstm);

    /*
    Method QueryDayFraction
    */
    inline double QueryDayFraction();

    /*
    Method QueryGregorianTime
    */
    inline _WKSDateTime* QueryGregorianTime();

    /*
    Method QueryIntegerTime
    */
    inline qlonglong QueryIntegerTime(esriSystem::esriIntegerTimeFormat integerTimeFormat);

    /*
    Method QueryJulianDayNumber
    */
    inline int QueryJulianDayNumber();

    /*
    Method QueryNanosecondsSinceMidnight
    */
    inline qlonglong QueryNanosecondsSinceMidnight();

    /*
    Method QueryOleTime
    */
    inline QDateTime QueryOleTime();

    /*
    Method QueryTicks
    */
    inline qlonglong QueryTicks();

    /*
    Method QueryTimeString
    */
    inline QString QueryTimeString(esriSystem::esriTimeStringFormat timeStringFormat);

    /*
    Method QueryTimeStringCurrentLocale
    */
    inline QString QueryTimeStringCurrentLocale(esriSystem::esriTimeLocaleFormat timeLocaleFormat);

    /*
    Method QueryTimeStringCustom
    */
    inline QString QueryTimeStringCustom(const QString& timeStringFormat, int LocaleID, const QString& amSymbol, const QString& pmSymbol);

    /*
    Method QueryXMLTimeString
    */
    inline QString QueryXMLTimeString(esriSystem::ITimeReference* TimeReference);

    /*
    Method Save
    */
    inline void Save(esriSystem::IStream* pstm, int fClearDirty);

    /*
    Method Serialize
    */
    inline void Serialize(esriSystem::IXMLSerializeData* data);

    /*
    Method SetDayFraction
    */
    inline void SetDayFraction(double dayFraction);

    /*
    Method SetFromCurrentLocalTime
    */
    inline void SetFromCurrentLocalTime();

    /*
    Method SetFromCurrentUtcTime
    */
    inline void SetFromCurrentUtcTime();

    /*
    Method SetFromGregorianTime
    */
    inline void SetFromGregorianTime(_WKSDateTime* gregorianTime);

    /*
    Method SetFromIntegerTime
    */
    inline void SetFromIntegerTime(esriSystem::esriIntegerTimeFormat integerTimeFormat, qlonglong integerTime);

    /*
    Method SetFromObject
    */
    inline void SetFromObject(const QVariant& Object);

    /*
    Method SetFromOleTime
    */
    inline void SetFromOleTime(const QDateTime& oleTime);

    /*
    Method SetFromTicks
    */
    inline void SetFromTicks(qlonglong ticks);

    /*
    Method SetFromTimeString
    */
    inline void SetFromTimeString(esriSystem::esriTimeStringFormat timeStringFormat, const QString& timeString);

    /*
    Method SetFromTimeStringCurrentLocale
    */
    inline void SetFromTimeStringCurrentLocale(esriSystem::esriTimeLocaleFormat timeLocaleFormat, const QString& timeString);

    /*
    Method SetFromTimeStringCustom
    */
    inline void SetFromTimeStringCustom(const QString& timeStringFormat, int LocaleID, const QString& amSymbol, const QString& pmSymbol, const QString& timeString);

    /*
    Method SetFromXMLTimeString
    */
    inline int SetFromXMLTimeString(const QString& xmlTimeString);

    /*
    Method SetJulianDayNumber
    */
    inline void SetJulianDayNumber(int julianDayNumber);

    /*
    Method SetNanosecondsSinceMidnight
    */
    inline void SetNanosecondsSinceMidnight(qlonglong nanosecondsSinceMidnight);

    /*
    Method SnapToEndOfMonth
    */
    inline void SnapToEndOfMonth();

    /*
    Method SubtractDuration
    */
    inline void SubtractDuration(esriSystem::ITimeDuration* TimeDuration);

    /*
    Method SubtractTime
    */
    inline esriSystem::ITimeDuration* SubtractTime(esriSystem::ITime* Time);

    /*
    Method ToLocal
    */
    inline void ToLocal();

    /*
    Method ToUTC
    */
    inline void ToUTC();

    /*
    Method WeekOfMonth
    */
    inline int WeekOfMonth(int startDayOfWeek);

    /*
    Method WeekOfYear
    */
    inline int WeekOfYear(int startDayOfWeek);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT TimeDuration : public QAxObject
{
public:
    TimeDuration(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{09692c1c-21fa-4fe2-8efa-6c4acb59a323}");
    }

    TimeDuration(ITimeDuration *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    TimeDuration(IXMLSerialize *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    TimeDuration(IXMLVersionSupport *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    TimeDuration(IClone *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    TimeDuration(IPersistStream *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    TimeDuration(IDocumentVersionSupportGEN *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Days
    */
    inline int Days() const; //Returns the value of Days
    inline void SetDays(int value); //Sets the value of the Days property

    /*
    Property Hours
    */
    inline int Hours() const; //Returns the value of Hours
    inline void SetHours(int value); //Sets the value of the Hours property

    /*
    Property MinNamespaceSupported
    */
    inline QString MinNamespaceSupported() const; //Returns the value of MinNamespaceSupported

    /*
    Property Minutes
    */
    inline int Minutes() const; //Returns the value of Minutes
    inline void SetMinutes(int value); //Sets the value of the Minutes property

    /*
    Property Nanoseconds
    */
    inline int Nanoseconds() const; //Returns the value of Nanoseconds
    inline void SetNanoseconds(int value); //Sets the value of the Nanoseconds property

    /*
    Property Positive
    */
    inline bool Positive() const; //Returns the value of Positive
    inline void SetPositive(bool value); //Sets the value of the Positive property

    /*
    Property Seconds
    */
    inline int Seconds() const; //Returns the value of Seconds
    inline void SetSeconds(int value); //Sets the value of the Seconds property

    /*
    Method AddDays
    */
    inline void AddDays(double Value);

    /*
    Method AddDuration
    */
    inline void AddDuration(esriSystem::ITimeDuration* TimeDuration);

    /*
    Method AddHours
    */
    inline void AddHours(double Value);

    /*
    Method AddMilliseconds
    */
    inline void AddMilliseconds(double Value);

    /*
    Method AddMinutes
    */
    inline void AddMinutes(double Value);

    /*
    Method AddNanoseconds
    */
    inline void AddNanoseconds(qlonglong Value);

    /*
    Method AddSeconds
    */
    inline void AddSeconds(double Value);

    /*
    Method AddWeeks
    */
    inline void AddWeeks(double Value);

    /*
    Method Assign
    */
    inline void Assign(esriSystem::IClone* src);

    /*
    Method Clone
    */
    inline esriSystem::IClone* Clone();

    /*
    Method Compare
    */
    inline int Compare(esriSystem::ITimeDuration* otherDuration);

    /*
    Method ConvertToSupportedObject
    */
    inline QVariant ConvertToSupportedObject(esriSystem::esriArcGISVersion docVersion);

    /*
    Method Deserialize
    */
    inline void Deserialize(esriSystem::IXMLSerializeData* data);

    /*
    Method GetSizeMax
    */
    inline void GetSizeMax(_ULARGE_INTEGER*& pcbSize);

    /*
    Method IsDirty
    */
    inline void IsDirty();

    /*
    Method IsEqual
    */
    inline bool IsEqual(esriSystem::IClone* other);

    /*
    Method IsIdentical
    */
    inline bool IsIdentical(esriSystem::IClone* other);

    /*
    Method IsSupportedAtVersion
    */
    inline bool IsSupportedAtVersion(esriSystem::esriArcGISVersion docVersion);

    /*
    Method IsZero
    */
    inline bool IsZero();

    /*
    Method Load
    */
    inline void Load(esriSystem::IStream* pstm);

    /*
    Method QueryDayFraction
    */
    inline double QueryDayFraction();

    /*
    Method QueryDayFractionNanoseconds
    */
    inline qlonglong QueryDayFractionNanoseconds();

    /*
    Method QueryTicks
    */
    inline qlonglong QueryTicks();

    /*
    Method QueryTotalDays
    */
    inline double QueryTotalDays();

    /*
    Method QueryTotalHours
    */
    inline double QueryTotalHours();

    /*
    Method QueryTotalMinutes
    */
    inline double QueryTotalMinutes();

    /*
    Method QueryTotalSeconds
    */
    inline double QueryTotalSeconds();

    /*
    Method QueryWKSTimeDuration
    */
    inline _WKSTimeDuration* QueryWKSTimeDuration();

    /*
    Method QueryXMLTimeDurationString
    */
    inline QString QueryXMLTimeDurationString();

    /*
    Method Reset
    */
    inline void Reset();

    /*
    Method Save
    */
    inline void Save(esriSystem::IStream* pstm, int fClearDirty);

    /*
    Method Scale
    */
    inline void Scale(double scaleFactor);

    /*
    Method Serialize
    */
    inline void Serialize(esriSystem::IXMLSerializeData* data);

    /*
    Method SetDayFraction
    */
    inline void SetDayFraction(double dayFraction);

    /*
    Method SetDayFractionNanoseconds
    */
    inline void SetDayFractionNanoseconds(qlonglong dayFractionNanoseconds);

    /*
    Method SetFromTicks
    */
    inline void SetFromTicks(qlonglong ticks);

    /*
    Method SetFromWKSTimeDuration
    */
    inline void SetFromWKSTimeDuration(_WKSTimeDuration* TimeDuration);

    /*
    Method SetFromXMLTimeDurationString
    */
    inline void SetFromXMLTimeDurationString(const QString& xmlTimeDurationString);

    /*
    Method SubtractDuration
    */
    inline void SubtractDuration(esriSystem::ITimeDuration* TimeDuration);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT TimeInstant : public QAxObject
{
public:
    TimeInstant(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{06bd7287-0785-4294-bd72-f2933b7fd00d}");
    }

    TimeInstant(ITimeInstant *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    TimeInstant(ITimeValue *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    TimeInstant(ITimeRelationalOperator *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    TimeInstant(ITimeOffsetOperator *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    TimeInstant(IXMLSerialize *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    TimeInstant(IXMLVersionSupport *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    TimeInstant(IClone *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    TimeInstant(IPersistStream *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    TimeInstant(IDocumentVersionSupportGEN *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property MinNamespaceSupported
    */
    inline QString MinNamespaceSupported() const; //Returns the value of MinNamespaceSupported

    /*
    Property Time
    */
    inline esriSystem::ITime* Time() const; //Returns the value of Time
    inline void SetTime(esriSystem::ITime* value); //Sets the value of the Time property

    /*
    Property TimeReference
    */
    inline esriSystem::ITimeReference* TimeReference() const; //Returns the value of TimeReference
    inline void SetTimeReference(esriSystem::ITimeReference* value); //Sets the value of the TimeReference property

    /*
    Method AddDays
    */
    inline void AddDays(double Value);

    /*
    Method AddDuration
    */
    inline void AddDuration(esriSystem::ITimeDuration* TimeDuration);

    /*
    Method AddHours
    */
    inline void AddHours(double Value);

    /*
    Method AddMilliseconds
    */
    inline void AddMilliseconds(double Value);

    /*
    Method AddMinutes
    */
    inline void AddMinutes(double Value);

    /*
    Method AddMonths
    */
    inline bool AddMonths(double Value, bool preserveEndOfMonth, bool goForwardOnInvalidDate);

    /*
    Method AddNanoseconds
    */
    inline void AddNanoseconds(qlonglong Value);

    /*
    Method AddSeconds
    */
    inline void AddSeconds(double Value);

    /*
    Method AddWeeks
    */
    inline void AddWeeks(double Value);

    /*
    Method AddYears
    */
    inline bool AddYears(double Value, bool preserveEndOfMonth, bool goForwardOnInvalidDate);

    /*
    Method Assign
    */
    inline void Assign(esriSystem::IClone* src);

    /*
    Method Clone
    */
    inline esriSystem::IClone* Clone();

    /*
    Method Contains
    */
    inline bool Contains(esriSystem::ITimeValue* otherTimeValue);

    /*
    Method ConvertToSupportedObject
    */
    inline QVariant ConvertToSupportedObject(esriSystem::esriArcGISVersion docVersion);

    /*
    Method Deserialize
    */
    inline void Deserialize(esriSystem::IXMLSerializeData* data);

    /*
    Method Disjoint
    */
    inline bool Disjoint(esriSystem::ITimeValue* otherTimeValue);

    /*
    Method Equals
    */
    inline bool Equals(esriSystem::ITimeValue* otherTimeValue);

    /*
    Method GetSizeMax
    */
    inline void GetSizeMax(_ULARGE_INTEGER*& pcbSize);

    /*
    Method IsDirty
    */
    inline void IsDirty();

    /*
    Method IsEqual
    */
    inline bool IsEqual(esriSystem::IClone* other);

    /*
    Method IsIdentical
    */
    inline bool IsIdentical(esriSystem::IClone* other);

    /*
    Method IsSupportedAtVersion
    */
    inline bool IsSupportedAtVersion(esriSystem::esriArcGISVersion docVersion);

    /*
    Method Load
    */
    inline void Load(esriSystem::IStream* pstm);

    /*
    Method Project
    */
    inline void Project(esriSystem::ITimeReference* TimeReference);

    /*
    Method ProjectFromUTC
    */
    inline void ProjectFromUTC();

    /*
    Method ProjectToUTC
    */
    inline void ProjectToUTC();

    /*
    Method Save
    */
    inline void Save(esriSystem::IStream* pstm, int fClearDirty);

    /*
    Method Serialize
    */
    inline void Serialize(esriSystem::IXMLSerializeData* data);

    /*
    Method SubtractDuration
    */
    inline void SubtractDuration(esriSystem::ITimeDuration* TimeDuration);

    /*
    Method Touches
    */
    inline bool Touches(esriSystem::ITimeValue* otherTimeValue);

    /*
    Method Within
    */
    inline bool Within(esriSystem::ITimeValue* otherTimeValue);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT TimeExtent : public QAxObject
{
public:
    TimeExtent(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{5dc783de-283a-4963-ab53-25a05c5d76cc}");
    }

    TimeExtent(ITimeExtent *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    TimeExtent(ITimeValue *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    TimeExtent(ITimeRelationalOperator *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    TimeExtent(ITimeOffsetOperator *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    TimeExtent(IXMLSerialize *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    TimeExtent(IXMLVersionSupport *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    TimeExtent(IClone *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    TimeExtent(IPersistStream *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    TimeExtent(IDocumentVersionSupportGEN *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Empty
    */
    inline bool Empty() const; //Returns the value of Empty
    inline void SetEmpty(bool value); //Sets the value of the Empty property

    /*
    Property EndTime
    */
    inline esriSystem::ITime* EndTime() const; //Returns the value of EndTime
    inline void SetEndTime(esriSystem::ITime* value); //Sets the value of the EndTime property

    /*
    Property MinNamespaceSupported
    */
    inline QString MinNamespaceSupported() const; //Returns the value of MinNamespaceSupported

    /*
    Property StartTime
    */
    inline esriSystem::ITime* StartTime() const; //Returns the value of StartTime
    inline void SetStartTime(esriSystem::ITime* value); //Sets the value of the StartTime property

    /*
    Property TimeReference
    */
    inline esriSystem::ITimeReference* TimeReference() const; //Returns the value of TimeReference
    inline void SetTimeReference(esriSystem::ITimeReference* value); //Sets the value of the TimeReference property

    /*
    Method AddDays
    */
    inline void AddDays(double Value);

    /*
    Method AddDuration
    */
    inline void AddDuration(esriSystem::ITimeDuration* TimeDuration);

    /*
    Method AddHours
    */
    inline void AddHours(double Value);

    /*
    Method AddMilliseconds
    */
    inline void AddMilliseconds(double Value);

    /*
    Method AddMinutes
    */
    inline void AddMinutes(double Value);

    /*
    Method AddMonths
    */
    inline bool AddMonths(double Value, bool preserveEndOfMonth, bool goForwardOnInvalidDate);

    /*
    Method AddNanoseconds
    */
    inline void AddNanoseconds(qlonglong Value);

    /*
    Method AddSeconds
    */
    inline void AddSeconds(double Value);

    /*
    Method AddWeeks
    */
    inline void AddWeeks(double Value);

    /*
    Method AddYears
    */
    inline bool AddYears(double Value, bool preserveEndOfMonth, bool goForwardOnInvalidDate);

    /*
    Method Assign
    */
    inline void Assign(esriSystem::IClone* src);

    /*
    Method Clone
    */
    inline esriSystem::IClone* Clone();

    /*
    Method Contains
    */
    inline bool Contains(esriSystem::ITimeValue* otherTimeValue);

    /*
    Method ConvertToSupportedObject
    */
    inline QVariant ConvertToSupportedObject(esriSystem::esriArcGISVersion docVersion);

    /*
    Method Deserialize
    */
    inline void Deserialize(esriSystem::IXMLSerializeData* data);

    /*
    Method Disjoint
    */
    inline bool Disjoint(esriSystem::ITimeValue* otherTimeValue);

    /*
    Method Equals
    */
    inline bool Equals(esriSystem::ITimeValue* otherTimeValue);

    /*
    Method GetSizeMax
    */
    inline void GetSizeMax(_ULARGE_INTEGER*& pcbSize);

    /*
    Method Intersect
    */
    inline void Intersect(esriSystem::ITimeValue* otherTimeValue);

    /*
    Method IsDirty
    */
    inline void IsDirty();

    /*
    Method IsEqual
    */
    inline bool IsEqual(esriSystem::IClone* other);

    /*
    Method IsIdentical
    */
    inline bool IsIdentical(esriSystem::IClone* other);

    /*
    Method IsSupportedAtVersion
    */
    inline bool IsSupportedAtVersion(esriSystem::esriArcGISVersion docVersion);

    /*
    Method Load
    */
    inline void Load(esriSystem::IStream* pstm);

    /*
    Method Project
    */
    inline void Project(esriSystem::ITimeReference* TimeReference);

    /*
    Method ProjectFromUTC
    */
    inline void ProjectFromUTC();

    /*
    Method ProjectToUTC
    */
    inline void ProjectToUTC();

    /*
    Method QueryTimeDuration
    */
    inline esriSystem::ITimeDuration* QueryTimeDuration();

    /*
    Method Save
    */
    inline void Save(esriSystem::IStream* pstm, int fClearDirty);

    /*
    Method Serialize
    */
    inline void Serialize(esriSystem::IXMLSerializeData* data);

    /*
    Method SetExtent
    */
    inline void SetExtent(esriSystem::ITime* StartTime, esriSystem::ITime* EndTime);

    /*
    Method SubtractDuration
    */
    inline void SubtractDuration(esriSystem::ITimeDuration* TimeDuration);

    /*
    Method Touches
    */
    inline bool Touches(esriSystem::ITimeValue* otherTimeValue);

    /*
    Method Union
    */
    inline void Union(esriSystem::ITimeValue* otherTimeValue);

    /*
    Method Within
    */
    inline bool Within(esriSystem::ITimeValue* otherTimeValue);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT TimeZoneRule : public QAxObject
{
public:
    TimeZoneRule(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{1897b0ef-94da-4037-8156-145d63cd480d}");
    }

    TimeZoneRule(ITimeZoneRule *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    TimeZoneRule(IXMLSerialize *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    TimeZoneRule(IXMLVersionSupport *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    TimeZoneRule(IClone *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    TimeZoneRule(IPersistStream *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    TimeZoneRule(IDocumentVersionSupportGEN *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property BiasFromUTC
    */
    inline int BiasFromUTC() const; //Returns the value of BiasFromUTC
    inline void SetBiasFromUTC(int value); //Sets the value of the BiasFromUTC property

    /*
    Property DaylightTimeBias
    */
    inline int DaylightTimeBias() const; //Returns the value of DaylightTimeBias
    inline void SetDaylightTimeBias(int value); //Sets the value of the DaylightTimeBias property

    /*
    Property DaylightTimeTransitionTime
    */
    inline _TimeZoneTransitionTime* DaylightTimeTransitionTime() const; //Returns the value of DaylightTimeTransitionTime
    inline void SetDaylightTimeTransitionTime(_TimeZoneTransitionTime* value); //Sets the value of the DaylightTimeTransitionTime property

    /*
    Property MinNamespaceSupported
    */
    inline QString MinNamespaceSupported() const; //Returns the value of MinNamespaceSupported

    /*
    Property StandardTimeBias
    */
    inline int StandardTimeBias() const; //Returns the value of StandardTimeBias
    inline void SetStandardTimeBias(int value); //Sets the value of the StandardTimeBias property

    /*
    Property StandardTimeTransitionTime
    */
    inline _TimeZoneTransitionTime* StandardTimeTransitionTime() const; //Returns the value of StandardTimeTransitionTime
    inline void SetStandardTimeTransitionTime(_TimeZoneTransitionTime* value); //Sets the value of the StandardTimeTransitionTime property

    /*
    Property Year
    */
    inline int Year() const; //Returns the value of Year
    inline void SetYear(int value); //Sets the value of the Year property

    /*
    Method Assign
    */
    inline void Assign(esriSystem::IClone* src);

    /*
    Method Clone
    */
    inline esriSystem::IClone* Clone();

    /*
    Method ConvertToSupportedObject
    */
    inline QVariant ConvertToSupportedObject(esriSystem::esriArcGISVersion docVersion);

    /*
    Method Deserialize
    */
    inline void Deserialize(esriSystem::IXMLSerializeData* data);

    /*
    Method GetSizeMax
    */
    inline void GetSizeMax(_ULARGE_INTEGER*& pcbSize);

    /*
    Method IsDirty
    */
    inline void IsDirty();

    /*
    Method IsEqual
    */
    inline bool IsEqual(esriSystem::IClone* other);

    /*
    Method IsIdentical
    */
    inline bool IsIdentical(esriSystem::IClone* other);

    /*
    Method IsSupportedAtVersion
    */
    inline bool IsSupportedAtVersion(esriSystem::esriArcGISVersion docVersion);

    /*
    Method Load
    */
    inline void Load(esriSystem::IStream* pstm);

    /*
    Method Save
    */
    inline void Save(esriSystem::IStream* pstm, int fClearDirty);

    /*
    Method Serialize
    */
    inline void Serialize(esriSystem::IXMLSerializeData* data);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT TimeZoneInfo : public QAxObject
{
public:
    TimeZoneInfo(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{78fad5f1-60fa-458a-8d93-630da920448d}");
    }

    TimeZoneInfo(ITimeZoneInfo *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    TimeZoneInfo(IXMLSerialize *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    TimeZoneInfo(IXMLVersionSupport *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    TimeZoneInfo(IClone *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    TimeZoneInfo(IPersistStream *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    TimeZoneInfo(IDocumentVersionSupportGEN *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property CustomDescription
    */
    inline QString CustomDescription() const; //Returns the value of CustomDescription
    inline void SetCustomDescription(const QString& value); //Sets the value of the CustomDescription property

    /*
    Property DaylightTimeName
    */
    inline QString DaylightTimeName() const; //Returns the value of DaylightTimeName
    inline void SetDaylightTimeName(const QString& value); //Sets the value of the DaylightTimeName property

    /*
    Property DefaultRule
    */
    inline esriSystem::ITimeZoneRule* DefaultRule() const; //Returns the value of DefaultRule
    inline void SetDefaultRule(esriSystem::ITimeZoneRule* value); //Sets the value of the DefaultRule property

    /*
    Property DisplayName
    */
    inline QString DisplayName() const; //Returns the value of DisplayName
    inline void SetDisplayName(const QString& value); //Sets the value of the DisplayName property

    /*
    Property DynamicRulesCount
    */
    inline int DynamicRulesCount() const; //Returns the value of DynamicRulesCount

    /*
    Property FirstDynamicRuleYear
    */
    inline int FirstDynamicRuleYear() const; //Returns the value of FirstDynamicRuleYear

    /*
    Property LastDynamicRuleYear
    */
    inline int LastDynamicRuleYear() const; //Returns the value of LastDynamicRuleYear

    /*
    Property MinNamespaceSupported
    */
    inline QString MinNamespaceSupported() const; //Returns the value of MinNamespaceSupported

    /*
    Property StandardTimeName
    */
    inline QString StandardTimeName() const; //Returns the value of StandardTimeName
    inline void SetStandardTimeName(const QString& value); //Sets the value of the StandardTimeName property

    /*
    Property WindowsID
    */
    inline QString WindowsID() const; //Returns the value of WindowsID
    inline void SetWindowsID(const QString& value); //Sets the value of the WindowsID property

    /*
    Method AddDynamicRule
    */
    inline void AddDynamicRule(esriSystem::ITimeZoneRule* DynamicRule);

    /*
    Method Assign
    */
    inline void Assign(esriSystem::IClone* src);

    /*
    Method Clone
    */
    inline esriSystem::IClone* Clone();

    /*
    Method ConvertToSupportedObject
    */
    inline QVariant ConvertToSupportedObject(esriSystem::esriArcGISVersion docVersion);

    /*
    Method Deserialize
    */
    inline void Deserialize(esriSystem::IXMLSerializeData* data);

    /*
    Method DynamicRule
    */
    inline esriSystem::ITimeZoneRule* DynamicRule(int Year);

    /*
    Method GetSizeMax
    */
    inline void GetSizeMax(_ULARGE_INTEGER*& pcbSize);

    /*
    Method IsDirty
    */
    inline void IsDirty();

    /*
    Method IsEqual
    */
    inline bool IsEqual(esriSystem::IClone* other);

    /*
    Method IsIdentical
    */
    inline bool IsIdentical(esriSystem::IClone* other);

    /*
    Method IsSupportedAtVersion
    */
    inline bool IsSupportedAtVersion(esriSystem::esriArcGISVersion docVersion);

    /*
    Method Load
    */
    inline void Load(esriSystem::IStream* pstm);

    /*
    Method NextDynamicRuleYear
    */
    inline int NextDynamicRuleYear(int currentDynamicRuleYear);

    /*
    Method Save
    */
    inline void Save(esriSystem::IStream* pstm, int fClearDirty);

    /*
    Method Serialize
    */
    inline void Serialize(esriSystem::IXMLSerializeData* data);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT LocaleInfo : public QAxObject
{
public:
    LocaleInfo(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{1cb5f59d-fd41-4695-9f48-fae4675dbf3c}");
    }

    LocaleInfo(ILocaleInfo *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    LocaleInfo(IXMLSerialize *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    LocaleInfo(IXMLVersionSupport *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    LocaleInfo(IClone *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    LocaleInfo(IPersistStream *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    LocaleInfo(IDocumentVersionSupportGEN *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property CountryID
    */
    inline int CountryID() const; //Returns the value of CountryID
    inline void SetCountryID(int value); //Sets the value of the CountryID property

    /*
    Property CountryName
    */
    inline QString CountryName() const; //Returns the value of CountryName
    inline void SetCountryName(const QString& value); //Sets the value of the CountryName property

    /*
    Property DisplayName
    */
    inline QString DisplayName() const; //Returns the value of DisplayName
    inline void SetDisplayName(const QString& value); //Sets the value of the DisplayName property

    /*
    Property LanguageID
    */
    inline int LanguageID() const; //Returns the value of LanguageID
    inline void SetLanguageID(int value); //Sets the value of the LanguageID property

    /*
    Property LanguageName
    */
    inline QString LanguageName() const; //Returns the value of LanguageName
    inline void SetLanguageName(const QString& value); //Sets the value of the LanguageName property

    /*
    Property LocaleID
    */
    inline int LocaleID() const; //Returns the value of LocaleID
    inline void SetLocaleID(int value); //Sets the value of the LocaleID property

    /*
    Property LocalizedCountryName
    */
    inline QString LocalizedCountryName() const; //Returns the value of LocalizedCountryName
    inline void SetLocalizedCountryName(const QString& value); //Sets the value of the LocalizedCountryName property

    /*
    Property LocalizedDisplayName
    */
    inline QString LocalizedDisplayName() const; //Returns the value of LocalizedDisplayName
    inline void SetLocalizedDisplayName(const QString& value); //Sets the value of the LocalizedDisplayName property

    /*
    Property LocalizedLanguageName
    */
    inline QString LocalizedLanguageName() const; //Returns the value of LocalizedLanguageName
    inline void SetLocalizedLanguageName(const QString& value); //Sets the value of the LocalizedLanguageName property

    /*
    Property MinNamespaceSupported
    */
    inline QString MinNamespaceSupported() const; //Returns the value of MinNamespaceSupported

    /*
    Property NativeCountryName
    */
    inline QString NativeCountryName() const; //Returns the value of NativeCountryName
    inline void SetNativeCountryName(const QString& value); //Sets the value of the NativeCountryName property

    /*
    Property NativeLanguageName
    */
    inline QString NativeLanguageName() const; //Returns the value of NativeLanguageName
    inline void SetNativeLanguageName(const QString& value); //Sets the value of the NativeLanguageName property

    /*
    Method Assign
    */
    inline void Assign(esriSystem::IClone* src);

    /*
    Method Clone
    */
    inline esriSystem::IClone* Clone();

    /*
    Method ConvertToSupportedObject
    */
    inline QVariant ConvertToSupportedObject(esriSystem::esriArcGISVersion docVersion);

    /*
    Method Deserialize
    */
    inline void Deserialize(esriSystem::IXMLSerializeData* data);

    /*
    Method GetSizeMax
    */
    inline void GetSizeMax(_ULARGE_INTEGER*& pcbSize);

    /*
    Method IsDirty
    */
    inline void IsDirty();

    /*
    Method IsEqual
    */
    inline bool IsEqual(esriSystem::IClone* other);

    /*
    Method IsIdentical
    */
    inline bool IsIdentical(esriSystem::IClone* other);

    /*
    Method IsSupportedAtVersion
    */
    inline bool IsSupportedAtVersion(esriSystem::esriArcGISVersion docVersion);

    /*
    Method Load
    */
    inline void Load(esriSystem::IStream* pstm);

    /*
    Method Save
    */
    inline void Save(esriSystem::IStream* pstm, int fClearDirty);

    /*
    Method Serialize
    */
    inline void Serialize(esriSystem::IXMLSerializeData* data);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT TimeReference : public QAxObject
{
public:
    TimeReference(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{efb2e7db-78f4-4e24-b01f-4f9c7ab800c5}");
    }

    TimeReference(ITimeReference *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    TimeReference(IXMLSerialize *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    TimeReference(IXMLVersionSupport *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    TimeReference(IClone *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    TimeReference(IPersistStream *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    TimeReference(IDocumentVersionSupportGEN *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property MinNamespaceSupported
    */
    inline QString MinNamespaceSupported() const; //Returns the value of MinNamespaceSupported

    /*
    Property RespectsDaylightSavingTime
    */
    inline bool RespectsDaylightSavingTime() const; //Returns the value of RespectsDaylightSavingTime
    inline void SetRespectsDaylightSavingTime(bool value); //Sets the value of the RespectsDaylightSavingTime property

    /*
    Property RespectsDynamicAdjustmentRules
    */
    inline bool RespectsDynamicAdjustmentRules() const; //Returns the value of RespectsDynamicAdjustmentRules
    inline void SetRespectsDynamicAdjustmentRules(bool value); //Sets the value of the RespectsDynamicAdjustmentRules property

    /*
    Property TimeZoneInfo
    */
    inline esriSystem::ITimeZoneInfo* TimeZoneInfo() const; //Returns the value of TimeZoneInfo
    inline void SetTimeZoneInfo(esriSystem::ITimeZoneInfo* value); //Sets the value of the TimeZoneInfo property

    /*
    Method Assign
    */
    inline void Assign(esriSystem::IClone* src);

    /*
    Method Clone
    */
    inline esriSystem::IClone* Clone();

    /*
    Method ConvertToSupportedObject
    */
    inline QVariant ConvertToSupportedObject(esriSystem::esriArcGISVersion docVersion);

    /*
    Method Deserialize
    */
    inline void Deserialize(esriSystem::IXMLSerializeData* data);

    /*
    Method GetSizeMax
    */
    inline void GetSizeMax(_ULARGE_INTEGER*& pcbSize);

    /*
    Method IsDirty
    */
    inline void IsDirty();

    /*
    Method IsEqual
    */
    inline bool IsEqual(esriSystem::IClone* other);

    /*
    Method IsIdentical
    */
    inline bool IsIdentical(esriSystem::IClone* other);

    /*
    Method IsSupportedAtVersion
    */
    inline bool IsSupportedAtVersion(esriSystem::esriArcGISVersion docVersion);

    /*
    Method Load
    */
    inline void Load(esriSystem::IStream* pstm);

    /*
    Method Project
    */
    inline void Project(esriSystem::ITime* Time, esriSystem::ITimeReference* otherTimeReference);

    /*
    Method ProjectFromUTC
    */
    inline void ProjectFromUTC(esriSystem::ITime* Time);

    /*
    Method ProjectToUTC
    */
    inline void ProjectToUTC(esriSystem::ITime* Time);

    /*
    Method Save
    */
    inline void Save(esriSystem::IStream* pstm, int fClearDirty);

    /*
    Method Serialize
    */
    inline void Serialize(esriSystem::IXMLSerializeData* data);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT TimeZoneFactory : public QAxObject
{
public:
    TimeZoneFactory(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{c559680f-9fae-4967-938a-33548bc5eba0}");
    }

    TimeZoneFactory(ITimeZoneFactory *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    TimeZoneFactory(ITimeZoneFactory2 *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property FirstLocaleID
    */
    inline int FirstLocaleID() const; //Returns the value of FirstLocaleID

    /*
    Property FirstTimeZoneWindowsID
    */
    inline QString FirstTimeZoneWindowsID() const; //Returns the value of FirstTimeZoneWindowsID

    /*
    Method CreateLocaleInfoFromLocaleID
    */
    inline esriSystem::ILocaleInfo* CreateLocaleInfoFromLocaleID(int LocaleID);

    /*
    Method CreateTimeReferenceFromWindowsID
    */
    inline esriSystem::ITimeReference* CreateTimeReferenceFromWindowsID(const QString& WindowsID);

    /*
    Method CreateTimeZoneInfoFromWindowsID
    */
    inline esriSystem::ITimeZoneInfo* CreateTimeZoneInfoFromWindowsID(const QString& WindowsID);

    /*
    Method IsValidLocaleID
    */
    inline bool IsValidLocaleID(int LocaleID);

    /*
    Method IsValidTimeZoneWindowsID
    */
    inline bool IsValidTimeZoneWindowsID(const QString& WindowsID);

    /*
    Method NextLocaleID
    */
    inline int NextLocaleID(int currenteLocaleID);

    /*
    Method NextTimeZoneWindowsID
    */
    inline QString NextTimeZoneWindowsID(const QString& currentTimeZoneWindowsID);

    /*
    Method QueryLocalTimeReference
    */
    inline esriSystem::ITimeReference* QueryLocalTimeReference(bool exactMatch);

    /*
    Method QueryLocalTimeZoneWindowsID
    */
    inline QString QueryLocalTimeZoneWindowsID();

    /*
    Method QueryTimeZoneOlsonIDsFromWindowsID
    */
    inline QStringList QueryTimeZoneOlsonIDsFromWindowsID(const QString& WindowsID);

    /*
    Method QueryTimeZoneWindowsIDFromOlsonID
    */
    inline QString QueryTimeZoneWindowsIDFromOlsonID(const QString& olsonID);

    /*
    Method ReloadTimeZones
    */
    inline void ReloadTimeZones(const QString& FileName);

    /*
    Method SaveTimeZones
    */
    inline void SaveTimeZones(const QString& FileName);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT CoRESTResource : public QAxObject
{
public:
    CoRESTResource(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{c5f365f0-9ac8-4872-afd0-e9383aff0f2e}");
    }

    CoRESTResource(IRESTResource *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property IsCollection
    */
    inline bool IsCollection() const; //Returns the value of IsCollection
    inline void SetIsCollection(bool value); //Sets the value of the IsCollection property

    /*
    Property IsDefaultCollection
    */
    inline bool IsDefaultCollection() const; //Returns the value of IsDefaultCollection
    inline void SetIsDefaultCollection(bool value); //Sets the value of the IsDefaultCollection property

    /*
    Property IsStatic
    */
    inline bool IsStatic() const; //Returns the value of IsStatic
    inline void SetIsStatic(bool value); //Sets the value of the IsStatic property

    /*
    Property Name
    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property RequiredCapability
    */
    inline QString RequiredCapability() const; //Returns the value of RequiredCapability
    inline void SetRequiredCapability(const QString& value); //Sets the value of the RequiredCapability property

    /*
    Property SupportsETag
    */
    inline bool SupportsETag() const; //Returns the value of SupportsETag
    inline void SetSupportsETag(bool value); //Sets the value of the SupportsETag property

    /*
    Method AddOperation
    */
    inline void AddOperation(esriSystem::IRESTOperation* o);

    /*
    Method AddResource
    */
    inline void AddResource(esriSystem::IRESTResource* r);

    /*
    Method FindChildOperation
    */
    inline esriSystem::IRESTOperation* FindChildOperation(const QString& Name);

    /*
    Method FindChildResource
    */
    inline esriSystem::IRESTResource* FindChildResource(const QString& Name);

    /*
    Method GetOperations
    */
    inline esriSystem::IEnumRESTOperation* GetOperations();

    /*
    Method GetResources
    */
    inline esriSystem::IEnumRESTResource* GetResources();

    /*
    Method ToJSONObject
    */
    inline esriSystem::IJSONObject* ToJSONObject();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT CoRESTOperation : public QAxObject
{
public:
    CoRESTOperation(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{fda271d6-59e0-40ec-97f2-0ce6a392f12c}");
    }

    CoRESTOperation(IRESTOperation *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Name
    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property OutputFormats
    */
    inline QString OutputFormats() const; //Returns the value of OutputFormats
    inline void SetOutputFormats(const QString& value); //Sets the value of the OutputFormats property

    /*
    Property Parameters
    */
    inline QString Parameters() const; //Returns the value of Parameters
    inline void SetParameters(const QString& value); //Sets the value of the Parameters property

    /*
    Property PostOnly
    */
    inline bool PostOnly() const; //Returns the value of PostOnly
    inline void SetPostOnly(bool value); //Sets the value of the PostOnly property

    /*
    Property RequiredCapability
    */
    inline QString RequiredCapability() const; //Returns the value of RequiredCapability
    inline void SetRequiredCapability(const QString& value); //Sets the value of the RequiredCapability property

    /*
    Method ToJSONObject
    */
    inline esriSystem::IJSONObject* ToJSONObject();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT CoRESTDispatcher : public QAxObject
{
public:
    CoRESTDispatcher(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{0d52fcd9-6647-432c-b15b-b141ab0a349f}");
    }

    CoRESTDispatcher(IRESTDispatcher *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Method Init
    */
    inline void Init(esriSystem::IRESTResource* root, esriSystem::IRESTCallback* handler);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT ProxyServerInfo : public QAxObject
{
public:
    ProxyServerInfo(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{f36507f2-7ef4-4119-a449-81998de36ad1}");
    }

    ProxyServerInfo(IProxyServerInfo *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    ProxyServerInfo(IProxyServerInfo2 *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property CredentialsCancelled
    */
    inline bool CredentialsCancelled() const; //Returns the value of CredentialsCancelled
    inline void SetCredentialsCancelled(bool value); //Sets the value of the CredentialsCancelled property

    /*
    Property Enabled
    */
    inline bool Enabled() const; //Returns the value of Enabled
    inline void SetEnabled(bool value); //Sets the value of the Enabled property

    /*
    Property Password
    */
    inline QString Password() const; //Returns the value of Password
    inline void SetPassword(const QString& value); //Sets the value of the Password property

    /*
    Property ProxyServer
    */
    inline QString ProxyServer() const; //Returns the value of ProxyServer
    inline void SetProxyServer(const QString& value); //Sets the value of the ProxyServer property

    /*
    Property UserName
    */
    inline QString UserName() const; //Returns the value of UserName
    inline void SetUserName(const QString& value); //Sets the value of the UserName property

    /*
    Method CacheProxyCredentials
    */
    inline void CacheProxyCredentials();

    /*
    Method ReadProxyServerInfo
    */
    inline void ReadProxyServerInfo();

    /*
    Method WriteProxyServerInfo
    */
    inline void WriteProxyServerInfo();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT SSLInfo : public QAxObject
{
public:
    SSLInfo(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{d5853dc9-d6a6-467a-9577-3357cccd786a}");
    }

    SSLInfo(ISSLInfo *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property CertPath
    */
    inline QString CertPath() const; //Returns the value of CertPath
    inline void SetCertPath(const QString& value); //Sets the value of the CertPath property

    /*
    Property VerifyPeer
    */
    inline bool VerifyPeer() const; //Returns the value of VerifyPeer
    inline void SetVerifyPeer(bool value); //Sets the value of the VerifyPeer property

    /*
    Method ReadSSLInfo
    */
    inline void ReadSSLInfo();

    /*
    Method WriteSSLInfo
    */
    inline void WriteSSLInfo();

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT Message : public QAxObject
{
public:
    Message(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{5fac2741-5ef9-47d8-afb5-5ee5e679143c}");
    }

    Message(IMessage *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    Message(ISupportErrorInfo *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property ErrorInfo
    */
    inline esriSystem::IErrorInfo* ErrorInfo() const; //Returns the value of ErrorInfo

    /*
    Property Name
    */
    inline QString Name() const; //Returns the value of Name
    inline void SetName(const QString& value); //Sets the value of the Name property

    /*
    Property NamespaceURI
    */
    inline QString NamespaceURI() const; //Returns the value of NamespaceURI
    inline void SetNamespaceURI(const QString& value); //Sets the value of the NamespaceURI property

    /*
    Property Parameters
    */
    inline esriSystem::IXMLSerializeData* Parameters() const; //Returns the value of Parameters

    /*
    Property Properties
    */
    inline esriSystem::IPropertySet* Properties() const; //Returns the value of Properties
    inline void SetProperties(esriSystem::IPropertySet* value); //Sets the value of the Properties property

    /*
    Property Result
    */
    inline int Result() const; //Returns the value of Result

    /*
    Method InterfaceSupportsErrorInfo
    */
    inline void InterfaceSupportsErrorInfo(GUID* riid);

    /*
    Method ReadXML
    */
    inline void ReadXML(esriSystem::IStream* Stream);

    /*
    Method SetError
    */
    inline void SetError(int hresult, esriSystem::IErrorInfo* pErrorInfo);

    /*
    Method WriteXML
    */
    inline void WriteXML(esriSystem::IStream* Stream);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT ZipArchive : public QAxObject
{
public:
    ZipArchive(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{3c1841db-3625-464f-b216-41811a7e8a6c}");
    }

    ZipArchive(IZipArchive *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Method AddFile
    */
    inline void AddFile(const QString& inputFile);

    /*
    Method CloseArchive
    */
    inline void CloseArchive();

    /*
    Method CreateArchive
    */
    inline void CreateArchive(const QString& archiveName);

    /*
    Method Extract
    */
    inline void Extract(const QString& outputDir);

    /*
    Method ExtractFile
    */
    inline void ExtractFile(const QString& file, const QString& outputDir);

    /*
    Method GetFileNames
    */
    inline esriSystem::IEnumBSTR* GetFileNames();

    /*
    Method OpenArchive
    */
    inline void OpenArchive(const QString& archiveName);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT JobMessage : public QAxObject
{
public:
    JobMessage(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{512e6a8a-3c50-4dec-b681-7254fede4109}");
    }

    JobMessage(IJobMessage *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    JobMessage(IXMLSerialize *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    JobMessage(IPersistStream *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Description
    */
    inline QString Description() const; //Returns the value of Description
    inline void SetDescription(const QString& value); //Sets the value of the Description property

    /*
    Property MessageType
    */
    inline esriSystem::esriJobMessageType MessageType() const; //Returns the value of MessageType
    inline void SetMessageType(esriSystem::esriJobMessageType value); //Sets the value of the MessageType property

    /*
    Method Deserialize
    */
    inline void Deserialize(esriSystem::IXMLSerializeData* data);

    /*
    Method GetSizeMax
    */
    inline void GetSizeMax(_ULARGE_INTEGER*& pcbSize);

    /*
    Method IsDirty
    */
    inline void IsDirty();

    /*
    Method Load
    */
    inline void Load(esriSystem::IStream* pstm);

    /*
    Method Save
    */
    inline void Save(esriSystem::IStream* pstm, int fClearDirty);

    /*
    Method Serialize
    */
    inline void Serialize(esriSystem::IXMLSerializeData* data);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT JobMessages : public QAxObject
{
public:
    JobMessages(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{f3a6825c-9780-4265-89a1-ae35f7a3bb56}");
    }

    JobMessages(IJobMessages *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    JobMessages(IXMLSerialize *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    JobMessages(IPersistStream *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property Count
    */
    inline int Count() const; //Returns the value of Count

    /*
    Method Add
    */
    inline void Add(esriSystem::IJobMessage* pMsg);

    /*
    Method Deserialize
    */
    inline void Deserialize(esriSystem::IXMLSerializeData* data);

    /*
    Method Element
    */
    inline esriSystem::IJobMessage* Element(int index);

    /*
    Method GetSizeMax
    */
    inline void GetSizeMax(_ULARGE_INTEGER*& pcbSize);

    /*
    Method Insert
    */
    inline void Insert(int index, esriSystem::IJobMessage* pMsg);

    /*
    Method IsDirty
    */
    inline void IsDirty();

    /*
    Method Load
    */
    inline void Load(esriSystem::IStream* pstm);

    /*
    Method Remove
    */
    inline void Remove(int index);

    /*
    Method RemoveAll
    */
    inline void RemoveAll();

    /*
    Method Save
    */
    inline void Save(esriSystem::IStream* pstm, int fClearDirty);

    /*
    Method Serialize
    */
    inline void Serialize(esriSystem::IXMLSerializeData* data);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

class ESRISYSTEM_EXPORT ESRIScriptEngine : public QAxObject
{
public:
    ESRIScriptEngine(QObject *parent = 0)
    : QAxObject(parent)
    {
        setControl("{8c82d73f-a962-43f7-a377-26557c3143df}");
    }

    ESRIScriptEngine(IESRIScriptEngine *iface)
    : QAxObject()
    {
        initializeFrom(iface);
        delete iface;
    }

    /*
    Property AllowUI
    */
    inline bool AllowUI() const; //Returns the value of AllowUI
    inline void SetAllowUI(bool value); //Sets the value of the AllowUI property

    /*
    Property Language
    */
    inline QString Language() const; //Returns the value of Language
    inline void SetLanguage(const QString& value); //Sets the value of the Language property

    /*
    Method AddCode
    */
    inline void AddCode(const QString& scriptCode);

    /*
    Method Error
    */
    inline HRESULT Error(int& pLineNumber, int& pCharacterPosition, QString& pErrorSourceCode, QString& pErrorDescription);

    /*
    Method Run
    */
    inline QVariant Run(const QString& procedureName, QList<QString&>* pParameters);

// meta object functions
    static const QMetaObject staticMetaObject;
    virtual const QMetaObject *metaObject() const { return &staticMetaObject; }
    virtual void *qt_metacast(const char *);
};

// member function implementation
#ifndef QAX_DUMPCPP_ESRISYSTEM_NOINLINES
inline int IUID::SubType() const
{
    QVariant qax_result = property("SubType");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void IUID::SetSubType(int value){ setProperty("SubType", QVariant(value)); }

inline QVariant IUID::Value() const
{
    QVariant qax_result = property("Value");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void IUID::SetValue(const QVariant& value){ setProperty("Value", QVariant(value)); }

inline bool IUID::Compare(esriSystem::IUID* otherID)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&otherID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline void IUID::Generate()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}


inline int InputDeviceManager::DeviceCount() const
{
    QVariant qax_result = property("DeviceCount");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline void InputDeviceManager::AddDevice(esriSystem::IUID* pDeviceCLSID, QVariant& initializationData)
{
    void *_a[] = {0, (void*)&pDeviceCLSID, (void*)&initializationData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline esriSystem::IExtension* InputDeviceManager::Device(int index)
{
    esriSystem::IExtension* qax_result = 0;
    qRegisterMetaType<esriSystem::IExtension*>("IExtension*", &qax_result);
    qRegisterMetaType<esriSystem::IExtension>("IExtension", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline esriSystem::IUID* InputDeviceManager::DeviceCLSID(int index)
{
    esriSystem::IUID* qax_result = 0;
    qRegisterMetaType<esriSystem::IUID*>("IUID*", &qax_result);
    qRegisterMetaType<esriSystem::IUID>("IUID", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline esriSystem::IExtension* InputDeviceManager::FindDevice(const QVariant& nameOrID)
{
    esriSystem::IExtension* qax_result = 0;
    qRegisterMetaType<esriSystem::IExtension*>("IExtension*", &qax_result);
    qRegisterMetaType<esriSystem::IExtension>("IExtension", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&nameOrID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void InputDeviceManager::ShutdownDevices()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void InputDeviceManager::StartupDevices(QVariant& initializationData)
{
    void *_a[] = {0, (void*)&initializationData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}


inline int Set::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline void Set::Add(IUnknown* unk)
{
    void *_a[] = {0, (void*)&unk};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline bool Set::Find(IUnknown* unk)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&unk};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline IUnknown* Set::Next()
{
    IUnknown* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline void Set::Remove(IUnknown* unk)
{
    void *_a[] = {0, (void*)&unk};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void Set::RemoveAll()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void Set::Reset()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}


inline int Array::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline void Array::Add(IUnknown* unk)
{
    void *_a[] = {0, (void*)&unk};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void Array::Deserialize(esriSystem::IXMLSerializeData* data)
{
    void *_a[] = {0, (void*)&data};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline IUnknown* Array::Element(int index)
{
    IUnknown* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline void Array::Insert(int index, IUnknown* unk)
{
    void *_a[] = {0, (void*)&index, (void*)&unk};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void Array::Remove(int index)
{
    void *_a[] = {0, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void Array::RemoveAll()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void Array::Replace(int index, IUnknown* unk)
{
    void *_a[] = {0, (void*)&index, (void*)&unk};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void Array::Serialize(esriSystem::IXMLSerializeData* data)
{
    void *_a[] = {0, (void*)&data};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}


inline esriSystem::esriArcGISVersion ObjectStream::DocumentVersion() const
{
    QVariant qax_result = property("DocumentVersion");
    Q_ASSERT(qax_result.isValid());
    return *(esriSystem::esriArcGISVersion*)qax_result.constData();
}

inline esriSystem::IStream* ObjectStream::Stream() const
{
    esriSystem::IStream* qax_pointer = 0;
    qRegisterMetaType<esriSystem::IStream*>("IStream*", &qax_pointer);
    qRegisterMetaType<esriSystem::IStream>("IStream", qax_pointer);
    QVariant qax_result = property("Stream");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(esriSystem::IStream**)qax_result.constData();
}

inline QString ObjectStream::Version() const
{
    QVariant qax_result = property("Version");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline IUnknown* ObjectStream::LoadObject(GUID* riid, IUnknown* pUnkOuter)
{
    IUnknown* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&riid, (void*)&pUnkOuter};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void ObjectStream::ReplaceObject(IUnknown* unknown)
{
    void *_a[] = {0, (void*)&unknown};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void ObjectStream::SaveObject(IUnknown* pUnk)
{
    void *_a[] = {0, (void*)&pUnk};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void ObjectStream::SetDocumentVersion(esriSystem::esriArcGISVersion DocumentVersion)
{
    void *_a[] = {0, (void*)&DocumentVersion};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void ObjectStream::SetStream(esriSystem::IStream* Stream)
{
    void *_a[] = {0, (void*)&Stream};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void ObjectStream::SetVersion(const QString& Version)
{
    void *_a[] = {0, (void*)&Version};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}


inline esriSystem::IStream* ByteSwapStreamIO::Stream() const
{
    esriSystem::IStream* qax_pointer = 0;
    qRegisterMetaType<esriSystem::IStream*>("IStream*", &qax_pointer);
    qRegisterMetaType<esriSystem::IStream>("IStream", qax_pointer);
    QVariant qax_result = property("Stream");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(esriSystem::IStream**)qax_result.constData();
}

inline void ByteSwapStreamIO::Read(esriSystem::esriByteSwapDataType dataType, void*& pv, uint cb, uint& pcbRead)
{
    void *_a[] = {0, (void*)&dataType, (void*)&pv, (void*)&cb, (void*)&pcbRead};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void ByteSwapStreamIO::SetStream(esriSystem::IStream* Stream)
{
    void *_a[] = {0, (void*)&Stream};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void ByteSwapStreamIO::Write(esriSystem::esriByteSwapDataType dataType, void* pv, uint cb, uint& pcbWritten)
{
    void *_a[] = {0, (void*)&dataType, (void*)&pv, (void*)&cb, (void*)&pcbWritten};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}


inline esriSystem::esriArcGISVersion VariantStreamIO::DocumentVersion() const
{
    QVariant qax_result = property("DocumentVersion");
    Q_ASSERT(qax_result.isValid());
    return *(esriSystem::esriArcGISVersion*)qax_result.constData();
}

inline esriSystem::IStream* VariantStreamIO::Stream() const
{
    esriSystem::IStream* qax_pointer = 0;
    qRegisterMetaType<esriSystem::IStream*>("IStream*", &qax_pointer);
    qRegisterMetaType<esriSystem::IStream>("IStream", qax_pointer);
    QVariant qax_result = property("Stream");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(esriSystem::IStream**)qax_result.constData();
}
inline void VariantStreamIO::SetStream(esriSystem::IStream* value){
    int typeId = qRegisterMetaType<esriSystem::IStream*>("esriSystem::IStream*", &value);
    setProperty("Stream", QVariant(typeId, &value));
}

inline QVariant VariantStreamIO::Read()
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void VariantStreamIO::SetDocumentVersion(esriSystem::esriArcGISVersion DocumentVersion)
{
    void *_a[] = {0, (void*)&DocumentVersion};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void VariantStreamIO::Write(const QVariant& Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}


inline int UID::SubType() const
{
    QVariant qax_result = property("SubType");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void UID::SetSubType(int value){ setProperty("SubType", QVariant(value)); }

inline QVariant UID::Value() const
{
    QVariant qax_result = property("Value");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}
inline void UID::SetValue(const QVariant& value){ setProperty("Value", QVariant(value)); }

inline bool UID::Compare(esriSystem::IUID* otherID)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&otherID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline void UID::Deserialize(esriSystem::IXMLSerializeData* data)
{
    void *_a[] = {0, (void*)&data};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void UID::Generate()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void UID::GetClassID(GUID*& pClassID)
{
    void *_a[] = {0, (void*)&pClassID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void UID::GetSizeMax(_ULARGE_INTEGER*& pcbSize)
{
    void *_a[] = {0, (void*)&pcbSize};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void UID::IsDirty()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void UID::Load(esriSystem::IStream* pstm)
{
    void *_a[] = {0, (void*)&pstm};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void UID::Save(esriSystem::IStream* pstm, int fClearDirty)
{
    void *_a[] = {0, (void*)&pstm, (void*)&fClearDirty};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void UID::Serialize(esriSystem::IXMLSerializeData* data)
{
    void *_a[] = {0, (void*)&data};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}


inline void ComponentCategoryManager::Create(const QString& Name, esriSystem::IUID* category)
{
    void *_a[] = {0, (void*)&Name, (void*)&category};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline esriSystem::IEnumUID* ComponentCategoryManager::GetComponentsInCategory(esriSystem::IUID* pCategoryID)
{
    esriSystem::IEnumUID* qax_result = 0;
    qRegisterMetaType<esriSystem::IEnumUID*>("IEnumUID*", &qax_result);
    qRegisterMetaType<esriSystem::IEnumUID>("IEnumUID", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&pCategoryID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void ComponentCategoryManager::Setup(const QString& pathname, esriSystem::IUID* objectType, esriSystem::IUID* category, bool install)
{
    void *_a[] = {0, (void*)&pathname, (void*)&objectType, (void*)&category, (void*)&install};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void ComponentCategoryManager::SetupObject(const QString& pathname, esriSystem::IUID* obj, esriSystem::IUID* category, bool install)
{
    void *_a[] = {0, (void*)&pathname, (void*)&obj, (void*)&category, (void*)&install};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}


inline esriSystem::IUID* CategoryFactory::CategoryID() const
{
    esriSystem::IUID* qax_pointer = 0;
    qRegisterMetaType<esriSystem::IUID*>("IUID*", &qax_pointer);
    qRegisterMetaType<esriSystem::IUID>("IUID", qax_pointer);
    QVariant qax_result = property("CategoryID");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(esriSystem::IUID**)qax_result.constData();
}
inline void CategoryFactory::SetCategoryID(esriSystem::IUID* value){
    int typeId = qRegisterMetaType<esriSystem::IUID*>("esriSystem::IUID*", &value);
    setProperty("CategoryID", QVariant(typeId, &value));
}

inline IUnknown* CategoryFactory::CreateNext()
{
    IUnknown* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}


inline int BaseStatistics::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int BaseStatistics::FrequencyIntervalCount() const
{
    QVariant qax_result = property("FrequencyIntervalCount");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void BaseStatistics::SetFrequencyIntervalCount(int value){ setProperty("FrequencyIntervalCount", QVariant(value)); }

inline double BaseStatistics::FrequencyIntervalSize() const
{
    QVariant qax_result = property("FrequencyIntervalSize");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}

inline double BaseStatistics::Maximum() const
{
    QVariant qax_result = property("Maximum");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}

inline double BaseStatistics::Mean() const
{
    QVariant qax_result = property("Mean");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}

inline double BaseStatistics::Minimum() const
{
    QVariant qax_result = property("Minimum");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}

inline bool BaseStatistics::Sample() const
{
    QVariant qax_result = property("Sample");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void BaseStatistics::SetSample(bool value){ setProperty("Sample", QVariant(value)); }

inline bool BaseStatistics::SimpleStats() const
{
    QVariant qax_result = property("SimpleStats");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void BaseStatistics::SetSimpleStats(bool value){ setProperty("SimpleStats", QVariant(value)); }

inline double BaseStatistics::StandardDeviation() const
{
    QVariant qax_result = property("StandardDeviation");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}

inline double BaseStatistics::Sum() const
{
    QVariant qax_result = property("Sum");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}

inline void BaseStatistics::AddValue(double Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void BaseStatistics::ComputeAutoFrequencyIntervals()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void BaseStatistics::FinalCompute()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline int BaseStatistics::FrequencyClassCount(int intervalIndex)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&intervalIndex};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void BaseStatistics::Reset(bool SimpleStats)
{
    void *_a[] = {0, (void*)&SimpleStats};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}


inline esriSystem::esriArcGISVersion FileStream::DocumentVersion() const
{
    QVariant qax_result = property("DocumentVersion");
    Q_ASSERT(qax_result.isValid());
    return *(esriSystem::esriArcGISVersion*)qax_result.constData();
}

inline uint FileStream::Size() const
{
    QVariant qax_result = property("Size");
    Q_ASSERT(qax_result.isValid());
    return *(uint*)qax_result.constData();
}
inline void FileStream::SetSize(uint value){ setProperty("Size", QVariant(value)); }

inline void FileStream::LoadFromFile(const QString& FileName)
{
    void *_a[] = {0, (void*)&FileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void FileStream::Open(const QString& FileName, esriSystem::esriFilePermission permission)
{
    void *_a[] = {0, (void*)&FileName, (void*)&permission};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void FileStream::SaveToFile(const QString& FileName)
{
    void *_a[] = {0, (void*)&FileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void FileStream::SetDocumentVersion(esriSystem::esriArcGISVersion DocumentVersion)
{
    void *_a[] = {0, (void*)&DocumentVersion};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}


inline esriSystem::IName* NameFactory::Create(const QString& NameString)
{
    esriSystem::IName* qax_result = 0;
    qRegisterMetaType<esriSystem::IName*>("IName*", &qax_result);
    qRegisterMetaType<esriSystem::IName>("IName", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&NameString};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline QVariant NameFactory::PackageNames(esriSystem::IEnumName* names)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&names};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline esriSystem::IEnumName* NameFactory::UnpackageNames(QVariant& bytesArray)
{
    esriSystem::IEnumName* qax_result = 0;
    qRegisterMetaType<esriSystem::IEnumName*>("IEnumName*", &qax_result);
    qRegisterMetaType<esriSystem::IEnumName>("IEnumName", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&bytesArray};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}


inline QString FileName::NameString() const
{
    QVariant qax_result = property("NameString");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString FileName::Path() const
{
    QVariant qax_result = property("Path");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void FileName::GetSizeMax(_ULARGE_INTEGER*& pcbSize)
{
    void *_a[] = {0, (void*)&pcbSize};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void FileName::IsDirty()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void FileName::Load(esriSystem::IStream* pstm)
{
    void *_a[] = {0, (void*)&pstm};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline IUnknown* FileName::Open()
{
    IUnknown* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void FileName::Save(esriSystem::IStream* pstm, int fClearDirty)
{
    void *_a[] = {0, (void*)&pstm, (void*)&fClearDirty};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void FileName::SetNameString(const QString& NameString)
{
    void *_a[] = {0, (void*)&NameString};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void FileName::SetPath(const QString& Path)
{
    void *_a[] = {0, (void*)&Path};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}


inline uint MemoryBlobStream::AllocSize() const
{
    QVariant qax_result = property("AllocSize");
    Q_ASSERT(qax_result.isValid());
    return *(uint*)qax_result.constData();
}
inline void MemoryBlobStream::SetAllocSize(uint value){ setProperty("AllocSize", QVariant(value)); }

inline esriSystem::esriArcGISVersion MemoryBlobStream::DocumentVersion() const
{
    QVariant qax_result = property("DocumentVersion");
    Q_ASSERT(qax_result.isValid());
    return *(esriSystem::esriArcGISVersion*)qax_result.constData();
}

inline uint MemoryBlobStream::PaddingSize() const
{
    QVariant qax_result = property("PaddingSize");
    Q_ASSERT(qax_result.isValid());
    return *(uint*)qax_result.constData();
}
inline void MemoryBlobStream::SetPaddingSize(uint value){ setProperty("PaddingSize", QVariant(value)); }

inline void MemoryBlobStream::AttachToMemory(uint& blobMemory, uint Size, int transferOwnership)
{
    void *_a[] = {0, (void*)&blobMemory, (void*)&Size, (void*)&transferOwnership};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void MemoryBlobStream::ExportToVariant(QVariant& Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void MemoryBlobStream::ImportFromMemory(uint& blobMemory, uint Size)
{
    void *_a[] = {0, (void*)&blobMemory, (void*)&Size};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void MemoryBlobStream::ImportFromVariant(const QVariant& Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void MemoryBlobStream::InterfaceSupportsErrorInfo(GUID* riid)
{
    void *_a[] = {0, (void*)&riid};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline HRESULT MemoryBlobStream::Memory(uint** blobMemory, uint& Size)
{
    HRESULT qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&blobMemory, (void*)&Size};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline void MemoryBlobStream::SetDocumentVersion(esriSystem::esriArcGISVersion DocumentVersion)
{
    void *_a[] = {0, (void*)&DocumentVersion};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}


inline esriSystem::esriProductCode ESRILicenseInfo::DefaultProduct() const
{
    QVariant qax_result = property("DefaultProduct");
    Q_ASSERT(qax_result.isValid());
    return *(esriSystem::esriProductCode*)qax_result.constData();
}

inline bool ESRILicenseInfo::IsLicensed(esriSystem::esriProductCode ProductCode)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ProductCode};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}


inline int ExtensionManager::ExtensionCount() const
{
    QVariant qax_result = property("ExtensionCount");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int ExtensionManager::JITExtensionCount() const
{
    QVariant qax_result = property("JITExtensionCount");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline void ExtensionManager::AddExtension(esriSystem::IUID* ExtensionCLSID, QVariant& initializationData)
{
    void *_a[] = {0, (void*)&ExtensionCLSID, (void*)&initializationData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline esriSystem::IExtension* ExtensionManager::Extension(int index)
{
    esriSystem::IExtension* qax_result = 0;
    qRegisterMetaType<esriSystem::IExtension*>("IExtension*", &qax_result);
    qRegisterMetaType<esriSystem::IExtension>("IExtension", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline esriSystem::IUID* ExtensionManager::ExtensionCLSID(int index)
{
    esriSystem::IUID* qax_result = 0;
    qRegisterMetaType<esriSystem::IUID*>("IUID*", &qax_result);
    qRegisterMetaType<esriSystem::IUID>("IUID", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline esriSystem::IExtension* ExtensionManager::FindExtension(const QVariant& nameOrID)
{
    esriSystem::IExtension* qax_result = 0;
    qRegisterMetaType<esriSystem::IExtension*>("IExtension*", &qax_result);
    qRegisterMetaType<esriSystem::IExtension>("IExtension", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&nameOrID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void ExtensionManager::InsertExtension(esriSystem::IUID* pExtCLSID, esriSystem::IExtension* pExtension)
{
    void *_a[] = {0, (void*)&pExtCLSID, (void*)&pExtension};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void ExtensionManager::InterfaceSupportsErrorInfo(GUID* riid)
{
    void *_a[] = {0, (void*)&riid};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline bool ExtensionManager::IsExtensionEnabled(esriSystem::IUID* pExtCLSID)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pExtCLSID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline bool ExtensionManager::IsLoaded(esriSystem::IUID* pID)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline esriSystem::IUID* ExtensionManager::JITExtensionCLSID(int index)
{
    esriSystem::IUID* qax_result = 0;
    qRegisterMetaType<esriSystem::IUID*>("IUID*", &qax_result);
    qRegisterMetaType<esriSystem::IUID>("IUID", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline void ExtensionManager::RemoveExtension(esriSystem::IExtension* pExtension)
{
    void *_a[] = {0, (void*)&pExtension};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void ExtensionManager::ShutdownExtensions()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void ExtensionManager::StartupExtensions(esriSystem::IUID* componentCategory, esriSystem::IUID* jitCategory, QVariant& initializationData)
{
    void *_a[] = {0, (void*)&componentCategory, (void*)&jitCategory, (void*)&initializationData};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}


inline void FileNames::Add(const QString& FileName)
{
    void *_a[] = {0, (void*)&FileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline bool FileNames::Find(const QString& FileName)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&FileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline QString FileNames::GetContainedExtensions()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline esriSystem::IFileNames* FileNames::GetSubset(const QString& extSet)
{
    esriSystem::IFileNames* qax_result = 0;
    qRegisterMetaType<esriSystem::IFileNames*>("IFileNames*", &qax_result);
    qRegisterMetaType<esriSystem::IFileNames>("IFileNames", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&extSet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline bool FileNames::IsDirectory()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void FileNames::LoadFromPath(const QString& Path)
{
    void *_a[] = {0, (void*)&Path};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline QString FileNames::Next()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void FileNames::Remove()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void FileNames::Reset()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}


inline int PropertySet::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline void PropertySet::Assign(esriSystem::IClone* src)
{
    void *_a[] = {0, (void*)&src};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline esriSystem::IClone* PropertySet::Clone()
{
    esriSystem::IClone* qax_result = 0;
    qRegisterMetaType<esriSystem::IClone*>("IClone*", &qax_result);
    qRegisterMetaType<esriSystem::IClone>("IClone", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void PropertySet::Deserialize(esriSystem::IXMLSerializeData* data)
{
    void *_a[] = {0, (void*)&data};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void PropertySet::GetAllProperties(QVariant& names, QVariant& values)
{
    void *_a[] = {0, (void*)&names, (void*)&values};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void PropertySet::GetClassID(GUID*& pClassID)
{
    void *_a[] = {0, (void*)&pClassID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void PropertySet::GetProperties(const QVariant& names, QVariant& values)
{
    void *_a[] = {0, (void*)&names, (void*)&values};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline QVariant PropertySet::GetProperty(const QString& Name)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Name};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline void PropertySet::GetSizeMax(_ULARGE_INTEGER*& pcbSize)
{
    void *_a[] = {0, (void*)&pcbSize};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void PropertySet::IsDirty()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline bool PropertySet::IsEqual(esriSystem::IClone* other)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&other};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline bool PropertySet::IsEqual(esriSystem::IPropertySet* PropertySet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&PropertySet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline bool PropertySet::IsEqualNoCase(esriSystem::IPropertySet* PropertySet)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&PropertySet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline bool PropertySet::IsIdentical(esriSystem::IClone* other)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&other};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline void PropertySet::Load(esriSystem::IStream* pstm)
{
    void *_a[] = {0, (void*)&pstm};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void PropertySet::RemoveProperty(const QString& Name)
{
    void *_a[] = {0, (void*)&Name};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}

inline void PropertySet::Save(esriSystem::IStream* pstm, int fClearDirty)
{
    void *_a[] = {0, (void*)&pstm, (void*)&fClearDirty};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
}

inline void PropertySet::Serialize(esriSystem::IXMLSerializeData* data)
{
    void *_a[] = {0, (void*)&data};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
}

inline void PropertySet::SetProperties(const QVariant& names, const QVariant& values)
{
    void *_a[] = {0, (void*)&names, (void*)&values};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline void PropertySet::SetProperty(const QString& Name, const QVariant& Value)
{
    void *_a[] = {0, (void*)&Name, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
}


inline void EnvironmentManager::AddEnvironment(esriSystem::IUID* pGuid, IUnknown* pUnk)
{
    void *_a[] = {0, (void*)&pGuid, (void*)&pUnk};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline IUnknown* EnvironmentManager::GetEnvironment(esriSystem::IUID* pGuid)
{
    IUnknown* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&pGuid};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}


inline int DoubleArray::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline void DoubleArray::Add(double Element)
{
    void *_a[] = {0, (void*)&Element};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void DoubleArray::Deserialize(esriSystem::IXMLSerializeData* data)
{
    void *_a[] = {0, (void*)&data};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline double DoubleArray::Element(int index)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline void DoubleArray::GetClassID(GUID*& pClassID)
{
    void *_a[] = {0, (void*)&pClassID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void DoubleArray::GetSizeMax(_ULARGE_INTEGER*& pcbSize)
{
    void *_a[] = {0, (void*)&pcbSize};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void DoubleArray::Insert(int index, double Element)
{
    void *_a[] = {0, (void*)&index, (void*)&Element};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void DoubleArray::IsDirty()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void DoubleArray::Load(esriSystem::IStream* pstm)
{
    void *_a[] = {0, (void*)&pstm};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void DoubleArray::Remove(int index)
{
    void *_a[] = {0, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void DoubleArray::RemoveAll()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void DoubleArray::Save(esriSystem::IStream* pstm, int fClearDirty)
{
    void *_a[] = {0, (void*)&pstm, (void*)&fClearDirty};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void DoubleArray::Serialize(esriSystem::IXMLSerializeData* data)
{
    void *_a[] = {0, (void*)&data};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void DoubleArray::SetElement(int index, double pElement)
{
    void *_a[] = {0, (void*)&index, (void*)&pElement};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}


inline int LongArray::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline void LongArray::Add(int Element)
{
    void *_a[] = {0, (void*)&Element};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void LongArray::Deserialize(esriSystem::IXMLSerializeData* data)
{
    void *_a[] = {0, (void*)&data};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline int LongArray::Element(int index)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline void LongArray::GetClassID(GUID*& pClassID)
{
    void *_a[] = {0, (void*)&pClassID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void LongArray::GetSizeMax(_ULARGE_INTEGER*& pcbSize)
{
    void *_a[] = {0, (void*)&pcbSize};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void LongArray::Insert(int index, int Element)
{
    void *_a[] = {0, (void*)&index, (void*)&Element};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void LongArray::IsDirty()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void LongArray::Load(esriSystem::IStream* pstm)
{
    void *_a[] = {0, (void*)&pstm};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void LongArray::Remove(int index)
{
    void *_a[] = {0, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void LongArray::RemoveAll()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void LongArray::Save(esriSystem::IStream* pstm, int fClearDirty)
{
    void *_a[] = {0, (void*)&pstm, (void*)&fClearDirty};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void LongArray::Serialize(esriSystem::IXMLSerializeData* data)
{
    void *_a[] = {0, (void*)&data};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void LongArray::SetElement(int index, int pElement)
{
    void *_a[] = {0, (void*)&index, (void*)&pElement};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}


inline int StrArray::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline void StrArray::Add(const QString& Element)
{
    void *_a[] = {0, (void*)&Element};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void StrArray::Deserialize(esriSystem::IXMLSerializeData* data)
{
    void *_a[] = {0, (void*)&data};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline QString StrArray::Element(int index)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline void StrArray::GetClassID(GUID*& pClassID)
{
    void *_a[] = {0, (void*)&pClassID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void StrArray::GetSizeMax(_ULARGE_INTEGER*& pcbSize)
{
    void *_a[] = {0, (void*)&pcbSize};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void StrArray::Insert(int index, const QString& Element)
{
    void *_a[] = {0, (void*)&index, (void*)&Element};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void StrArray::IsDirty()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void StrArray::Load(esriSystem::IStream* pstm)
{
    void *_a[] = {0, (void*)&pstm};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void StrArray::Remove(int index)
{
    void *_a[] = {0, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void StrArray::RemoveAll()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void StrArray::Save(esriSystem::IStream* pstm, int fClearDirty)
{
    void *_a[] = {0, (void*)&pstm, (void*)&fClearDirty};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void StrArray::Serialize(esriSystem::IXMLSerializeData* data)
{
    void *_a[] = {0, (void*)&data};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void StrArray::SetElement(int index, const QString& Element)
{
    void *_a[] = {0, (void*)&index, (void*)&Element};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}


inline int VarArray::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline void VarArray::Add(const QVariant& Element)
{
    void *_a[] = {0, (void*)&Element};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void VarArray::Deserialize(esriSystem::IXMLSerializeData* data)
{
    void *_a[] = {0, (void*)&data};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline QVariant VarArray::Element(int index)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline void VarArray::GetClassID(GUID*& pClassID)
{
    void *_a[] = {0, (void*)&pClassID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void VarArray::GetSizeMax(_ULARGE_INTEGER*& pcbSize)
{
    void *_a[] = {0, (void*)&pcbSize};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void VarArray::Insert(int index, const QVariant& Element)
{
    void *_a[] = {0, (void*)&index, (void*)&Element};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void VarArray::IsDirty()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void VarArray::Load(esriSystem::IStream* pstm)
{
    void *_a[] = {0, (void*)&pstm};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void VarArray::Remove(int index)
{
    void *_a[] = {0, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void VarArray::RemoveAll()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void VarArray::Save(esriSystem::IStream* pstm, int fClearDirty)
{
    void *_a[] = {0, (void*)&pstm, (void*)&fClearDirty};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void VarArray::Serialize(esriSystem::IXMLSerializeData* data)
{
    void *_a[] = {0, (void*)&data};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void VarArray::SetElement(int index, const QVariant& Element)
{
    void *_a[] = {0, (void*)&index, (void*)&Element};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}


inline int PropertySetArray::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString PropertySetArray::MinNamespaceSupported() const
{
    QVariant qax_result = property("MinNamespaceSupported");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void PropertySetArray::Add(esriSystem::IPropertySet* pPropertySet)
{
    void *_a[] = {0, (void*)&pPropertySet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void PropertySetArray::Deserialize(esriSystem::IXMLSerializeData* data)
{
    void *_a[] = {0, (void*)&data};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline esriSystem::IPropertySet* PropertySetArray::Element(int index)
{
    esriSystem::IPropertySet* qax_result = 0;
    qRegisterMetaType<esriSystem::IPropertySet*>("IPropertySet*", &qax_result);
    qRegisterMetaType<esriSystem::IPropertySet>("IPropertySet", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline void PropertySetArray::GetClassID(GUID*& pClassID)
{
    void *_a[] = {0, (void*)&pClassID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void PropertySetArray::GetSizeMax(_ULARGE_INTEGER*& pcbSize)
{
    void *_a[] = {0, (void*)&pcbSize};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void PropertySetArray::Insert(int index, esriSystem::IPropertySet* pPropertySet)
{
    void *_a[] = {0, (void*)&index, (void*)&pPropertySet};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void PropertySetArray::IsDirty()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void PropertySetArray::Load(esriSystem::IStream* pstm)
{
    void *_a[] = {0, (void*)&pstm};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void PropertySetArray::Remove(int index)
{
    void *_a[] = {0, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void PropertySetArray::RemoveAll()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void PropertySetArray::Save(esriSystem::IStream* pstm, int fClearDirty)
{
    void *_a[] = {0, (void*)&pstm, (void*)&fClearDirty};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void PropertySetArray::Serialize(esriSystem::IXMLSerializeData* data)
{
    void *_a[] = {0, (void*)&data};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}


inline double UnitConverter::ConvertUnits(double dValue, esriSystem::esriUnits inUnits, esriSystem::esriUnits outUnits)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dValue, (void*)&inUnits, (void*)&outUnits};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline QString UnitConverter::EsriUnitsAsString(esriSystem::esriUnits units, esriSystem::esriCaseAppearance appearance, bool bPlural)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&units, (void*)&appearance, (void*)&bPlural};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}


inline bool AngularConverter::NegativeAngles() const
{
    QVariant qax_result = property("NegativeAngles");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline double AngularConverter::GetAngle(esriSystem::esriDirectionType dt, esriSystem::esriDirectionUnits du)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dt, (void*)&du};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline QString AngularConverter::GetString(esriSystem::esriDirectionType dt, esriSystem::esriDirectionUnits du, int precision)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&dt, (void*)&du, (void*)&precision};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline bool AngularConverter::SetAngle(double angle, esriSystem::esriDirectionType dt, esriSystem::esriDirectionUnits du)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&angle, (void*)&dt, (void*)&du};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline void AngularConverter::SetNegativeAngles(bool NegativeAngles)
{
    void *_a[] = {0, (void*)&NegativeAngles};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline bool AngularConverter::SetString(const QString& angle, esriSystem::esriDirectionType dt, esriSystem::esriDirectionUnits du)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&angle, (void*)&dt, (void*)&du};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}


inline bool ScaleFormat::AbbreviateUnits() const
{
    QVariant qax_result = property("AbbreviateUnits");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool ScaleFormat::CapitolizeUnits() const
{
    QVariant qax_result = property("CapitolizeUnits");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString ScaleFormat::CustomFormat() const
{
    QVariant qax_result = property("CustomFormat");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString ScaleFormat::Equals() const
{
    QVariant qax_result = property("Equals");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline esriSystem::esriScaleFormat ScaleFormat::Format() const
{
    QVariant qax_result = property("Format");
    Q_ASSERT(qax_result.isValid());
    return *(esriSystem::esriScaleFormat*)qax_result.constData();
}

inline esriSystem::esriUnits ScaleFormat::MapUnits() const
{
    QVariant qax_result = property("MapUnits");
    Q_ASSERT(qax_result.isValid());
    return *(esriSystem::esriUnits*)qax_result.constData();
}

inline esriSystem::INumberFormat* ScaleFormat::NumberFormat() const
{
    esriSystem::INumberFormat* qax_pointer = 0;
    qRegisterMetaType<esriSystem::INumberFormat*>("INumberFormat*", &qax_pointer);
    qRegisterMetaType<esriSystem::INumberFormat>("INumberFormat", qax_pointer);
    QVariant qax_result = property("NumberFormat");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(esriSystem::INumberFormat**)qax_result.constData();
}

inline double ScaleFormat::PageUnitValue() const
{
    QVariant qax_result = property("PageUnitValue");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}

inline esriSystem::esriUnits ScaleFormat::PageUnits() const
{
    QVariant qax_result = property("PageUnits");
    Q_ASSERT(qax_result.isValid());
    return *(esriSystem::esriUnits*)qax_result.constData();
}

inline bool ScaleFormat::ReverseOrder() const
{
    QVariant qax_result = property("ReverseOrder");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString ScaleFormat::Separator() const
{
    QVariant qax_result = property("Separator");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void ScaleFormat::Assign(esriSystem::IClone* src)
{
    void *_a[] = {0, (void*)&src};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline double ScaleFormat::CalcMapUnitValue(double absoluteScale)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&absoluteScale};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline esriSystem::IClone* ScaleFormat::Clone()
{
    esriSystem::IClone* qax_result = 0;
    qRegisterMetaType<esriSystem::IClone*>("IClone*", &qax_result);
    qRegisterMetaType<esriSystem::IClone>("IClone", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline QVariant ScaleFormat::ConvertToSupportedObject(esriSystem::esriArcGISVersion docVersion)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&docVersion};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline void ScaleFormat::GetClassID(GUID*& pClassID)
{
    void *_a[] = {0, (void*)&pClassID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void ScaleFormat::GetSizeMax(_ULARGE_INTEGER*& pcbSize)
{
    void *_a[] = {0, (void*)&pcbSize};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void ScaleFormat::IsDirty()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline bool ScaleFormat::IsEqual(esriSystem::IClone* other)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&other};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline bool ScaleFormat::IsIdentical(esriSystem::IClone* other)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&other};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline bool ScaleFormat::IsSupportedAtVersion(esriSystem::esriArcGISVersion docVersion)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&docVersion};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline void ScaleFormat::Load(esriSystem::IStream* pstm)
{
    void *_a[] = {0, (void*)&pstm};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}

inline void ScaleFormat::LoadFromRegistry()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
}

inline void ScaleFormat::Save(esriSystem::IStream* pstm, int fClearDirty)
{
    void *_a[] = {0, (void*)&pstm, (void*)&fClearDirty};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline void ScaleFormat::SaveToRegistry()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}

inline QString ScaleFormat::ScaleToString(double Scale)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Scale};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
    return qax_result;
}

inline void ScaleFormat::SetAbbreviateUnits(bool AbbreviateUnits)
{
    void *_a[] = {0, (void*)&AbbreviateUnits};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
}

inline void ScaleFormat::SetCapitolizeUnits(bool CapitolizeUnits)
{
    void *_a[] = {0, (void*)&CapitolizeUnits};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
}

inline void ScaleFormat::SetCustomFormat(const QString& CustomFormat)
{
    void *_a[] = {0, (void*)&CustomFormat};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
}

inline void ScaleFormat::SetEquals(const QString& Equals)
{
    void *_a[] = {0, (void*)&Equals};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
}

inline void ScaleFormat::SetFormat(esriSystem::esriScaleFormat Format)
{
    void *_a[] = {0, (void*)&Format};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
}

inline void ScaleFormat::SetMapUnits(esriSystem::esriUnits MapUnits)
{
    void *_a[] = {0, (void*)&MapUnits};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
}

inline void ScaleFormat::SetNumberFormat(esriSystem::INumberFormat* NumberFormat)
{
    void *_a[] = {0, (void*)&NumberFormat};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
}

inline void ScaleFormat::SetPageUnitValue(double PageUnitValue)
{
    void *_a[] = {0, (void*)&PageUnitValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
}

inline void ScaleFormat::SetPageUnits(esriSystem::esriUnits PageUnits)
{
    void *_a[] = {0, (void*)&PageUnits};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
}

inline void ScaleFormat::SetReverseOrder(bool ReverseOrder)
{
    void *_a[] = {0, (void*)&ReverseOrder};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
}

inline void ScaleFormat::SetSeparator(const QString& Separator)
{
    void *_a[] = {0, (void*)&Separator};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
}

inline double ScaleFormat::StringToScale(const QString& scaleStr)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&scaleStr};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
    return qax_result;
}


inline esriLicenseStatus AoInitialize::CheckInExtension(esriSystem::esriLicenseExtensionCode extensionCode)
{
    esriLicenseStatus qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&extensionCode};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline esriLicenseStatus AoInitialize::CheckOutExtension(esriSystem::esriLicenseExtensionCode extensionCode)
{
    esriLicenseStatus qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&extensionCode};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline QString AoInitialize::GetLicenseExtensionName(esriSystem::esriLicenseExtensionCode extensionCode)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&extensionCode};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline QString AoInitialize::GetLicenseProductName(esriSystem::esriLicenseProductCode ProductCode)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ProductCode};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline esriSystem::ILicenseInfoEnum* AoInitialize::GetProductExtensions(esriSystem::esriLicenseProductCode ProductCode)
{
    esriSystem::ILicenseInfoEnum* qax_result = 0;
    qRegisterMetaType<esriSystem::ILicenseInfoEnum*>("ILicenseInfoEnum*", &qax_result);
    qRegisterMetaType<esriSystem::ILicenseInfoEnum>("ILicenseInfoEnum", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&ProductCode};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline esriLicenseStatus AoInitialize::Initialize(esriSystem::esriLicenseProductCode ProductCode)
{
    esriLicenseStatus qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ProductCode};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline esriLicenseProductCode AoInitialize::InitializedProduct()
{
    esriLicenseProductCode qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void AoInitialize::InterfaceSupportsErrorInfo(GUID* riid)
{
    void *_a[] = {0, (void*)&riid};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline bool AoInitialize::IsExtensionCheckedOut(esriSystem::esriLicenseExtensionCode extensionCode)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&extensionCode};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline esriLicenseStatus AoInitialize::IsExtensionCodeAvailable(esriSystem::esriLicenseProductCode ProductCode, esriSystem::esriLicenseExtensionCode extensionCode)
{
    esriLicenseStatus qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ProductCode, (void*)&extensionCode};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline esriLicenseStatus AoInitialize::IsProductCodeAvailable(esriSystem::esriLicenseProductCode ProductCode)
{
    esriLicenseStatus qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ProductCode};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline void AoInitialize::Shutdown()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}


inline bool ProductInstalled::IsProductInstalled(esriSystem::esriProductInstalled ProductInstalled)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&ProductInstalled};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}


inline esriLicenseExtensionCode LicenseInfoEnum::Next()
{
    esriLicenseExtensionCode qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline void LicenseInfoEnum::Reset()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}


inline QString AoAuthorizeLicense::FeaturesAdded() const
{
    QVariant qax_result = property("FeaturesAdded");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void AoAuthorizeLicense::AuthorizeASR(const QString& strAsr, const QString& Password)
{
    void *_a[] = {0, (void*)&strAsr, (void*)&Password};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void AoAuthorizeLicense::AuthorizeASRFromFile(const QString& FileName, const QString& Password)
{
    void *_a[] = {0, (void*)&FileName, (void*)&Password};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void AoAuthorizeLicense::CheckASR(const QString& strAsr, const QString& Password)
{
    void *_a[] = {0, (void*)&strAsr, (void*)&Password};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void AoAuthorizeLicense::CheckASRFromFile(const QString& FileName, const QString& Password)
{
    void *_a[] = {0, (void*)&FileName, (void*)&Password};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void AoAuthorizeLicense::DeauthorizeASR(const QString& strAsr, const QString& Password)
{
    void *_a[] = {0, (void*)&strAsr, (void*)&Password};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void AoAuthorizeLicense::DeauthorizeASRFromFile(const QString& FileName, const QString& Password)
{
    void *_a[] = {0, (void*)&FileName, (void*)&Password};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline int AoAuthorizeLicense::LastError(QString& LastError)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&LastError};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline void AoAuthorizeLicense::RepairASR(const QString& strAsr, const QString& Password)
{
    void *_a[] = {0, (void*)&strAsr, (void*)&Password};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void AoAuthorizeLicense::RepairASRFromFile(const QString& FileName, const QString& Password)
{
    void *_a[] = {0, (void*)&FileName, (void*)&Password};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}


inline IUnknown* ObjectCopy::Copy(IUnknown* pInObject)
{
    IUnknown* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&pInObject};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline void ObjectCopy::Overwrite(IUnknown* pInObject, IUnknown** pOverwriteObject)
{
    void *_a[] = {0, (void*)&pInObject, (void*)&pOverwriteObject};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}


inline IUnknown* XMLPersistedObject::Object() const
{
    QVariant qax_result = property("Object");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(IUnknown**)qax_result.constData();
}
inline void XMLPersistedObject::SetObject(IUnknown* value){
    int typeId = qRegisterMetaType<IUnknown*>("IUnknown*", &value);
    setProperty("Object", QVariant(typeId, &value));
}

inline void XMLPersistedObject::Deserialize(esriSystem::IXMLSerializeData* data)
{
    void *_a[] = {0, (void*)&data};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void XMLPersistedObject::Serialize(esriSystem::IXMLSerializeData* data)
{
    void *_a[] = {0, (void*)&data};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}


inline void SystemHelper::Classify(esriSystem::IClassifyGEN* pClassify, QVariantList* doubleArrayValues, QVariantList* longArrayFrequencies, int& numClasses)
{
    void *_a[] = {0, (void*)&pClassify, (void*)&doubleArrayValues, (void*)&longArrayFrequencies, (void*)&numClasses};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}


inline QString ShortcutName::NameString() const
{
    QVariant qax_result = property("NameString");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString ShortcutName::Path() const
{
    QVariant qax_result = property("Path");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline esriSystem::IName* ShortcutName::TargetName() const
{
    esriSystem::IName* qax_pointer = 0;
    qRegisterMetaType<esriSystem::IName*>("IName*", &qax_pointer);
    qRegisterMetaType<esriSystem::IName>("IName", qax_pointer);
    QVariant qax_result = property("TargetName");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(esriSystem::IName**)qax_result.constData();
}
inline void ShortcutName::SetTargetName(esriSystem::IName* value){
    int typeId = qRegisterMetaType<esriSystem::IName*>("esriSystem::IName*", &value);
    setProperty("TargetName", QVariant(typeId, &value));
}

inline void ShortcutName::GetSizeMax(_ULARGE_INTEGER*& pcbSize)
{
    void *_a[] = {0, (void*)&pcbSize};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void ShortcutName::IsDirty()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void ShortcutName::Load(esriSystem::IStream* pstm)
{
    void *_a[] = {0, (void*)&pstm};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline IUnknown* ShortcutName::Open()
{
    IUnknown* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void ShortcutName::Save(esriSystem::IStream* pstm, int fClearDirty)
{
    void *_a[] = {0, (void*)&pstm, (void*)&fClearDirty};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void ShortcutName::SetNameString(const QString& NameString)
{
    void *_a[] = {0, (void*)&NameString};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void ShortcutName::SetPath(const QString& Path)
{
    void *_a[] = {0, (void*)&Path};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}


inline int ArcGISLocale::CountryID() const
{
    QVariant qax_result = property("CountryID");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int ArcGISLocale::LangID() const
{
    QVariant qax_result = property("LangID");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int ArcGISLocale::Locale() const
{
    QVariant qax_result = property("Locale");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline bool ArcGISLocale::RightToLeft() const
{
    QVariant qax_result = property("RightToLeft");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool ArcGISLocale::RightToLeftTable() const
{
    QVariant qax_result = property("RightToLeftTable");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool ArcGISLocale::RightToLeftUI() const
{
    QVariant qax_result = property("RightToLeftUI");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline int ArcGISLocale::UICountryID() const
{
    QVariant qax_result = property("UICountryID");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int ArcGISLocale::UILangID() const
{
    QVariant qax_result = property("UILangID");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int ArcGISLocale::UILocale() const
{
    QVariant qax_result = property("UILocale");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline void ArcGISLocale::SetLocale()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void ArcGISLocale::SetThreadLocale()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void ArcGISLocale::SetThreadUILocale()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}


inline QVariant EqualInterval::ClassBreaks() const
{
    QVariant qax_result = property("ClassBreaks");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}

inline esriSystem::IUID* EqualInterval::ClassID() const
{
    esriSystem::IUID* qax_pointer = 0;
    qRegisterMetaType<esriSystem::IUID*>("IUID*", &qax_pointer);
    qRegisterMetaType<esriSystem::IUID>("IUID", qax_pointer);
    QVariant qax_result = property("ClassID");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(esriSystem::IUID**)qax_result.constData();
}

inline double EqualInterval::Maximum() const
{
    QVariant qax_result = property("Maximum");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void EqualInterval::SetMaximum(double value){ setProperty("Maximum", QVariant(value)); }

inline QString EqualInterval::MethodName() const
{
    QVariant qax_result = property("MethodName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline double EqualInterval::Minimum() const
{
    QVariant qax_result = property("Minimum");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void EqualInterval::SetMinimum(double value){ setProperty("Minimum", QVariant(value)); }

inline void EqualInterval::Classify(const QVariant& doubleArrayValues, const QVariant& longArrayFrequencies, int& numClasses)
{
    void *_a[] = {0, (void*)&doubleArrayValues, (void*)&longArrayFrequencies, (void*)&numClasses};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void EqualInterval::Classify(int& numClasses)
{
    void *_a[] = {0, (void*)&numClasses};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void EqualInterval::ClassifyMinMax(double min, double max, int& numClasses)
{
    void *_a[] = {0, (void*)&min, (void*)&max, (void*)&numClasses};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void EqualInterval::SetHistogramData(const QVariant& doubleArrayValues, const QVariant& longArrayFrequencies)
{
    void *_a[] = {0, (void*)&doubleArrayValues, (void*)&longArrayFrequencies};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}


inline QVariant Quantile::ClassBreaks() const
{
    QVariant qax_result = property("ClassBreaks");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}

inline esriSystem::IUID* Quantile::ClassID() const
{
    esriSystem::IUID* qax_pointer = 0;
    qRegisterMetaType<esriSystem::IUID*>("IUID*", &qax_pointer);
    qRegisterMetaType<esriSystem::IUID>("IUID", qax_pointer);
    QVariant qax_result = property("ClassID");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(esriSystem::IUID**)qax_result.constData();
}

inline QString Quantile::MethodName() const
{
    QVariant qax_result = property("MethodName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void Quantile::Classify(const QVariant& doubleArrayValues, const QVariant& longArrayFrequencies, int& numClasses)
{
    void *_a[] = {0, (void*)&doubleArrayValues, (void*)&longArrayFrequencies, (void*)&numClasses};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void Quantile::Classify(int& numClasses)
{
    void *_a[] = {0, (void*)&numClasses};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void Quantile::SetHistogramData(const QVariant& doubleArrayValues, const QVariant& longArrayFrequencies)
{
    void *_a[] = {0, (void*)&doubleArrayValues, (void*)&longArrayFrequencies};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}


inline QVariant DefinedInterval::ClassBreaks() const
{
    QVariant qax_result = property("ClassBreaks");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}

inline esriSystem::IUID* DefinedInterval::ClassID() const
{
    esriSystem::IUID* qax_pointer = 0;
    qRegisterMetaType<esriSystem::IUID*>("IUID*", &qax_pointer);
    qRegisterMetaType<esriSystem::IUID>("IUID", qax_pointer);
    QVariant qax_result = property("ClassID");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(esriSystem::IUID**)qax_result.constData();
}

inline double DefinedInterval::Default() const
{
    QVariant qax_result = property("Default");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}

inline double DefinedInterval::IntervalRange() const
{
    QVariant qax_result = property("IntervalRange");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void DefinedInterval::SetIntervalRange(double value){ setProperty("IntervalRange", QVariant(value)); }

inline double DefinedInterval::Maximum() const
{
    QVariant qax_result = property("Maximum");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void DefinedInterval::SetMaximum(double value){ setProperty("Maximum", QVariant(value)); }

inline QString DefinedInterval::MethodName() const
{
    QVariant qax_result = property("MethodName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline double DefinedInterval::Minimum() const
{
    QVariant qax_result = property("Minimum");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void DefinedInterval::SetMinimum(double value){ setProperty("Minimum", QVariant(value)); }

inline void DefinedInterval::Classify(const QVariant& doubleArrayValues, const QVariant& longArrayFrequencies, int& numClasses)
{
    void *_a[] = {0, (void*)&doubleArrayValues, (void*)&longArrayFrequencies, (void*)&numClasses};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void DefinedInterval::Classify(int& numClasses)
{
    void *_a[] = {0, (void*)&numClasses};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void DefinedInterval::ClassifyMinMax(double min, double max, int& numClasses)
{
    void *_a[] = {0, (void*)&min, (void*)&max, (void*)&numClasses};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void DefinedInterval::SetHistogramData(const QVariant& doubleArrayValues, const QVariant& longArrayFrequencies)
{
    void *_a[] = {0, (void*)&doubleArrayValues, (void*)&longArrayFrequencies};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}


inline QVariant NaturalBreaks::ClassBreaks() const
{
    QVariant qax_result = property("ClassBreaks");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}

inline esriSystem::IUID* NaturalBreaks::ClassID() const
{
    esriSystem::IUID* qax_pointer = 0;
    qRegisterMetaType<esriSystem::IUID*>("IUID*", &qax_pointer);
    qRegisterMetaType<esriSystem::IUID>("IUID", qax_pointer);
    QVariant qax_result = property("ClassID");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(esriSystem::IUID**)qax_result.constData();
}

inline QString NaturalBreaks::MethodName() const
{
    QVariant qax_result = property("MethodName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void NaturalBreaks::Classify(const QVariant& doubleArrayValues, const QVariant& longArrayFrequencies, int& numClasses)
{
    void *_a[] = {0, (void*)&doubleArrayValues, (void*)&longArrayFrequencies, (void*)&numClasses};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void NaturalBreaks::Classify(int& numClasses)
{
    void *_a[] = {0, (void*)&numClasses};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void NaturalBreaks::SetHistogramData(const QVariant& doubleArrayValues, const QVariant& longArrayFrequencies)
{
    void *_a[] = {0, (void*)&doubleArrayValues, (void*)&longArrayFrequencies};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}


inline QVariant StandardDeviation::ClassBreaks() const
{
    QVariant qax_result = property("ClassBreaks");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}

inline esriSystem::IUID* StandardDeviation::ClassID() const
{
    esriSystem::IUID* qax_pointer = 0;
    qRegisterMetaType<esriSystem::IUID*>("IUID*", &qax_pointer);
    qRegisterMetaType<esriSystem::IUID>("IUID", qax_pointer);
    QVariant qax_result = property("ClassID");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(esriSystem::IUID**)qax_result.constData();
}

inline double StandardDeviation::DeviationInterval() const
{
    QVariant qax_result = property("DeviationInterval");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}

inline double StandardDeviation::Mean() const
{
    QVariant qax_result = property("Mean");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void StandardDeviation::SetMean(double value){ setProperty("Mean", QVariant(value)); }

inline QString StandardDeviation::MethodName() const
{
    QVariant qax_result = property("MethodName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline double StandardDeviation::StandardDev() const
{
    QVariant qax_result = property("StandardDev");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}
inline void StandardDeviation::SetStandardDev(double value){ setProperty("StandardDev", QVariant(value)); }

inline void StandardDeviation::Classify(const QVariant& doubleArrayValues, const QVariant& longArrayFrequencies, int& numClasses)
{
    void *_a[] = {0, (void*)&doubleArrayValues, (void*)&longArrayFrequencies, (void*)&numClasses};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void StandardDeviation::Classify(int& numClasses)
{
    void *_a[] = {0, (void*)&numClasses};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void StandardDeviation::SetDeviationInterval(double DeviationInterval)
{
    void *_a[] = {0, (void*)&DeviationInterval};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void StandardDeviation::SetHistogramData(const QVariant& doubleArrayValues, const QVariant& longArrayFrequencies)
{
    void *_a[] = {0, (void*)&doubleArrayValues, (void*)&longArrayFrequencies};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}


inline QVariant GeometricalInterval::ClassBreaks() const
{
    QVariant qax_result = property("ClassBreaks");
    Q_ASSERT(qax_result.isValid());
    return *(QVariant*)qax_result.constData();
}

inline esriSystem::IUID* GeometricalInterval::ClassID() const
{
    esriSystem::IUID* qax_pointer = 0;
    qRegisterMetaType<esriSystem::IUID*>("IUID*", &qax_pointer);
    qRegisterMetaType<esriSystem::IUID>("IUID", qax_pointer);
    QVariant qax_result = property("ClassID");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(esriSystem::IUID**)qax_result.constData();
}

inline QString GeometricalInterval::MethodName() const
{
    QVariant qax_result = property("MethodName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void GeometricalInterval::Classify(const QVariant& doubleArrayValues, const QVariant& longArrayFrequencies, int& numClasses)
{
    void *_a[] = {0, (void*)&doubleArrayValues, (void*)&longArrayFrequencies, (void*)&numClasses};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void GeometricalInterval::Classify(int& numClasses)
{
    void *_a[] = {0, (void*)&numClasses};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void GeometricalInterval::SetHistogramData(const QVariant& doubleArrayValues, const QVariant& longArrayFrequencies)
{
    void *_a[] = {0, (void*)&doubleArrayValues, (void*)&longArrayFrequencies};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}


inline esriSystem::esriNumericAlignmentEnum NumericFormat::AlignmentOption() const
{
    QVariant qax_result = property("AlignmentOption");
    Q_ASSERT(qax_result.isValid());
    return *(esriSystem::esriNumericAlignmentEnum*)qax_result.constData();
}

inline int NumericFormat::AlignmentWidth() const
{
    QVariant qax_result = property("AlignmentWidth");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline esriSystem::esriRoundingOptionEnum NumericFormat::RoundingOption() const
{
    QVariant qax_result = property("RoundingOption");
    Q_ASSERT(qax_result.isValid());
    return *(esriSystem::esriRoundingOptionEnum*)qax_result.constData();
}

inline int NumericFormat::RoundingValue() const
{
    QVariant qax_result = property("RoundingValue");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline bool NumericFormat::ShowPlusSign() const
{
    QVariant qax_result = property("ShowPlusSign");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool NumericFormat::UseSeparator() const
{
    QVariant qax_result = property("UseSeparator");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool NumericFormat::ZeroPad() const
{
    QVariant qax_result = property("ZeroPad");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline void NumericFormat::Assign(esriSystem::IClone* src)
{
    void *_a[] = {0, (void*)&src};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline esriSystem::IClone* NumericFormat::Clone()
{
    esriSystem::IClone* qax_result = 0;
    qRegisterMetaType<esriSystem::IClone*>("IClone*", &qax_result);
    qRegisterMetaType<esriSystem::IClone>("IClone", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline void NumericFormat::Deserialize(esriSystem::IXMLSerializeData* data)
{
    void *_a[] = {0, (void*)&data};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void NumericFormat::GetClassID(GUID*& pClassID)
{
    void *_a[] = {0, (void*)&pClassID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void NumericFormat::GetSizeMax(_ULARGE_INTEGER*& pcbSize)
{
    void *_a[] = {0, (void*)&pcbSize};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline double NumericFormat::Increment(double Value)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline void NumericFormat::IsDirty()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline bool NumericFormat::IsEqual(esriSystem::IClone* other)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&other};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline bool NumericFormat::IsIdentical(esriSystem::IClone* other)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&other};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline void NumericFormat::Load(esriSystem::IStream* pstm)
{
    void *_a[] = {0, (void*)&pstm};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void NumericFormat::Save(esriSystem::IStream* pstm, int fClearDirty)
{
    void *_a[] = {0, (void*)&pstm, (void*)&fClearDirty};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void NumericFormat::Serialize(esriSystem::IXMLSerializeData* data)
{
    void *_a[] = {0, (void*)&data};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}

inline void NumericFormat::SetAlignmentOption(esriSystem::esriNumericAlignmentEnum AlignmentOption)
{
    void *_a[] = {0, (void*)&AlignmentOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
}

inline void NumericFormat::SetAlignmentWidth(int AlignmentWidth)
{
    void *_a[] = {0, (void*)&AlignmentWidth};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
}

inline void NumericFormat::SetRoundingOption(esriSystem::esriRoundingOptionEnum RoundingOption)
{
    void *_a[] = {0, (void*)&RoundingOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline void NumericFormat::SetRoundingValue(int RoundingValue)
{
    void *_a[] = {0, (void*)&RoundingValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
}

inline void NumericFormat::SetShowPlusSign(bool ShowPlusSign)
{
    void *_a[] = {0, (void*)&ShowPlusSign};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline void NumericFormat::SetUseSeparator(bool UseSeparator)
{
    void *_a[] = {0, (void*)&UseSeparator};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline void NumericFormat::SetZeroPad(bool ZeroPad)
{
    void *_a[] = {0, (void*)&ZeroPad};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline double NumericFormat::StringToValue(const QString& str)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&str};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
    return qax_result;
}

inline QString NumericFormat::ValueToString(double Value)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
    return qax_result;
}


inline void CurrencyFormat::Assign(esriSystem::IClone* src)
{
    void *_a[] = {0, (void*)&src};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline esriSystem::IClone* CurrencyFormat::Clone()
{
    esriSystem::IClone* qax_result = 0;
    qRegisterMetaType<esriSystem::IClone*>("IClone*", &qax_result);
    qRegisterMetaType<esriSystem::IClone>("IClone", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void CurrencyFormat::GetClassID(GUID*& pClassID)
{
    void *_a[] = {0, (void*)&pClassID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void CurrencyFormat::GetSizeMax(_ULARGE_INTEGER*& pcbSize)
{
    void *_a[] = {0, (void*)&pcbSize};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline double CurrencyFormat::Increment(double Value)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void CurrencyFormat::IsDirty()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline bool CurrencyFormat::IsEqual(esriSystem::IClone* other)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&other};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline bool CurrencyFormat::IsIdentical(esriSystem::IClone* other)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&other};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline void CurrencyFormat::Load(esriSystem::IStream* pstm)
{
    void *_a[] = {0, (void*)&pstm};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void CurrencyFormat::Save(esriSystem::IStream* pstm, int fClearDirty)
{
    void *_a[] = {0, (void*)&pstm, (void*)&fClearDirty};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline double CurrencyFormat::StringToValue(const QString& str)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&str};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline QString CurrencyFormat::ValueToString(double Value)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}


inline bool PercentageFormat::AdjustPercentage() const
{
    QVariant qax_result = property("AdjustPercentage");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline esriSystem::esriNumericAlignmentEnum PercentageFormat::AlignmentOption() const
{
    QVariant qax_result = property("AlignmentOption");
    Q_ASSERT(qax_result.isValid());
    return *(esriSystem::esriNumericAlignmentEnum*)qax_result.constData();
}

inline int PercentageFormat::AlignmentWidth() const
{
    QVariant qax_result = property("AlignmentWidth");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline esriSystem::esriRoundingOptionEnum PercentageFormat::RoundingOption() const
{
    QVariant qax_result = property("RoundingOption");
    Q_ASSERT(qax_result.isValid());
    return *(esriSystem::esriRoundingOptionEnum*)qax_result.constData();
}

inline int PercentageFormat::RoundingValue() const
{
    QVariant qax_result = property("RoundingValue");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline bool PercentageFormat::ShowPlusSign() const
{
    QVariant qax_result = property("ShowPlusSign");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool PercentageFormat::UseSeparator() const
{
    QVariant qax_result = property("UseSeparator");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool PercentageFormat::ZeroPad() const
{
    QVariant qax_result = property("ZeroPad");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline void PercentageFormat::Assign(esriSystem::IClone* src)
{
    void *_a[] = {0, (void*)&src};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline esriSystem::IClone* PercentageFormat::Clone()
{
    esriSystem::IClone* qax_result = 0;
    qRegisterMetaType<esriSystem::IClone*>("IClone*", &qax_result);
    qRegisterMetaType<esriSystem::IClone>("IClone", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void PercentageFormat::GetClassID(GUID*& pClassID)
{
    void *_a[] = {0, (void*)&pClassID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void PercentageFormat::GetSizeMax(_ULARGE_INTEGER*& pcbSize)
{
    void *_a[] = {0, (void*)&pcbSize};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline double PercentageFormat::Increment(double Value)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline void PercentageFormat::IsDirty()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline bool PercentageFormat::IsEqual(esriSystem::IClone* other)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&other};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline bool PercentageFormat::IsIdentical(esriSystem::IClone* other)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&other};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline void PercentageFormat::Load(esriSystem::IStream* pstm)
{
    void *_a[] = {0, (void*)&pstm};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void PercentageFormat::Save(esriSystem::IStream* pstm, int fClearDirty)
{
    void *_a[] = {0, (void*)&pstm, (void*)&fClearDirty};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void PercentageFormat::SetAdjustPercentage(bool AdjustPercentage)
{
    void *_a[] = {0, (void*)&AdjustPercentage};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}

inline void PercentageFormat::SetAlignmentOption(esriSystem::esriNumericAlignmentEnum AlignmentOption)
{
    void *_a[] = {0, (void*)&AlignmentOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
}

inline void PercentageFormat::SetAlignmentWidth(int AlignmentWidth)
{
    void *_a[] = {0, (void*)&AlignmentWidth};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
}

inline void PercentageFormat::SetRoundingOption(esriSystem::esriRoundingOptionEnum RoundingOption)
{
    void *_a[] = {0, (void*)&RoundingOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline void PercentageFormat::SetRoundingValue(int RoundingValue)
{
    void *_a[] = {0, (void*)&RoundingValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
}

inline void PercentageFormat::SetShowPlusSign(bool ShowPlusSign)
{
    void *_a[] = {0, (void*)&ShowPlusSign};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline void PercentageFormat::SetUseSeparator(bool UseSeparator)
{
    void *_a[] = {0, (void*)&UseSeparator};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline void PercentageFormat::SetZeroPad(bool ZeroPad)
{
    void *_a[] = {0, (void*)&ZeroPad};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline double PercentageFormat::StringToValue(const QString& str)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&str};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
    return qax_result;
}

inline QString PercentageFormat::ValueToString(double Value)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
    return qax_result;
}


inline int FractionFormat::FractionFactor() const
{
    QVariant qax_result = property("FractionFactor");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline esriSystem::esriFractionOptionEnum FractionFormat::FractionOption() const
{
    QVariant qax_result = property("FractionOption");
    Q_ASSERT(qax_result.isValid());
    return *(esriSystem::esriFractionOptionEnum*)qax_result.constData();
}

inline void FractionFormat::Assign(esriSystem::IClone* src)
{
    void *_a[] = {0, (void*)&src};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline esriSystem::IClone* FractionFormat::Clone()
{
    esriSystem::IClone* qax_result = 0;
    qRegisterMetaType<esriSystem::IClone*>("IClone*", &qax_result);
    qRegisterMetaType<esriSystem::IClone>("IClone", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void FractionFormat::GetClassID(GUID*& pClassID)
{
    void *_a[] = {0, (void*)&pClassID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void FractionFormat::GetSizeMax(_ULARGE_INTEGER*& pcbSize)
{
    void *_a[] = {0, (void*)&pcbSize};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline double FractionFormat::Increment(double Value)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void FractionFormat::IsDirty()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline bool FractionFormat::IsEqual(esriSystem::IClone* other)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&other};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline bool FractionFormat::IsIdentical(esriSystem::IClone* other)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&other};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline void FractionFormat::Load(esriSystem::IStream* pstm)
{
    void *_a[] = {0, (void*)&pstm};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void FractionFormat::Save(esriSystem::IStream* pstm, int fClearDirty)
{
    void *_a[] = {0, (void*)&pstm, (void*)&fClearDirty};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void FractionFormat::SetFractionFactor(int FractionFactor)
{
    void *_a[] = {0, (void*)&FractionFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void FractionFormat::SetFractionOption(esriSystem::esriFractionOptionEnum FractionOption)
{
    void *_a[] = {0, (void*)&FractionOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline double FractionFormat::StringToValue(const QString& str)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&str};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline QString FractionFormat::ValueToString(double Value)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}


inline esriSystem::esriNumericAlignmentEnum LatLonFormat::AlignmentOption() const
{
    QVariant qax_result = property("AlignmentOption");
    Q_ASSERT(qax_result.isValid());
    return *(esriSystem::esriNumericAlignmentEnum*)qax_result.constData();
}

inline int LatLonFormat::AlignmentWidth() const
{
    QVariant qax_result = property("AlignmentWidth");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline bool LatLonFormat::IsLatitude() const
{
    QVariant qax_result = property("IsLatitude");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline esriSystem::esriRoundingOptionEnum LatLonFormat::RoundingOption() const
{
    QVariant qax_result = property("RoundingOption");
    Q_ASSERT(qax_result.isValid());
    return *(esriSystem::esriRoundingOptionEnum*)qax_result.constData();
}

inline int LatLonFormat::RoundingValue() const
{
    QVariant qax_result = property("RoundingValue");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline bool LatLonFormat::ShowDirections() const
{
    QVariant qax_result = property("ShowDirections");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool LatLonFormat::ShowPlusSign() const
{
    QVariant qax_result = property("ShowPlusSign");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool LatLonFormat::ShowZeroMinutes() const
{
    QVariant qax_result = property("ShowZeroMinutes");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool LatLonFormat::ShowZeroSeconds() const
{
    QVariant qax_result = property("ShowZeroSeconds");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool LatLonFormat::UseSeparator() const
{
    QVariant qax_result = property("UseSeparator");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool LatLonFormat::ZeroPad() const
{
    QVariant qax_result = property("ZeroPad");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline void LatLonFormat::Assign(esriSystem::IClone* src)
{
    void *_a[] = {0, (void*)&src};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline esriSystem::IClone* LatLonFormat::Clone()
{
    esriSystem::IClone* qax_result = 0;
    qRegisterMetaType<esriSystem::IClone*>("IClone*", &qax_result);
    qRegisterMetaType<esriSystem::IClone>("IClone", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline void LatLonFormat::GetClassID(GUID*& pClassID)
{
    void *_a[] = {0, (void*)&pClassID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void LatLonFormat::GetDMS(double Value, int& degrees, int& Minutes, double& Seconds)
{
    void *_a[] = {0, (void*)&Value, (void*)&degrees, (void*)&Minutes, (void*)&Seconds};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void LatLonFormat::GetSizeMax(_ULARGE_INTEGER*& pcbSize)
{
    void *_a[] = {0, (void*)&pcbSize};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline double LatLonFormat::Increment(double Value)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline void LatLonFormat::IsDirty()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline bool LatLonFormat::IsEqual(esriSystem::IClone* other)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&other};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline bool LatLonFormat::IsIdentical(esriSystem::IClone* other)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&other};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline void LatLonFormat::Load(esriSystem::IStream* pstm)
{
    void *_a[] = {0, (void*)&pstm};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void LatLonFormat::Save(esriSystem::IStream* pstm, int fClearDirty)
{
    void *_a[] = {0, (void*)&pstm, (void*)&fClearDirty};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}

inline void LatLonFormat::SetAlignmentOption(esriSystem::esriNumericAlignmentEnum AlignmentOption)
{
    void *_a[] = {0, (void*)&AlignmentOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
}

inline void LatLonFormat::SetAlignmentWidth(int AlignmentWidth)
{
    void *_a[] = {0, (void*)&AlignmentWidth};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
}

inline void LatLonFormat::SetIsLatitude(bool IsLatitude)
{
    void *_a[] = {0, (void*)&IsLatitude};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline void LatLonFormat::SetRoundingOption(esriSystem::esriRoundingOptionEnum RoundingOption)
{
    void *_a[] = {0, (void*)&RoundingOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
}

inline void LatLonFormat::SetRoundingValue(int RoundingValue)
{
    void *_a[] = {0, (void*)&RoundingValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline void LatLonFormat::SetShowDirections(bool ShowDirections)
{
    void *_a[] = {0, (void*)&ShowDirections};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline void LatLonFormat::SetShowPlusSign(bool ShowPlusSign)
{
    void *_a[] = {0, (void*)&ShowPlusSign};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline void LatLonFormat::SetShowZeroMinutes(bool ShowZeroMinutes)
{
    void *_a[] = {0, (void*)&ShowZeroMinutes};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}

inline void LatLonFormat::SetShowZeroSeconds(bool ShowZeroSeconds)
{
    void *_a[] = {0, (void*)&ShowZeroSeconds};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}

inline void LatLonFormat::SetUseSeparator(bool UseSeparator)
{
    void *_a[] = {0, (void*)&UseSeparator};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
}

inline void LatLonFormat::SetZeroPad(bool ZeroPad)
{
    void *_a[] = {0, (void*)&ZeroPad};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
}

inline double LatLonFormat::StringToValue(const QString& str)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&str};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
    return qax_result;
}

inline QString LatLonFormat::ValueToString(double Value)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
    return qax_result;
}


inline esriSystem::esriNumericAlignmentEnum AngleFormat::AlignmentOption() const
{
    QVariant qax_result = property("AlignmentOption");
    Q_ASSERT(qax_result.isValid());
    return *(esriSystem::esriNumericAlignmentEnum*)qax_result.constData();
}

inline int AngleFormat::AlignmentWidth() const
{
    QVariant qax_result = property("AlignmentWidth");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline bool AngleFormat::AngleInDegrees() const
{
    QVariant qax_result = property("AngleInDegrees");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool AngleFormat::DisplayDegrees() const
{
    QVariant qax_result = property("DisplayDegrees");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline esriSystem::esriRoundingOptionEnum AngleFormat::RoundingOption() const
{
    QVariant qax_result = property("RoundingOption");
    Q_ASSERT(qax_result.isValid());
    return *(esriSystem::esriRoundingOptionEnum*)qax_result.constData();
}

inline int AngleFormat::RoundingValue() const
{
    QVariant qax_result = property("RoundingValue");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline bool AngleFormat::ShowPlusSign() const
{
    QVariant qax_result = property("ShowPlusSign");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool AngleFormat::UseSeparator() const
{
    QVariant qax_result = property("UseSeparator");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool AngleFormat::ZeroPad() const
{
    QVariant qax_result = property("ZeroPad");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline void AngleFormat::Assign(esriSystem::IClone* src)
{
    void *_a[] = {0, (void*)&src};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline esriSystem::IClone* AngleFormat::Clone()
{
    esriSystem::IClone* qax_result = 0;
    qRegisterMetaType<esriSystem::IClone*>("IClone*", &qax_result);
    qRegisterMetaType<esriSystem::IClone>("IClone", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline QVariant AngleFormat::ConvertToSupportedObject(esriSystem::esriArcGISVersion docVersion)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&docVersion};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline void AngleFormat::GetClassID(GUID*& pClassID)
{
    void *_a[] = {0, (void*)&pClassID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void AngleFormat::GetSizeMax(_ULARGE_INTEGER*& pcbSize)
{
    void *_a[] = {0, (void*)&pcbSize};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline double AngleFormat::Increment(double Value)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline void AngleFormat::IsDirty()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline bool AngleFormat::IsEqual(esriSystem::IClone* other)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&other};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline bool AngleFormat::IsIdentical(esriSystem::IClone* other)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&other};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline bool AngleFormat::IsSupportedAtVersion(esriSystem::esriArcGISVersion docVersion)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&docVersion};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline void AngleFormat::Load(esriSystem::IStream* pstm)
{
    void *_a[] = {0, (void*)&pstm};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void AngleFormat::Save(esriSystem::IStream* pstm, int fClearDirty)
{
    void *_a[] = {0, (void*)&pstm, (void*)&fClearDirty};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
}

inline void AngleFormat::SetAlignmentOption(esriSystem::esriNumericAlignmentEnum AlignmentOption)
{
    void *_a[] = {0, (void*)&AlignmentOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline void AngleFormat::SetAlignmentWidth(int AlignmentWidth)
{
    void *_a[] = {0, (void*)&AlignmentWidth};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
}

inline void AngleFormat::SetAngleInDegrees(bool AngleInDegrees)
{
    void *_a[] = {0, (void*)&AngleInDegrees};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline void AngleFormat::SetDisplayDegrees(bool DisplayDegrees)
{
    void *_a[] = {0, (void*)&DisplayDegrees};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline void AngleFormat::SetRoundingOption(esriSystem::esriRoundingOptionEnum RoundingOption)
{
    void *_a[] = {0, (void*)&RoundingOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline void AngleFormat::SetRoundingValue(int RoundingValue)
{
    void *_a[] = {0, (void*)&RoundingValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}

inline void AngleFormat::SetShowPlusSign(bool ShowPlusSign)
{
    void *_a[] = {0, (void*)&ShowPlusSign};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}

inline void AngleFormat::SetUseSeparator(bool UseSeparator)
{
    void *_a[] = {0, (void*)&UseSeparator};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
}

inline void AngleFormat::SetZeroPad(bool ZeroPad)
{
    void *_a[] = {0, (void*)&ZeroPad};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
}

inline double AngleFormat::StringToValue(const QString& str)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&str};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
    return qax_result;
}

inline QString AngleFormat::ValueToString(double Value)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
    return qax_result;
}


inline int DirectionFormat::DecimalPlaces() const
{
    QVariant qax_result = property("DecimalPlaces");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline esriSystem::esriDirectionType DirectionFormat::DirectionType() const
{
    QVariant qax_result = property("DirectionType");
    Q_ASSERT(qax_result.isValid());
    return *(esriSystem::esriDirectionType*)qax_result.constData();
}

inline esriSystem::esriDirectionUnits DirectionFormat::DirectionUnits() const
{
    QVariant qax_result = property("DirectionUnits");
    Q_ASSERT(qax_result.isValid());
    return *(esriSystem::esriDirectionUnits*)qax_result.constData();
}

inline esriSystem::esriDirectionFormatEnum DirectionFormat::DisplayFormat() const
{
    QVariant qax_result = property("DisplayFormat");
    Q_ASSERT(qax_result.isValid());
    return *(esriSystem::esriDirectionFormatEnum*)qax_result.constData();
}

inline void DirectionFormat::Assign(esriSystem::IClone* src)
{
    void *_a[] = {0, (void*)&src};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline esriSystem::IClone* DirectionFormat::Clone()
{
    esriSystem::IClone* qax_result = 0;
    qRegisterMetaType<esriSystem::IClone*>("IClone*", &qax_result);
    qRegisterMetaType<esriSystem::IClone>("IClone", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void DirectionFormat::GetClassID(GUID*& pClassID)
{
    void *_a[] = {0, (void*)&pClassID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void DirectionFormat::GetSizeMax(_ULARGE_INTEGER*& pcbSize)
{
    void *_a[] = {0, (void*)&pcbSize};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline double DirectionFormat::Increment(double Value)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline void DirectionFormat::IsDirty()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline bool DirectionFormat::IsEqual(esriSystem::IClone* other)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&other};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline bool DirectionFormat::IsIdentical(esriSystem::IClone* other)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&other};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline void DirectionFormat::Load(esriSystem::IStream* pstm)
{
    void *_a[] = {0, (void*)&pstm};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void DirectionFormat::Save(esriSystem::IStream* pstm, int fClearDirty)
{
    void *_a[] = {0, (void*)&pstm, (void*)&fClearDirty};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline void DirectionFormat::SetDecimalPlaces(int DecimalPlaces)
{
    void *_a[] = {0, (void*)&DecimalPlaces};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void DirectionFormat::SetDirectionType(esriSystem::esriDirectionType DirectionType)
{
    void *_a[] = {0, (void*)&DirectionType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}

inline void DirectionFormat::SetDirectionUnits(esriSystem::esriDirectionUnits DirectionUnits)
{
    void *_a[] = {0, (void*)&DirectionUnits};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
}

inline void DirectionFormat::SetDisplayFormat(esriSystem::esriDirectionFormatEnum DisplayFormat)
{
    void *_a[] = {0, (void*)&DisplayFormat};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
}

inline double DirectionFormat::StringToValue(const QString& str)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&str};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline QString DirectionFormat::ValueToString(double Value)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}


inline int ScientificFormat::DecimalPlaces() const
{
    QVariant qax_result = property("DecimalPlaces");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline void ScientificFormat::Assign(esriSystem::IClone* src)
{
    void *_a[] = {0, (void*)&src};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline esriSystem::IClone* ScientificFormat::Clone()
{
    esriSystem::IClone* qax_result = 0;
    qRegisterMetaType<esriSystem::IClone*>("IClone*", &qax_result);
    qRegisterMetaType<esriSystem::IClone>("IClone", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void ScientificFormat::GetClassID(GUID*& pClassID)
{
    void *_a[] = {0, (void*)&pClassID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void ScientificFormat::GetSizeMax(_ULARGE_INTEGER*& pcbSize)
{
    void *_a[] = {0, (void*)&pcbSize};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline double ScientificFormat::Increment(double Value)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline void ScientificFormat::IsDirty()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline bool ScientificFormat::IsEqual(esriSystem::IClone* other)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&other};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline bool ScientificFormat::IsIdentical(esriSystem::IClone* other)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&other};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline void ScientificFormat::Load(esriSystem::IStream* pstm)
{
    void *_a[] = {0, (void*)&pstm};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void ScientificFormat::Save(esriSystem::IStream* pstm, int fClearDirty)
{
    void *_a[] = {0, (void*)&pstm, (void*)&fClearDirty};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void ScientificFormat::SetDecimalPlaces(int DecimalPlaces)
{
    void *_a[] = {0, (void*)&DecimalPlaces};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline double ScientificFormat::StringToValue(const QString& str)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&str};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline QString ScientificFormat::ValueToString(double Value)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}


inline esriSystem::esriNumericAlignmentEnum RateFormat::AlignmentOption() const
{
    QVariant qax_result = property("AlignmentOption");
    Q_ASSERT(qax_result.isValid());
    return *(esriSystem::esriNumericAlignmentEnum*)qax_result.constData();
}

inline int RateFormat::AlignmentWidth() const
{
    QVariant qax_result = property("AlignmentWidth");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline double RateFormat::RateFactor() const
{
    QVariant qax_result = property("RateFactor");
    Q_ASSERT(qax_result.isValid());
    return *(double*)qax_result.constData();
}

inline QString RateFormat::RateString() const
{
    QVariant qax_result = property("RateString");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline esriSystem::esriRoundingOptionEnum RateFormat::RoundingOption() const
{
    QVariant qax_result = property("RoundingOption");
    Q_ASSERT(qax_result.isValid());
    return *(esriSystem::esriRoundingOptionEnum*)qax_result.constData();
}

inline int RateFormat::RoundingValue() const
{
    QVariant qax_result = property("RoundingValue");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline bool RateFormat::ShowPlusSign() const
{
    QVariant qax_result = property("ShowPlusSign");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool RateFormat::UseSeparator() const
{
    QVariant qax_result = property("UseSeparator");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool RateFormat::ZeroPad() const
{
    QVariant qax_result = property("ZeroPad");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline void RateFormat::Assign(esriSystem::IClone* src)
{
    void *_a[] = {0, (void*)&src};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline esriSystem::IClone* RateFormat::Clone()
{
    esriSystem::IClone* qax_result = 0;
    qRegisterMetaType<esriSystem::IClone*>("IClone*", &qax_result);
    qRegisterMetaType<esriSystem::IClone>("IClone", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline void RateFormat::GetClassID(GUID*& pClassID)
{
    void *_a[] = {0, (void*)&pClassID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void RateFormat::GetSizeMax(_ULARGE_INTEGER*& pcbSize)
{
    void *_a[] = {0, (void*)&pcbSize};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline double RateFormat::Increment(double Value)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void RateFormat::IsDirty()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline bool RateFormat::IsEqual(esriSystem::IClone* other)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&other};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline bool RateFormat::IsIdentical(esriSystem::IClone* other)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&other};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline void RateFormat::Load(esriSystem::IStream* pstm)
{
    void *_a[] = {0, (void*)&pstm};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void RateFormat::Save(esriSystem::IStream* pstm, int fClearDirty)
{
    void *_a[] = {0, (void*)&pstm, (void*)&fClearDirty};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}

inline void RateFormat::SetAlignmentOption(esriSystem::esriNumericAlignmentEnum AlignmentOption)
{
    void *_a[] = {0, (void*)&AlignmentOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
}

inline void RateFormat::SetAlignmentWidth(int AlignmentWidth)
{
    void *_a[] = {0, (void*)&AlignmentWidth};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
}

inline void RateFormat::SetRateFactor(double RateFactor)
{
    void *_a[] = {0, (void*)&RateFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline void RateFormat::SetRateString(const QString& RateString)
{
    void *_a[] = {0, (void*)&RateString};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
}

inline void RateFormat::SetRoundingOption(esriSystem::esriRoundingOptionEnum RoundingOption)
{
    void *_a[] = {0, (void*)&RoundingOption};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline void RateFormat::SetRoundingValue(int RoundingValue)
{
    void *_a[] = {0, (void*)&RoundingValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline void RateFormat::SetShowPlusSign(bool ShowPlusSign)
{
    void *_a[] = {0, (void*)&ShowPlusSign};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline void RateFormat::SetUseSeparator(bool UseSeparator)
{
    void *_a[] = {0, (void*)&UseSeparator};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}

inline void RateFormat::SetZeroPad(bool ZeroPad)
{
    void *_a[] = {0, (void*)&ZeroPad};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}

inline double RateFormat::StringToValue(const QString& str)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&str};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
    return qax_result;
}

inline QString RateFormat::ValueToString(double Value)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
    return qax_result;
}


inline QString CustomNumberFormat::FormatString() const
{
    QVariant qax_result = property("FormatString");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void CustomNumberFormat::Assign(esriSystem::IClone* src)
{
    void *_a[] = {0, (void*)&src};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline esriSystem::IClone* CustomNumberFormat::Clone()
{
    esriSystem::IClone* qax_result = 0;
    qRegisterMetaType<esriSystem::IClone*>("IClone*", &qax_result);
    qRegisterMetaType<esriSystem::IClone>("IClone", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void CustomNumberFormat::GetClassID(GUID*& pClassID)
{
    void *_a[] = {0, (void*)&pClassID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void CustomNumberFormat::GetSizeMax(_ULARGE_INTEGER*& pcbSize)
{
    void *_a[] = {0, (void*)&pcbSize};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline double CustomNumberFormat::Increment(double Value)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline void CustomNumberFormat::IsDirty()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline bool CustomNumberFormat::IsEqual(esriSystem::IClone* other)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&other};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline bool CustomNumberFormat::IsIdentical(esriSystem::IClone* other)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&other};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline void CustomNumberFormat::Load(esriSystem::IStream* pstm)
{
    void *_a[] = {0, (void*)&pstm};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void CustomNumberFormat::Save(esriSystem::IStream* pstm, int fClearDirty)
{
    void *_a[] = {0, (void*)&pstm, (void*)&fClearDirty};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void CustomNumberFormat::SetFormatString(const QString& FormatString)
{
    void *_a[] = {0, (void*)&FormatString};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline double CustomNumberFormat::StringToValue(const QString& str)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&str};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline QString CustomNumberFormat::ValueToString(double Value)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}


inline void XMLStream::Clone(esriSystem::IStream** ppstm)
{
    void *_a[] = {0, (void*)&ppstm};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void XMLStream::Commit(uint grfCommitFlags)
{
    void *_a[] = {0, (void*)&grfCommitFlags};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void XMLStream::LoadFromBytes(QByteArray& bytes)
{
    void *_a[] = {0, (void*)&bytes};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void XMLStream::LoadFromFile(const QString& filePath)
{
    void *_a[] = {0, (void*)&filePath};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void XMLStream::LoadFromString(const QString& XML)
{
    void *_a[] = {0, (void*)&XML};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void XMLStream::LockRegion(esriSystem::_ULARGE_INTEGER libOffset, esriSystem::_ULARGE_INTEGER cb, uint dwLockType)
{
    void *_a[] = {0, (void*)&libOffset, (void*)&cb, (void*)&dwLockType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void XMLStream::RemoteCopyTo(esriSystem::IStream* pstm, esriSystem::_ULARGE_INTEGER cb, _ULARGE_INTEGER*& pcbRead, _ULARGE_INTEGER*& pcbWritten)
{
    void *_a[] = {0, (void*)&pstm, (void*)&cb, (void*)&pcbRead, (void*)&pcbWritten};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void XMLStream::RemoteSeek(esriSystem::_LARGE_INTEGER dlibMove, uint dwOrigin, _ULARGE_INTEGER*& plibNewPosition)
{
    void *_a[] = {0, (void*)&dlibMove, (void*)&dwOrigin, (void*)&plibNewPosition};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void XMLStream::Reset()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void XMLStream::Revert()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline QByteArray XMLStream::SaveToBytes()
{
    QByteArray qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline void XMLStream::SaveToFile(const QString& filePath)
{
    void *_a[] = {0, (void*)&filePath};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline QString XMLStream::SaveToString()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline void XMLStream::SetSize(esriSystem::_ULARGE_INTEGER libNewSize)
{
    void *_a[] = {0, (void*)&libNewSize};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline void XMLStream::Stat(tagSTATSTG*& pstatstg, uint grfStatFlag)
{
    void *_a[] = {0, (void*)&pstatstg, (void*)&grfStatFlag};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void XMLStream::UnlockRegion(esriSystem::_ULARGE_INTEGER libOffset, esriSystem::_ULARGE_INTEGER cb, uint dwLockType)
{
    void *_a[] = {0, (void*)&libOffset, (void*)&cb, (void*)&dwLockType};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}


inline esriSystem::IXMLAttributes* XMLReader::Attributes() const
{
    esriSystem::IXMLAttributes* qax_pointer = 0;
    qRegisterMetaType<esriSystem::IXMLAttributes*>("IXMLAttributes*", &qax_pointer);
    qRegisterMetaType<esriSystem::IXMLAttributes>("IXMLAttributes", qax_pointer);
    QVariant qax_result = property("Attributes");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(esriSystem::IXMLAttributes**)qax_result.constData();
}

inline bool XMLReader::HasElementChildren() const
{
    QVariant qax_result = property("HasElementChildren");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline bool XMLReader::IsLastChild() const
{
    QVariant qax_result = property("IsLastChild");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}

inline QString XMLReader::LocalName() const
{
    QVariant qax_result = property("LocalName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline esriSystem::IXMLNamespaces* XMLReader::NamespaceDeclarations() const
{
    esriSystem::IXMLNamespaces* qax_pointer = 0;
    qRegisterMetaType<esriSystem::IXMLNamespaces*>("IXMLNamespaces*", &qax_pointer);
    qRegisterMetaType<esriSystem::IXMLNamespaces>("IXMLNamespaces", qax_pointer);
    QVariant qax_result = property("NamespaceDeclarations");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(esriSystem::IXMLNamespaces**)qax_result.constData();
}

inline QString XMLReader::NamespacePrefix() const
{
    QVariant qax_result = property("NamespacePrefix");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString XMLReader::NamespaceURI() const
{
    QVariant qax_result = property("NamespaceURI");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString XMLReader::Text() const
{
    QVariant qax_result = property("Text");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline void XMLReader::CloseElement()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void XMLReader::InterfaceSupportsErrorInfo(GUID* riid)
{
    void *_a[] = {0, (void*)&riid};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline QString XMLReader::LookupPrefix(const QString& Prefix)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Prefix};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline void XMLReader::NextElement()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void XMLReader::OpenElement()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline QByteArray XMLReader::ReadBinary()
{
    QByteArray qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline bool XMLReader::ReadBoolean()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline uint XMLReader::ReadByte()
{
    uint qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline QDateTime XMLReader::ReadDate()
{
    QDateTime qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline double XMLReader::ReadDouble()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline double XMLReader::ReadFloat()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline void XMLReader::ReadFrom(esriSystem::IStream* inputStream)
{
    void *_a[] = {0, (void*)&inputStream};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline int XMLReader::ReadInteger()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline int XMLReader::ReadShort()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline QVariant XMLReader::ReadVariant()
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}


inline void XMLWriter::InterfaceSupportsErrorInfo(GUID* riid)
{
    void *_a[] = {0, (void*)&riid};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline QString XMLWriter::LookupNamespace(const QString& uri)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&uri};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline void XMLWriter::WriteBinary(QByteArray& Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void XMLWriter::WriteBoolean(bool Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void XMLWriter::WriteByte(uint Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void XMLWriter::WriteCData(const QString& cdata)
{
    void *_a[] = {0, (void*)&cdata};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void XMLWriter::WriteDate(const QDateTime& Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void XMLWriter::WriteDouble(double Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void XMLWriter::WriteEndTag()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void XMLWriter::WriteFloat(double Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void XMLWriter::WriteInteger(int Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void XMLWriter::WriteNewLine()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void XMLWriter::WriteShort(int Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void XMLWriter::WriteStartTag(const QString& LocalName, const QString& uri, esriSystem::IXMLAttributes* Attributes, esriSystem::IXMLNamespaces* namespaces, bool isEmpty)
{
    void *_a[] = {0, (void*)&LocalName, (void*)&uri, (void*)&Attributes, (void*)&namespaces, (void*)&isEmpty};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline void XMLWriter::WriteTab()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void XMLWriter::WriteText(const QString& Text)
{
    void *_a[] = {0, (void*)&Text};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}

inline void XMLWriter::WriteTo(esriSystem::IStream* outputStream)
{
    void *_a[] = {0, (void*)&outputStream};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
}

inline void XMLWriter::WriteVariant(const QVariant& Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
}

inline void XMLWriter::WriteXML(const QString& XML)
{
    void *_a[] = {0, (void*)&XML};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline void XMLWriter::WriteXMLDeclaration()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
}


inline int XMLAttributes::AttributeCount() const
{
    QVariant qax_result = property("AttributeCount");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline void XMLAttributes::AddAttribute(const QString& LocalName, const QString& NamespaceURI, const QString& Value)
{
    void *_a[] = {0, (void*)&LocalName, (void*)&NamespaceURI, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void XMLAttributes::DeleteAttribute(const QString& LocalName, const QString& NamespaceURI)
{
    void *_a[] = {0, (void*)&LocalName, (void*)&NamespaceURI};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline int XMLAttributes::FindAttribute(const QString& LocalName, const QString& NamespaceURI)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&LocalName, (void*)&NamespaceURI};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline QString XMLAttributes::LocalName(int index)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline QString XMLAttributes::NamespaceURI(int index)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline QString XMLAttributes::Value(int index)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}


inline int XMLNamespaces::NamespaceCount() const
{
    QVariant qax_result = property("NamespaceCount");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline void XMLNamespaces::AddNamespace(const QString& Prefix, const QString& uri)
{
    void *_a[] = {0, (void*)&Prefix, (void*)&uri};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void XMLNamespaces::DeleteNamespace(const QString& uri)
{
    void *_a[] = {0, (void*)&uri};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline QString XMLNamespaces::NamespaceURI(int index)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline QString XMLNamespaces::Prefix(int index)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}


inline QString XMLTypeMapper::FromBinary(QByteArray& Value)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline QString XMLTypeMapper::FromBoolean(bool Value)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline QString XMLTypeMapper::FromByte(uint Value)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline QString XMLTypeMapper::FromDate(const QDateTime& Value)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline QString XMLTypeMapper::FromDouble(double Value)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline QString XMLTypeMapper::FromFloat(double Value)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline QString XMLTypeMapper::FromInteger(int Value)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline QString XMLTypeMapper::FromShort(int Value)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline void XMLTypeMapper::InterfaceSupportsErrorInfo(GUID* riid)
{
    void *_a[] = {0, (void*)&riid};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline QByteArray XMLTypeMapper::ToBinary(const QString& Text)
{
    QByteArray qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Text};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline bool XMLTypeMapper::ToBoolean(const QString& Text)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Text};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline uint XMLTypeMapper::ToByte(const QString& Text)
{
    uint qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Text};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline QDateTime XMLTypeMapper::ToDate(const QString& Text)
{
    QDateTime qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Text};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline double XMLTypeMapper::ToDouble(const QString& Text)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Text};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline double XMLTypeMapper::ToFloat(const QString& Text)
{
    double qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Text};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline int XMLTypeMapper::ToInteger(const QString& Text)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Text};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline IUnknown* XMLTypeMapper::ToObject(const QString& NamespaceURI, const QString& TypeName)
{
    IUnknown* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&NamespaceURI, (void*)&TypeName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline int XMLTypeMapper::ToShort(const QString& Text)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Text};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}


inline void XMLSerializer::InterfaceSupportsErrorInfo(GUID* riid)
{
    void *_a[] = {0, (void*)&riid};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline IUnknown* XMLSerializer::LoadFromString(const QString& XML, esriSystem::IPropertySet* environment, esriSystem::IXMLFlags* flags)
{
    IUnknown* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&XML, (void*)&environment, (void*)&flags};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline IUnknown* XMLSerializer::ReadObject(esriSystem::IXMLReader* pReader, esriSystem::IPropertySet* environment, esriSystem::IXMLFlags* flags)
{
    IUnknown* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&pReader, (void*)&environment, (void*)&flags};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline IUnknown* XMLSerializer::ReadObjectByType(esriSystem::IXMLReader* pReader, esriSystem::IPropertySet* environment, esriSystem::IXMLFlags* flags, const QString& typeNamespace, const QString& TypeName)
{
    IUnknown* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&pReader, (void*)&environment, (void*)&flags, (void*)&typeNamespace, (void*)&TypeName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline QString XMLSerializer::SaveToString(IUnknown* obj, esriSystem::IPropertySet* environment, esriSystem::IXMLFlags* flags)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&obj, (void*)&environment, (void*)&flags};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline void XMLSerializer::WriteObject(esriSystem::IXMLWriter* pWriter, esriSystem::IPropertySet* environment, esriSystem::IXMLFlags* flags, const QString& elementName, const QString& elementNamespaceURI, IUnknown* obj)
{
    void *_a[] = {0, (void*)&pWriter, (void*)&environment, (void*)&flags, (void*)&elementName, (void*)&elementNamespaceURI, (void*)&obj};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}


inline void XMLSerializerAlt::InterfaceSupportsErrorInfo(GUID* riid)
{
    void *_a[] = {0, (void*)&riid};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline IUnknown* XMLSerializerAlt::LoadFromString(const QString& XML, const QString& TypeName, const QString& TypeNamespaceURI)
{
    IUnknown* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&XML, (void*)&TypeName, (void*)&TypeNamespaceURI};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}


inline int XMLFlags::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString XMLFlags::FlagName(int index)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline bool XMLFlags::FlagValue(int index)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline bool XMLFlags::GetFlag(const QString& Name)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Name};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline void XMLFlags::SetFlag(const QString& Name, bool FlagValue)
{
    void *_a[] = {0, (void*)&Name, (void*)&FlagValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}


inline int JSONArray::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline void JSONArray::Add(const QVariant& Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void JSONArray::AddBoolean(bool Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void JSONArray::AddDate(const QDateTime& Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void JSONArray::AddDouble(double Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void JSONArray::AddDoubleEx(double Value, int precision)
{
    void *_a[] = {0, (void*)&Value, (void*)&precision};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void JSONArray::AddJSONArray(esriSystem::IJSONArray* Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void JSONArray::AddJSONObject(esriSystem::IJSONObject* Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void JSONArray::AddLong(int Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void JSONArray::AddNull()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void JSONArray::AddString(const QString& Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void JSONArray::ClearAll()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void JSONArray::CreateMemberArray(esriSystem::IJSONArray** Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void JSONArray::CreateMemberObject(esriSystem::IJSONObject** Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline void JSONArray::InterfaceSupportsErrorInfo(GUID* riid)
{
    void *_a[] = {0, (void*)&riid};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline bool JSONArray::IsValueNull(int index)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline void JSONArray::ParseJSON(esriSystem::IJSONReader* pReader)
{
    void *_a[] = {0, (void*)&pReader};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
}

inline void JSONArray::ParseString(const QString& json)
{
    void *_a[] = {0, (void*)&json};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
}

inline void JSONArray::RemoveValue(int index)
{
    void *_a[] = {0, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline void JSONArray::ToJSON(const QString& objectName, esriSystem::IJSONWriter* pWriter)
{
    void *_a[] = {0, (void*)&objectName, (void*)&pWriter};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
}

inline QString JSONArray::ToJSONString(esriSystem::IPropertySet* props)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&props};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline bool JSONArray::TryGetValueAsArray(int index, esriSystem::IJSONArray** Value)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&index, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline bool JSONArray::TryGetValueAsBoolean(int index, bool& Value)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&index, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
    return qax_result;
}

inline bool JSONArray::TryGetValueAsDate(int index, QDateTime& Value)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&index, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline bool JSONArray::TryGetValueAsDouble(int index, double& Value)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&index, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
    return qax_result;
}

inline bool JSONArray::TryGetValueAsLong(int index, int& Value)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&index, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
    return qax_result;
}

inline bool JSONArray::TryGetValueAsObject(int index, esriSystem::IJSONObject** Value)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&index, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
    return qax_result;
}

inline bool JSONArray::TryGetValueAsString(int index, QString& Value)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&index, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
    return qax_result;
}

inline QVariant JSONArray::Value(int index)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
    return qax_result;
}


inline bool JSONObject::CaseSensitiveNames() const
{
    QVariant qax_result = property("CaseSensitiveNames");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void JSONObject::SetCaseSensitiveNames(bool value){ setProperty("CaseSensitiveNames", QVariant(value)); }

inline int JSONObject::MemberCount() const
{
    QVariant qax_result = property("MemberCount");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline void JSONObject::Add(const QString& Name, const QVariant& Value)
{
    void *_a[] = {0, (void*)&Name, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void JSONObject::AddBoolean(const QString& Name, bool Value)
{
    void *_a[] = {0, (void*)&Name, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void JSONObject::AddDate(const QString& Name, const QDateTime& Value)
{
    void *_a[] = {0, (void*)&Name, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void JSONObject::AddDouble(const QString& Name, double Value)
{
    void *_a[] = {0, (void*)&Name, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void JSONObject::AddDoubleEx(const QString& Name, double Value, int precision)
{
    void *_a[] = {0, (void*)&Name, (void*)&Value, (void*)&precision};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void JSONObject::AddJSONArray(const QString& Name, esriSystem::IJSONArray* Value)
{
    void *_a[] = {0, (void*)&Name, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void JSONObject::AddJSONObject(const QString& Name, esriSystem::IJSONObject* Value)
{
    void *_a[] = {0, (void*)&Name, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void JSONObject::AddLong(const QString& Name, int Value)
{
    void *_a[] = {0, (void*)&Name, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void JSONObject::AddNull(const QString& Name)
{
    void *_a[] = {0, (void*)&Name};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void JSONObject::AddString(const QString& Name, const QString& Value)
{
    void *_a[] = {0, (void*)&Name, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void JSONObject::ClearAll()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void JSONObject::CreateMemberArray(const QString& Name, esriSystem::IJSONArray** Value)
{
    void *_a[] = {0, (void*)&Name, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void JSONObject::CreateMemberObject(const QString& Name, esriSystem::IJSONObject** Value)
{
    void *_a[] = {0, (void*)&Name, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline void JSONObject::GetMemberAt(int index, QString& Name, QVariant& Value)
{
    void *_a[] = {0, (void*)&index, (void*)&Name, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void JSONObject::InterfaceSupportsErrorInfo(GUID* riid)
{
    void *_a[] = {0, (void*)&riid};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}

inline bool JSONObject::IsValueNull(const QString& Name)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Name};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline void JSONObject::MakeValueNull(const QString& Name)
{
    void *_a[] = {0, (void*)&Name};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
}

inline bool JSONObject::MemberExists(const QString& Name)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Name};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline void JSONObject::ParseJSON(esriSystem::IJSONReader* pReader)
{
    void *_a[] = {0, (void*)&pReader};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline void JSONObject::ParseString(const QString& json)
{
    void *_a[] = {0, (void*)&json};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline void JSONObject::RemoveMember(const QString& Name)
{
    void *_a[] = {0, (void*)&Name};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline void JSONObject::ToJSON(const QString& objectName, esriSystem::IJSONWriter* pWriter)
{
    void *_a[] = {0, (void*)&objectName, (void*)&pWriter};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}

inline QString JSONObject::ToJSONString(esriSystem::IPropertySet* props)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&props};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
    return qax_result;
}

inline bool JSONObject::TryGetValue(const QString& Name, QVariant& Value)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Name, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
    return qax_result;
}

inline bool JSONObject::TryGetValueAsArray(const QString& Name, esriSystem::IJSONArray** Value)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Name, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
    return qax_result;
}

inline bool JSONObject::TryGetValueAsBoolean(const QString& Name, bool& Value)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Name, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
    return qax_result;
}

inline bool JSONObject::TryGetValueAsDate(const QString& Name, QDateTime& Value)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Name, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
    return qax_result;
}

inline bool JSONObject::TryGetValueAsDouble(const QString& Name, double& Value)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Name, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
    return qax_result;
}

inline bool JSONObject::TryGetValueAsLong(const QString& Name, int& Value)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Name, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
    return qax_result;
}

inline bool JSONObject::TryGetValueAsObject(const QString& Name, esriSystem::IJSONObject** Value)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Name, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
    return qax_result;
}

inline bool JSONObject::TryGetValueAsString(const QString& Name, QString& Value)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Name, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
    return qax_result;
}


inline esriSystem::IStream* JSONWriter::Stream() const
{
    esriSystem::IStream* qax_pointer = 0;
    qRegisterMetaType<esriSystem::IStream*>("IStream*", &qax_pointer);
    qRegisterMetaType<esriSystem::IStream>("IStream", qax_pointer);
    QVariant qax_result = property("Stream");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(esriSystem::IStream**)qax_result.constData();
}

inline void JSONWriter::EndArray()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void JSONWriter::EndObject()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline QByteArray JSONWriter::GetStringBuffer()
{
    QByteArray qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline void JSONWriter::InterfaceSupportsErrorInfo(GUID* riid)
{
    void *_a[] = {0, (void*)&riid};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void JSONWriter::Reset()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void JSONWriter::SetFormatted(bool Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void JSONWriter::SetIndent(int Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void JSONWriter::StartArray(const QString& Name)
{
    void *_a[] = {0, (void*)&Name};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void JSONWriter::StartObject(const QString& Name)
{
    void *_a[] = {0, (void*)&Name};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void JSONWriter::WriteBinary(const QString& Name, QByteArray& Value)
{
    void *_a[] = {0, (void*)&Name, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void JSONWriter::WriteBinaryVal(QByteArray& Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void JSONWriter::WriteBoolean(const QString& Name, bool Value)
{
    void *_a[] = {0, (void*)&Name, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void JSONWriter::WriteBooleanVal(bool Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline void JSONWriter::WriteByte(const QString& Name, uint Value)
{
    void *_a[] = {0, (void*)&Name, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void JSONWriter::WriteByteVal(uint Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}

inline void JSONWriter::WriteDate(const QString& Name, const QDateTime& Value, bool asString)
{
    void *_a[] = {0, (void*)&Name, (void*)&Value, (void*)&asString};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
}

inline void JSONWriter::WriteDateVal(const QDateTime& Value, bool asString)
{
    void *_a[] = {0, (void*)&Value, (void*)&asString};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
}

inline void JSONWriter::WriteDouble(const QString& Name, double Value)
{
    void *_a[] = {0, (void*)&Name, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline void JSONWriter::WriteDoubleEx(const QString& Name, double Value, int precision)
{
    void *_a[] = {0, (void*)&Name, (void*)&Value, (void*)&precision};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
}

inline void JSONWriter::WriteDoubleVal(double Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline void JSONWriter::WriteDoubleValEx(double Value, int precision)
{
    void *_a[] = {0, (void*)&Value, (void*)&precision};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline void JSONWriter::WriteFloat(const QString& Name, double Value)
{
    void *_a[] = {0, (void*)&Name, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline void JSONWriter::WriteFloatVal(double Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}

inline void JSONWriter::WriteInteger(const QString& Name, int Value)
{
    void *_a[] = {0, (void*)&Name, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}

inline void JSONWriter::WriteIntegerVal(int Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
}

inline void JSONWriter::WriteNull(const QString& Name)
{
    void *_a[] = {0, (void*)&Name};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
}

inline void JSONWriter::WriteNullVal()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
}

inline void JSONWriter::WriteRawString(const QString& Name, const QString& Value)
{
    void *_a[] = {0, (void*)&Name, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
}

inline void JSONWriter::WriteRawStringVal(const QString& Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
}

inline void JSONWriter::WriteShort(const QString& Name, int Value)
{
    void *_a[] = {0, (void*)&Name, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
}

inline void JSONWriter::WriteShortVal(int Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
}

inline void JSONWriter::WriteString(const QString& Name, const QString& Value)
{
    void *_a[] = {0, (void*)&Name, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
}

inline void JSONWriter::WriteStringVal(const QString& Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
}

inline void JSONWriter::WriteTo(esriSystem::IStream* outputStream)
{
    void *_a[] = {0, (void*)&outputStream};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
}

inline void JSONWriter::WriteToString()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
}

inline void JSONWriter::WriteVariant(const QString& Name, const QVariant& Value)
{
    void *_a[] = {0, (void*)&Name, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
}

inline void JSONWriter::WriteVariantVal(const QVariant& Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
}


inline esriSystem::IStream* AMFWriter::Stream() const
{
    esriSystem::IStream* qax_pointer = 0;
    qRegisterMetaType<esriSystem::IStream*>("IStream*", &qax_pointer);
    qRegisterMetaType<esriSystem::IStream>("IStream", qax_pointer);
    QVariant qax_result = property("Stream");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(esriSystem::IStream**)qax_result.constData();
}

inline void AMFWriter::EndAMF3Array()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void AMFWriter::EndAMF3Object()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void AMFWriter::EndAMF3ObjectTraits()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void AMFWriter::GetCopy(esriSystem::IAMFWriter** ppOutWriter)
{
    void *_a[] = {0, (void*)&ppOutWriter};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void AMFWriter::InterfaceSupportsErrorInfo(GUID* riid)
{
    void *_a[] = {0, (void*)&riid};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void AMFWriter::StartAMF3Array(int denseCount, int& obj_ref)
{
    void *_a[] = {0, (void*)&denseCount, (void*)&obj_ref};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void AMFWriter::StartAMF3CustomObject(const QString& classname, int& obj_ref)
{
    void *_a[] = {0, (void*)&classname, (void*)&obj_ref};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void AMFWriter::StartAMF3Object(int traits_ref, int& obj_ref)
{
    void *_a[] = {0, (void*)&traits_ref, (void*)&obj_ref};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void AMFWriter::StartAMF3ObjectWithTraits(const QString& classname, int MemberCount, bool dynamic, int& traits_ref, int& obj_ref)
{
    void *_a[] = {0, (void*)&classname, (void*)&MemberCount, (void*)&dynamic, (void*)&traits_ref, (void*)&obj_ref};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void AMFWriter::WriteAMF3ArrayDenseMarker()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void AMFWriter::WriteAMF3ArrayRef(int obj_ref)
{
    void *_a[] = {0, (void*)&obj_ref};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void AMFWriter::WriteAMF3Bool(bool Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void AMFWriter::WriteAMF3ByteArray(QByteArray& ppArray, int& obj_ref)
{
    void *_a[] = {0, (void*)&ppArray, (void*)&obj_ref};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline void AMFWriter::WriteAMF3ByteArrayRef(int obj_ref)
{
    void *_a[] = {0, (void*)&obj_ref};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void AMFWriter::WriteAMF3Date(const QDateTime& Value, bool asJsonNumber, int& obj_ref)
{
    void *_a[] = {0, (void*)&Value, (void*)&asJsonNumber, (void*)&obj_ref};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}

inline void AMFWriter::WriteAMF3DateRef(int obj_ref)
{
    void *_a[] = {0, (void*)&obj_ref};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
}

inline void AMFWriter::WriteAMF3Double(double Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
}

inline void AMFWriter::WriteAMF3Int(int Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline void AMFWriter::WriteAMF3Null()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
}

inline void AMFWriter::WriteAMF3ObjectRef(int obj_ref)
{
    void *_a[] = {0, (void*)&obj_ref};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline void AMFWriter::WriteAMF3String(const QString& Value, int& string_ref)
{
    void *_a[] = {0, (void*)&Value, (void*)&string_ref};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline void AMFWriter::WriteAMF3StringRef(int string_ref)
{
    void *_a[] = {0, (void*)&string_ref};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline void AMFWriter::WriteAMF3Undefined()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}

inline void AMFWriter::WriteAMF3Variant(const QVariant& Value, int& value_ref)
{
    void *_a[] = {0, (void*)&Value, (void*)&value_ref};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}

inline void AMFWriter::WriteAMF3Xml(const QString& Value, int& obj_ref)
{
    void *_a[] = {0, (void*)&Value, (void*)&obj_ref};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
}

inline void AMFWriter::WriteAMF3XmlDoc(const QString& Value, int& obj_ref)
{
    void *_a[] = {0, (void*)&Value, (void*)&obj_ref};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
}

inline void AMFWriter::WriteAMF3XmlDocRef(int obj_ref)
{
    void *_a[] = {0, (void*)&obj_ref};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
}

inline void AMFWriter::WriteAMF3XmlRef(int obj_ref)
{
    void *_a[] = {0, (void*)&obj_ref};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
}

inline void AMFWriter::WriteAMF3_UTF8(const QString& Value, int& string_ref)
{
    void *_a[] = {0, (void*)&Value, (void*)&string_ref};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
}

inline void AMFWriter::WriteAMF3_UTF8Ref(int string_ref)
{
    void *_a[] = {0, (void*)&string_ref};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
}

inline void AMFWriter::WriteTo(esriSystem::IStream* outputStream)
{
    void *_a[] = {0, (void*)&outputStream};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
}

inline void AMFWriter::WriteU16(int b)
{
    void *_a[] = {0, (void*)&b};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
}

inline void AMFWriter::WriteU32(int b)
{
    void *_a[] = {0, (void*)&b};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
}

inline void AMFWriter::WriteU8(uint b)
{
    void *_a[] = {0, (void*)&b};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
}

inline void AMFWriter::WriteUTF8(const QString& Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
}


inline esriSystem::JSONTokenType JSONReader::CurrentTokenType() const
{
    QVariant qax_result = property("CurrentTokenType");
    Q_ASSERT(qax_result.isValid());
    return *(esriSystem::JSONTokenType*)qax_result.constData();
}

inline esriSystem::IStream* JSONReader::Stream() const
{
    esriSystem::IStream* qax_pointer = 0;
    qRegisterMetaType<esriSystem::IStream*>("IStream*", &qax_pointer);
    qRegisterMetaType<esriSystem::IStream>("IStream", qax_pointer);
    QVariant qax_result = property("Stream");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(esriSystem::IStream**)qax_result.constData();
}

inline int JSONReader::FindProperties(esriSystem::IStringArray* propnames)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&propnames};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline bool JSONReader::FindProperty(const QString& propname)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&propname};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline void JSONReader::InterfaceSupportsErrorInfo(GUID* riid)
{
    void *_a[] = {0, (void*)&riid};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline bool JSONReader::IsBoolean()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline bool JSONReader::IsEndOfArray()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline bool JSONReader::IsEndOfObject()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline bool JSONReader::IsNull()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline bool JSONReader::IsNumber()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline bool JSONReader::IsStartOfArray()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline bool JSONReader::IsStartOfObject()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline bool JSONReader::IsString()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline IUnknown* JSONReader::ParseJSONString(const QString& json)
{
    IUnknown* qax_result = 0;
    void *_a[] = {(void*)&qax_result, (void*)&json};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline void JSONReader::Read()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline void JSONReader::ReadFrom(esriSystem::IStream* inputStream)
{
    void *_a[] = {0, (void*)&inputStream};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void JSONReader::ReadFromString(const QString& Text)
{
    void *_a[] = {0, (void*)&Text};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}

inline QString JSONReader::ReadPropertyName()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline QVariant JSONReader::ReadValue()
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline bool JSONReader::ReadValueAsBoolean()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline QDateTime JSONReader::ReadValueAsDate()
{
    QDateTime qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline double JSONReader::ReadValueAsDouble()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline int JSONReader::ReadValueAsLong()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline QString JSONReader::ReadValueAsString()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
    return qax_result;
}

inline void JSONReader::ReadValueEx(QVariant& pVal, int& precision)
{
    void *_a[] = {0, (void*)&pVal, (void*)&precision};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}

inline void JSONReader::RemoveAllBookmarks()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}

inline void JSONReader::RemoveBookmark(const QString& Name)
{
    void *_a[] = {0, (void*)&Name};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
}

inline void JSONReader::ReturnToBookmark(const QString& Name)
{
    void *_a[] = {0, (void*)&Name};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
}

inline void JSONReader::SetBookmark(const QString& Name)
{
    void *_a[] = {0, (void*)&Name};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
}

inline void JSONReader::SkipUntilArrayEnds()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
}

inline void JSONReader::SkipUntilObjectEnds()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
}


inline int Time::Day() const
{
    QVariant qax_result = property("Day");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void Time::SetDay(int value){ setProperty("Day", QVariant(value)); }

inline int Time::DayOfWeek() const
{
    QVariant qax_result = property("DayOfWeek");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int Time::DayOfYear() const
{
    QVariant qax_result = property("DayOfYear");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int Time::Hour() const
{
    QVariant qax_result = property("Hour");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void Time::SetHour(int value){ setProperty("Hour", QVariant(value)); }

inline QString Time::MinNamespaceSupported() const
{
    QVariant qax_result = property("MinNamespaceSupported");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline int Time::Minute() const
{
    QVariant qax_result = property("Minute");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void Time::SetMinute(int value){ setProperty("Minute", QVariant(value)); }

inline int Time::Month() const
{
    QVariant qax_result = property("Month");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void Time::SetMonth(int value){ setProperty("Month", QVariant(value)); }

inline int Time::Nanoseconds() const
{
    QVariant qax_result = property("Nanoseconds");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void Time::SetNanoseconds(int value){ setProperty("Nanoseconds", QVariant(value)); }

inline int Time::Second() const
{
    QVariant qax_result = property("Second");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void Time::SetSecond(int value){ setProperty("Second", QVariant(value)); }

inline int Time::Year() const
{
    QVariant qax_result = property("Year");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void Time::SetYear(int value){ setProperty("Year", QVariant(value)); }

inline void Time::AddDays(double Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void Time::AddDuration(esriSystem::ITimeDuration* TimeDuration)
{
    void *_a[] = {0, (void*)&TimeDuration};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void Time::AddHours(double Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void Time::AddMilliseconds(double Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void Time::AddMinutes(double Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline bool Time::AddMonths(double Value, bool preserveEndOfMonth, bool goForwardOnInvalidDate)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Value, (void*)&preserveEndOfMonth, (void*)&goForwardOnInvalidDate};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline void Time::AddNanoseconds(qlonglong Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void Time::AddSeconds(double Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void Time::AddWeeks(double Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline bool Time::AddYears(double Value, bool preserveEndOfMonth, bool goForwardOnInvalidDate)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Value, (void*)&preserveEndOfMonth, (void*)&goForwardOnInvalidDate};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline void Time::Assign(esriSystem::IClone* src)
{
    void *_a[] = {0, (void*)&src};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline esriSystem::IClone* Time::Clone()
{
    esriSystem::IClone* qax_result = 0;
    qRegisterMetaType<esriSystem::IClone*>("IClone*", &qax_result);
    qRegisterMetaType<esriSystem::IClone>("IClone", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline int Time::Compare(esriSystem::ITime* otherTime)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&otherTime};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline QVariant Time::ConvertToSupportedObject(esriSystem::esriArcGISVersion docVersion)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&docVersion};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline void Time::Deserialize(esriSystem::IXMLSerializeData* data)
{
    void *_a[] = {0, (void*)&data};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
}

inline void Time::GetSizeMax(_ULARGE_INTEGER*& pcbSize)
{
    void *_a[] = {0, (void*)&pcbSize};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline void Time::IsDirty()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline bool Time::IsEqual(esriSystem::IClone* other)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&other};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline bool Time::IsIdentical(esriSystem::IClone* other)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&other};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
    return qax_result;
}

inline bool Time::IsSupportedAtVersion(esriSystem::esriArcGISVersion docVersion)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&docVersion};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline void Time::Load(esriSystem::IStream* pstm)
{
    void *_a[] = {0, (void*)&pstm};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}

inline double Time::QueryDayFraction()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
    return qax_result;
}

inline _WKSDateTime* Time::QueryGregorianTime()
{
    _WKSDateTime* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
    return qax_result;
}

inline qlonglong Time::QueryIntegerTime(esriSystem::esriIntegerTimeFormat integerTimeFormat)
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&integerTimeFormat};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
    return qax_result;
}

inline int Time::QueryJulianDayNumber()
{
    int qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
    return qax_result;
}

inline qlonglong Time::QueryNanosecondsSinceMidnight()
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
    return qax_result;
}

inline QDateTime Time::QueryOleTime()
{
    QDateTime qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
    return qax_result;
}

inline qlonglong Time::QueryTicks()
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
    return qax_result;
}

inline QString Time::QueryTimeString(esriSystem::esriTimeStringFormat timeStringFormat)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&timeStringFormat};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
    return qax_result;
}

inline QString Time::QueryTimeStringCurrentLocale(esriSystem::esriTimeLocaleFormat timeLocaleFormat)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&timeLocaleFormat};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
    return qax_result;
}

inline QString Time::QueryTimeStringCustom(const QString& timeStringFormat, int LocaleID, const QString& amSymbol, const QString& pmSymbol)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&timeStringFormat, (void*)&LocaleID, (void*)&amSymbol, (void*)&pmSymbol};
    qt_metacall(QMetaObject::InvokeMetaMethod, 46, _a);
    return qax_result;
}

inline QString Time::QueryXMLTimeString(esriSystem::ITimeReference* TimeReference)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&TimeReference};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
    return qax_result;
}

inline void Time::Save(esriSystem::IStream* pstm, int fClearDirty)
{
    void *_a[] = {0, (void*)&pstm, (void*)&fClearDirty};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
}

inline void Time::Serialize(esriSystem::IXMLSerializeData* data)
{
    void *_a[] = {0, (void*)&data};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
}

inline void Time::SetDayFraction(double dayFraction)
{
    void *_a[] = {0, (void*)&dayFraction};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
}

inline void Time::SetFromCurrentLocalTime()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
}

inline void Time::SetFromCurrentUtcTime()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 54, _a);
}

inline void Time::SetFromGregorianTime(_WKSDateTime* gregorianTime)
{
    void *_a[] = {0, (void*)&gregorianTime};
    qt_metacall(QMetaObject::InvokeMetaMethod, 55, _a);
}

inline void Time::SetFromIntegerTime(esriSystem::esriIntegerTimeFormat integerTimeFormat, qlonglong integerTime)
{
    void *_a[] = {0, (void*)&integerTimeFormat, (void*)&integerTime};
    qt_metacall(QMetaObject::InvokeMetaMethod, 56, _a);
}

inline void Time::SetFromObject(const QVariant& Object)
{
    void *_a[] = {0, (void*)&Object};
    qt_metacall(QMetaObject::InvokeMetaMethod, 57, _a);
}

inline void Time::SetFromOleTime(const QDateTime& oleTime)
{
    void *_a[] = {0, (void*)&oleTime};
    qt_metacall(QMetaObject::InvokeMetaMethod, 58, _a);
}

inline void Time::SetFromTicks(qlonglong ticks)
{
    void *_a[] = {0, (void*)&ticks};
    qt_metacall(QMetaObject::InvokeMetaMethod, 59, _a);
}

inline void Time::SetFromTimeString(esriSystem::esriTimeStringFormat timeStringFormat, const QString& timeString)
{
    void *_a[] = {0, (void*)&timeStringFormat, (void*)&timeString};
    qt_metacall(QMetaObject::InvokeMetaMethod, 60, _a);
}

inline void Time::SetFromTimeStringCurrentLocale(esriSystem::esriTimeLocaleFormat timeLocaleFormat, const QString& timeString)
{
    void *_a[] = {0, (void*)&timeLocaleFormat, (void*)&timeString};
    qt_metacall(QMetaObject::InvokeMetaMethod, 61, _a);
}

inline void Time::SetFromTimeStringCustom(const QString& timeStringFormat, int LocaleID, const QString& amSymbol, const QString& pmSymbol, const QString& timeString)
{
    void *_a[] = {0, (void*)&timeStringFormat, (void*)&LocaleID, (void*)&amSymbol, (void*)&pmSymbol, (void*)&timeString};
    qt_metacall(QMetaObject::InvokeMetaMethod, 62, _a);
}

inline int Time::SetFromXMLTimeString(const QString& xmlTimeString)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&xmlTimeString};
    qt_metacall(QMetaObject::InvokeMetaMethod, 63, _a);
    return qax_result;
}

inline void Time::SetJulianDayNumber(int julianDayNumber)
{
    void *_a[] = {0, (void*)&julianDayNumber};
    qt_metacall(QMetaObject::InvokeMetaMethod, 65, _a);
}

inline void Time::SetNanosecondsSinceMidnight(qlonglong nanosecondsSinceMidnight)
{
    void *_a[] = {0, (void*)&nanosecondsSinceMidnight};
    qt_metacall(QMetaObject::InvokeMetaMethod, 69, _a);
}

inline void Time::SnapToEndOfMonth()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 72, _a);
}

inline void Time::SubtractDuration(esriSystem::ITimeDuration* TimeDuration)
{
    void *_a[] = {0, (void*)&TimeDuration};
    qt_metacall(QMetaObject::InvokeMetaMethod, 73, _a);
}

inline esriSystem::ITimeDuration* Time::SubtractTime(esriSystem::ITime* Time)
{
    esriSystem::ITimeDuration* qax_result = 0;
    qRegisterMetaType<esriSystem::ITimeDuration*>("ITimeDuration*", &qax_result);
    qRegisterMetaType<esriSystem::ITimeDuration>("ITimeDuration", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Time};
    qt_metacall(QMetaObject::InvokeMetaMethod, 74, _a);
    return qax_result;
}

inline void Time::ToLocal()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 75, _a);
}

inline void Time::ToUTC()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 76, _a);
}

inline int Time::WeekOfMonth(int startDayOfWeek)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&startDayOfWeek};
    qt_metacall(QMetaObject::InvokeMetaMethod, 77, _a);
    return qax_result;
}

inline int Time::WeekOfYear(int startDayOfWeek)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&startDayOfWeek};
    qt_metacall(QMetaObject::InvokeMetaMethod, 78, _a);
    return qax_result;
}


inline int TimeDuration::Days() const
{
    QVariant qax_result = property("Days");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void TimeDuration::SetDays(int value){ setProperty("Days", QVariant(value)); }

inline int TimeDuration::Hours() const
{
    QVariant qax_result = property("Hours");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void TimeDuration::SetHours(int value){ setProperty("Hours", QVariant(value)); }

inline QString TimeDuration::MinNamespaceSupported() const
{
    QVariant qax_result = property("MinNamespaceSupported");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline int TimeDuration::Minutes() const
{
    QVariant qax_result = property("Minutes");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void TimeDuration::SetMinutes(int value){ setProperty("Minutes", QVariant(value)); }

inline int TimeDuration::Nanoseconds() const
{
    QVariant qax_result = property("Nanoseconds");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void TimeDuration::SetNanoseconds(int value){ setProperty("Nanoseconds", QVariant(value)); }

inline bool TimeDuration::Positive() const
{
    QVariant qax_result = property("Positive");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void TimeDuration::SetPositive(bool value){ setProperty("Positive", QVariant(value)); }

inline int TimeDuration::Seconds() const
{
    QVariant qax_result = property("Seconds");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void TimeDuration::SetSeconds(int value){ setProperty("Seconds", QVariant(value)); }

inline void TimeDuration::AddDays(double Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void TimeDuration::AddDuration(esriSystem::ITimeDuration* TimeDuration)
{
    void *_a[] = {0, (void*)&TimeDuration};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void TimeDuration::AddHours(double Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void TimeDuration::AddMilliseconds(double Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void TimeDuration::AddMinutes(double Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void TimeDuration::AddNanoseconds(qlonglong Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void TimeDuration::AddSeconds(double Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void TimeDuration::AddWeeks(double Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void TimeDuration::Assign(esriSystem::IClone* src)
{
    void *_a[] = {0, (void*)&src};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline esriSystem::IClone* TimeDuration::Clone()
{
    esriSystem::IClone* qax_result = 0;
    qRegisterMetaType<esriSystem::IClone*>("IClone*", &qax_result);
    qRegisterMetaType<esriSystem::IClone>("IClone", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline int TimeDuration::Compare(esriSystem::ITimeDuration* otherDuration)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&otherDuration};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline QVariant TimeDuration::ConvertToSupportedObject(esriSystem::esriArcGISVersion docVersion)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&docVersion};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline void TimeDuration::Deserialize(esriSystem::IXMLSerializeData* data)
{
    void *_a[] = {0, (void*)&data};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline void TimeDuration::GetSizeMax(_ULARGE_INTEGER*& pcbSize)
{
    void *_a[] = {0, (void*)&pcbSize};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void TimeDuration::IsDirty()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
}

inline bool TimeDuration::IsEqual(esriSystem::IClone* other)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&other};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
    return qax_result;
}

inline bool TimeDuration::IsIdentical(esriSystem::IClone* other)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&other};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline bool TimeDuration::IsSupportedAtVersion(esriSystem::esriArcGISVersion docVersion)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&docVersion};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline bool TimeDuration::IsZero()
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline void TimeDuration::Load(esriSystem::IStream* pstm)
{
    void *_a[] = {0, (void*)&pstm};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline double TimeDuration::QueryDayFraction()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
    return qax_result;
}

inline qlonglong TimeDuration::QueryDayFractionNanoseconds()
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
    return qax_result;
}

inline qlonglong TimeDuration::QueryTicks()
{
    qlonglong qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
    return qax_result;
}

inline double TimeDuration::QueryTotalDays()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
    return qax_result;
}

inline double TimeDuration::QueryTotalHours()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
    return qax_result;
}

inline double TimeDuration::QueryTotalMinutes()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
    return qax_result;
}

inline double TimeDuration::QueryTotalSeconds()
{
    double qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
    return qax_result;
}

inline _WKSTimeDuration* TimeDuration::QueryWKSTimeDuration()
{
    _WKSTimeDuration* qax_result = 0;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 41, _a);
    return qax_result;
}

inline QString TimeDuration::QueryXMLTimeDurationString()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
    return qax_result;
}

inline void TimeDuration::Reset()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
}

inline void TimeDuration::Save(esriSystem::IStream* pstm, int fClearDirty)
{
    void *_a[] = {0, (void*)&pstm, (void*)&fClearDirty};
    qt_metacall(QMetaObject::InvokeMetaMethod, 44, _a);
}

inline void TimeDuration::Scale(double scaleFactor)
{
    void *_a[] = {0, (void*)&scaleFactor};
    qt_metacall(QMetaObject::InvokeMetaMethod, 45, _a);
}

inline void TimeDuration::Serialize(esriSystem::IXMLSerializeData* data)
{
    void *_a[] = {0, (void*)&data};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
}

inline void TimeDuration::SetDayFraction(double dayFraction)
{
    void *_a[] = {0, (void*)&dayFraction};
    qt_metacall(QMetaObject::InvokeMetaMethod, 48, _a);
}

inline void TimeDuration::SetDayFractionNanoseconds(qlonglong dayFractionNanoseconds)
{
    void *_a[] = {0, (void*)&dayFractionNanoseconds};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
}

inline void TimeDuration::SetFromTicks(qlonglong ticks)
{
    void *_a[] = {0, (void*)&ticks};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
}

inline void TimeDuration::SetFromWKSTimeDuration(_WKSTimeDuration* TimeDuration)
{
    void *_a[] = {0, (void*)&TimeDuration};
    qt_metacall(QMetaObject::InvokeMetaMethod, 52, _a);
}

inline void TimeDuration::SetFromXMLTimeDurationString(const QString& xmlTimeDurationString)
{
    void *_a[] = {0, (void*)&xmlTimeDurationString};
    qt_metacall(QMetaObject::InvokeMetaMethod, 53, _a);
}

inline void TimeDuration::SubtractDuration(esriSystem::ITimeDuration* TimeDuration)
{
    void *_a[] = {0, (void*)&TimeDuration};
    qt_metacall(QMetaObject::InvokeMetaMethod, 59, _a);
}


inline QString TimeInstant::MinNamespaceSupported() const
{
    QVariant qax_result = property("MinNamespaceSupported");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline esriSystem::ITime* TimeInstant::Time() const
{
    esriSystem::ITime* qax_pointer = 0;
    qRegisterMetaType<esriSystem::ITime*>("ITime*", &qax_pointer);
    qRegisterMetaType<esriSystem::ITime>("ITime", qax_pointer);
    QVariant qax_result = property("Time");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(esriSystem::ITime**)qax_result.constData();
}
inline void TimeInstant::SetTime(esriSystem::ITime* value){
    int typeId = qRegisterMetaType<esriSystem::ITime*>("esriSystem::ITime*", &value);
    setProperty("Time", QVariant(typeId, &value));
}

inline esriSystem::ITimeReference* TimeInstant::TimeReference() const
{
    esriSystem::ITimeReference* qax_pointer = 0;
    qRegisterMetaType<esriSystem::ITimeReference*>("ITimeReference*", &qax_pointer);
    qRegisterMetaType<esriSystem::ITimeReference>("ITimeReference", qax_pointer);
    QVariant qax_result = property("TimeReference");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(esriSystem::ITimeReference**)qax_result.constData();
}
inline void TimeInstant::SetTimeReference(esriSystem::ITimeReference* value){
    int typeId = qRegisterMetaType<esriSystem::ITimeReference*>("esriSystem::ITimeReference*", &value);
    setProperty("TimeReference", QVariant(typeId, &value));
}

inline void TimeInstant::AddDays(double Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void TimeInstant::AddDuration(esriSystem::ITimeDuration* TimeDuration)
{
    void *_a[] = {0, (void*)&TimeDuration};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void TimeInstant::AddHours(double Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void TimeInstant::AddMilliseconds(double Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void TimeInstant::AddMinutes(double Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline bool TimeInstant::AddMonths(double Value, bool preserveEndOfMonth, bool goForwardOnInvalidDate)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Value, (void*)&preserveEndOfMonth, (void*)&goForwardOnInvalidDate};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline void TimeInstant::AddNanoseconds(qlonglong Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void TimeInstant::AddSeconds(double Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void TimeInstant::AddWeeks(double Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline bool TimeInstant::AddYears(double Value, bool preserveEndOfMonth, bool goForwardOnInvalidDate)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Value, (void*)&preserveEndOfMonth, (void*)&goForwardOnInvalidDate};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline void TimeInstant::Assign(esriSystem::IClone* src)
{
    void *_a[] = {0, (void*)&src};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline esriSystem::IClone* TimeInstant::Clone()
{
    esriSystem::IClone* qax_result = 0;
    qRegisterMetaType<esriSystem::IClone*>("IClone*", &qax_result);
    qRegisterMetaType<esriSystem::IClone>("IClone", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline bool TimeInstant::Contains(esriSystem::ITimeValue* otherTimeValue)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&otherTimeValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline QVariant TimeInstant::ConvertToSupportedObject(esriSystem::esriArcGISVersion docVersion)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&docVersion};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline void TimeInstant::Deserialize(esriSystem::IXMLSerializeData* data)
{
    void *_a[] = {0, (void*)&data};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline bool TimeInstant::Disjoint(esriSystem::ITimeValue* otherTimeValue)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&otherTimeValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline bool TimeInstant::Equals(esriSystem::ITimeValue* otherTimeValue)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&otherTimeValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline void TimeInstant::GetSizeMax(_ULARGE_INTEGER*& pcbSize)
{
    void *_a[] = {0, (void*)&pcbSize};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
}

inline void TimeInstant::IsDirty()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline bool TimeInstant::IsEqual(esriSystem::IClone* other)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&other};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
    return qax_result;
}

inline bool TimeInstant::IsIdentical(esriSystem::IClone* other)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&other};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline bool TimeInstant::IsSupportedAtVersion(esriSystem::esriArcGISVersion docVersion)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&docVersion};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
    return qax_result;
}

inline void TimeInstant::Load(esriSystem::IStream* pstm)
{
    void *_a[] = {0, (void*)&pstm};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline void TimeInstant::Project(esriSystem::ITimeReference* TimeReference)
{
    void *_a[] = {0, (void*)&TimeReference};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
}

inline void TimeInstant::ProjectFromUTC()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
}

inline void TimeInstant::ProjectToUTC()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 34, _a);
}

inline void TimeInstant::Save(esriSystem::IStream* pstm, int fClearDirty)
{
    void *_a[] = {0, (void*)&pstm, (void*)&fClearDirty};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
}

inline void TimeInstant::Serialize(esriSystem::IXMLSerializeData* data)
{
    void *_a[] = {0, (void*)&data};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
}

inline void TimeInstant::SubtractDuration(esriSystem::ITimeDuration* TimeDuration)
{
    void *_a[] = {0, (void*)&TimeDuration};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
}

inline bool TimeInstant::Touches(esriSystem::ITimeValue* otherTimeValue)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&otherTimeValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 42, _a);
    return qax_result;
}

inline bool TimeInstant::Within(esriSystem::ITimeValue* otherTimeValue)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&otherTimeValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
    return qax_result;
}


inline bool TimeExtent::Empty() const
{
    QVariant qax_result = property("Empty");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void TimeExtent::SetEmpty(bool value){ setProperty("Empty", QVariant(value)); }

inline esriSystem::ITime* TimeExtent::EndTime() const
{
    esriSystem::ITime* qax_pointer = 0;
    qRegisterMetaType<esriSystem::ITime*>("ITime*", &qax_pointer);
    qRegisterMetaType<esriSystem::ITime>("ITime", qax_pointer);
    QVariant qax_result = property("EndTime");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(esriSystem::ITime**)qax_result.constData();
}
inline void TimeExtent::SetEndTime(esriSystem::ITime* value){
    int typeId = qRegisterMetaType<esriSystem::ITime*>("esriSystem::ITime*", &value);
    setProperty("EndTime", QVariant(typeId, &value));
}

inline QString TimeExtent::MinNamespaceSupported() const
{
    QVariant qax_result = property("MinNamespaceSupported");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline esriSystem::ITime* TimeExtent::StartTime() const
{
    esriSystem::ITime* qax_pointer = 0;
    qRegisterMetaType<esriSystem::ITime*>("ITime*", &qax_pointer);
    qRegisterMetaType<esriSystem::ITime>("ITime", qax_pointer);
    QVariant qax_result = property("StartTime");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(esriSystem::ITime**)qax_result.constData();
}
inline void TimeExtent::SetStartTime(esriSystem::ITime* value){
    int typeId = qRegisterMetaType<esriSystem::ITime*>("esriSystem::ITime*", &value);
    setProperty("StartTime", QVariant(typeId, &value));
}

inline esriSystem::ITimeReference* TimeExtent::TimeReference() const
{
    esriSystem::ITimeReference* qax_pointer = 0;
    qRegisterMetaType<esriSystem::ITimeReference*>("ITimeReference*", &qax_pointer);
    qRegisterMetaType<esriSystem::ITimeReference>("ITimeReference", qax_pointer);
    QVariant qax_result = property("TimeReference");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(esriSystem::ITimeReference**)qax_result.constData();
}
inline void TimeExtent::SetTimeReference(esriSystem::ITimeReference* value){
    int typeId = qRegisterMetaType<esriSystem::ITimeReference*>("esriSystem::ITimeReference*", &value);
    setProperty("TimeReference", QVariant(typeId, &value));
}

inline void TimeExtent::AddDays(double Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void TimeExtent::AddDuration(esriSystem::ITimeDuration* TimeDuration)
{
    void *_a[] = {0, (void*)&TimeDuration};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void TimeExtent::AddHours(double Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void TimeExtent::AddMilliseconds(double Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void TimeExtent::AddMinutes(double Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline bool TimeExtent::AddMonths(double Value, bool preserveEndOfMonth, bool goForwardOnInvalidDate)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Value, (void*)&preserveEndOfMonth, (void*)&goForwardOnInvalidDate};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline void TimeExtent::AddNanoseconds(qlonglong Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void TimeExtent::AddSeconds(double Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void TimeExtent::AddWeeks(double Value)
{
    void *_a[] = {0, (void*)&Value};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline bool TimeExtent::AddYears(double Value, bool preserveEndOfMonth, bool goForwardOnInvalidDate)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&Value, (void*)&preserveEndOfMonth, (void*)&goForwardOnInvalidDate};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline void TimeExtent::Assign(esriSystem::IClone* src)
{
    void *_a[] = {0, (void*)&src};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline esriSystem::IClone* TimeExtent::Clone()
{
    esriSystem::IClone* qax_result = 0;
    qRegisterMetaType<esriSystem::IClone*>("IClone*", &qax_result);
    qRegisterMetaType<esriSystem::IClone>("IClone", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline bool TimeExtent::Contains(esriSystem::ITimeValue* otherTimeValue)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&otherTimeValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline QVariant TimeExtent::ConvertToSupportedObject(esriSystem::esriArcGISVersion docVersion)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&docVersion};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
    return qax_result;
}

inline void TimeExtent::Deserialize(esriSystem::IXMLSerializeData* data)
{
    void *_a[] = {0, (void*)&data};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline bool TimeExtent::Disjoint(esriSystem::ITimeValue* otherTimeValue)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&otherTimeValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline bool TimeExtent::Equals(esriSystem::ITimeValue* otherTimeValue)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&otherTimeValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}

inline void TimeExtent::GetSizeMax(_ULARGE_INTEGER*& pcbSize)
{
    void *_a[] = {0, (void*)&pcbSize};
    qt_metacall(QMetaObject::InvokeMetaMethod, 27, _a);
}

inline void TimeExtent::Intersect(esriSystem::ITimeValue* otherTimeValue)
{
    void *_a[] = {0, (void*)&otherTimeValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
}

inline void TimeExtent::IsDirty()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline bool TimeExtent::IsEqual(esriSystem::IClone* other)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&other};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
    return qax_result;
}

inline bool TimeExtent::IsIdentical(esriSystem::IClone* other)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&other};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
    return qax_result;
}

inline bool TimeExtent::IsSupportedAtVersion(esriSystem::esriArcGISVersion docVersion)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&docVersion};
    qt_metacall(QMetaObject::InvokeMetaMethod, 32, _a);
    return qax_result;
}

inline void TimeExtent::Load(esriSystem::IStream* pstm)
{
    void *_a[] = {0, (void*)&pstm};
    qt_metacall(QMetaObject::InvokeMetaMethod, 33, _a);
}

inline void TimeExtent::Project(esriSystem::ITimeReference* TimeReference)
{
    void *_a[] = {0, (void*)&TimeReference};
    qt_metacall(QMetaObject::InvokeMetaMethod, 35, _a);
}

inline void TimeExtent::ProjectFromUTC()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 36, _a);
}

inline void TimeExtent::ProjectToUTC()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 37, _a);
}

inline esriSystem::ITimeDuration* TimeExtent::QueryTimeDuration()
{
    esriSystem::ITimeDuration* qax_result = 0;
    qRegisterMetaType<esriSystem::ITimeDuration*>("ITimeDuration*", &qax_result);
    qRegisterMetaType<esriSystem::ITimeDuration>("ITimeDuration", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 38, _a);
    return qax_result;
}

inline void TimeExtent::Save(esriSystem::IStream* pstm, int fClearDirty)
{
    void *_a[] = {0, (void*)&pstm, (void*)&fClearDirty};
    qt_metacall(QMetaObject::InvokeMetaMethod, 39, _a);
}

inline void TimeExtent::Serialize(esriSystem::IXMLSerializeData* data)
{
    void *_a[] = {0, (void*)&data};
    qt_metacall(QMetaObject::InvokeMetaMethod, 40, _a);
}

inline void TimeExtent::SetExtent(esriSystem::ITime* StartTime, esriSystem::ITime* EndTime)
{
    void *_a[] = {0, (void*)&StartTime, (void*)&EndTime};
    qt_metacall(QMetaObject::InvokeMetaMethod, 43, _a);
}

inline void TimeExtent::SubtractDuration(esriSystem::ITimeDuration* TimeDuration)
{
    void *_a[] = {0, (void*)&TimeDuration};
    qt_metacall(QMetaObject::InvokeMetaMethod, 47, _a);
}

inline bool TimeExtent::Touches(esriSystem::ITimeValue* otherTimeValue)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&otherTimeValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 49, _a);
    return qax_result;
}

inline void TimeExtent::Union(esriSystem::ITimeValue* otherTimeValue)
{
    void *_a[] = {0, (void*)&otherTimeValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 50, _a);
}

inline bool TimeExtent::Within(esriSystem::ITimeValue* otherTimeValue)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&otherTimeValue};
    qt_metacall(QMetaObject::InvokeMetaMethod, 51, _a);
    return qax_result;
}


inline int TimeZoneRule::BiasFromUTC() const
{
    QVariant qax_result = property("BiasFromUTC");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void TimeZoneRule::SetBiasFromUTC(int value){ setProperty("BiasFromUTC", QVariant(value)); }

inline int TimeZoneRule::DaylightTimeBias() const
{
    QVariant qax_result = property("DaylightTimeBias");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void TimeZoneRule::SetDaylightTimeBias(int value){ setProperty("DaylightTimeBias", QVariant(value)); }

inline _TimeZoneTransitionTime* TimeZoneRule::DaylightTimeTransitionTime() const
{
    QVariant qax_result = property("DaylightTimeTransitionTime");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(_TimeZoneTransitionTime**)qax_result.constData();
}
inline void TimeZoneRule::SetDaylightTimeTransitionTime(_TimeZoneTransitionTime* value){
    int typeId = qRegisterMetaType<_TimeZoneTransitionTime*>("_TimeZoneTransitionTime*", &value);
    setProperty("DaylightTimeTransitionTime", QVariant(typeId, &value));
}

inline QString TimeZoneRule::MinNamespaceSupported() const
{
    QVariant qax_result = property("MinNamespaceSupported");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline int TimeZoneRule::StandardTimeBias() const
{
    QVariant qax_result = property("StandardTimeBias");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void TimeZoneRule::SetStandardTimeBias(int value){ setProperty("StandardTimeBias", QVariant(value)); }

inline _TimeZoneTransitionTime* TimeZoneRule::StandardTimeTransitionTime() const
{
    QVariant qax_result = property("StandardTimeTransitionTime");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(_TimeZoneTransitionTime**)qax_result.constData();
}
inline void TimeZoneRule::SetStandardTimeTransitionTime(_TimeZoneTransitionTime* value){
    int typeId = qRegisterMetaType<_TimeZoneTransitionTime*>("_TimeZoneTransitionTime*", &value);
    setProperty("StandardTimeTransitionTime", QVariant(typeId, &value));
}

inline int TimeZoneRule::Year() const
{
    QVariant qax_result = property("Year");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void TimeZoneRule::SetYear(int value){ setProperty("Year", QVariant(value)); }

inline void TimeZoneRule::Assign(esriSystem::IClone* src)
{
    void *_a[] = {0, (void*)&src};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline esriSystem::IClone* TimeZoneRule::Clone()
{
    esriSystem::IClone* qax_result = 0;
    qRegisterMetaType<esriSystem::IClone*>("IClone*", &qax_result);
    qRegisterMetaType<esriSystem::IClone>("IClone", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline QVariant TimeZoneRule::ConvertToSupportedObject(esriSystem::esriArcGISVersion docVersion)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&docVersion};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline void TimeZoneRule::Deserialize(esriSystem::IXMLSerializeData* data)
{
    void *_a[] = {0, (void*)&data};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void TimeZoneRule::GetSizeMax(_ULARGE_INTEGER*& pcbSize)
{
    void *_a[] = {0, (void*)&pcbSize};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void TimeZoneRule::IsDirty()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline bool TimeZoneRule::IsEqual(esriSystem::IClone* other)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&other};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline bool TimeZoneRule::IsIdentical(esriSystem::IClone* other)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&other};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline bool TimeZoneRule::IsSupportedAtVersion(esriSystem::esriArcGISVersion docVersion)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&docVersion};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline void TimeZoneRule::Load(esriSystem::IStream* pstm)
{
    void *_a[] = {0, (void*)&pstm};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void TimeZoneRule::Save(esriSystem::IStream* pstm, int fClearDirty)
{
    void *_a[] = {0, (void*)&pstm, (void*)&fClearDirty};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void TimeZoneRule::Serialize(esriSystem::IXMLSerializeData* data)
{
    void *_a[] = {0, (void*)&data};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
}


inline QString TimeZoneInfo::CustomDescription() const
{
    QVariant qax_result = property("CustomDescription");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void TimeZoneInfo::SetCustomDescription(const QString& value){ setProperty("CustomDescription", QVariant(value)); }

inline QString TimeZoneInfo::DaylightTimeName() const
{
    QVariant qax_result = property("DaylightTimeName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void TimeZoneInfo::SetDaylightTimeName(const QString& value){ setProperty("DaylightTimeName", QVariant(value)); }

inline esriSystem::ITimeZoneRule* TimeZoneInfo::DefaultRule() const
{
    esriSystem::ITimeZoneRule* qax_pointer = 0;
    qRegisterMetaType<esriSystem::ITimeZoneRule*>("ITimeZoneRule*", &qax_pointer);
    qRegisterMetaType<esriSystem::ITimeZoneRule>("ITimeZoneRule", qax_pointer);
    QVariant qax_result = property("DefaultRule");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(esriSystem::ITimeZoneRule**)qax_result.constData();
}
inline void TimeZoneInfo::SetDefaultRule(esriSystem::ITimeZoneRule* value){
    int typeId = qRegisterMetaType<esriSystem::ITimeZoneRule*>("esriSystem::ITimeZoneRule*", &value);
    setProperty("DefaultRule", QVariant(typeId, &value));
}

inline QString TimeZoneInfo::DisplayName() const
{
    QVariant qax_result = property("DisplayName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void TimeZoneInfo::SetDisplayName(const QString& value){ setProperty("DisplayName", QVariant(value)); }

inline int TimeZoneInfo::DynamicRulesCount() const
{
    QVariant qax_result = property("DynamicRulesCount");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int TimeZoneInfo::FirstDynamicRuleYear() const
{
    QVariant qax_result = property("FirstDynamicRuleYear");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline int TimeZoneInfo::LastDynamicRuleYear() const
{
    QVariant qax_result = property("LastDynamicRuleYear");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString TimeZoneInfo::MinNamespaceSupported() const
{
    QVariant qax_result = property("MinNamespaceSupported");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString TimeZoneInfo::StandardTimeName() const
{
    QVariant qax_result = property("StandardTimeName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void TimeZoneInfo::SetStandardTimeName(const QString& value){ setProperty("StandardTimeName", QVariant(value)); }

inline QString TimeZoneInfo::WindowsID() const
{
    QVariant qax_result = property("WindowsID");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void TimeZoneInfo::SetWindowsID(const QString& value){ setProperty("WindowsID", QVariant(value)); }

inline void TimeZoneInfo::AddDynamicRule(esriSystem::ITimeZoneRule* DynamicRule)
{
    void *_a[] = {0, (void*)&DynamicRule};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void TimeZoneInfo::Assign(esriSystem::IClone* src)
{
    void *_a[] = {0, (void*)&src};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline esriSystem::IClone* TimeZoneInfo::Clone()
{
    esriSystem::IClone* qax_result = 0;
    qRegisterMetaType<esriSystem::IClone*>("IClone*", &qax_result);
    qRegisterMetaType<esriSystem::IClone>("IClone", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline QVariant TimeZoneInfo::ConvertToSupportedObject(esriSystem::esriArcGISVersion docVersion)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&docVersion};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline void TimeZoneInfo::Deserialize(esriSystem::IXMLSerializeData* data)
{
    void *_a[] = {0, (void*)&data};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline esriSystem::ITimeZoneRule* TimeZoneInfo::DynamicRule(int Year)
{
    esriSystem::ITimeZoneRule* qax_result = 0;
    qRegisterMetaType<esriSystem::ITimeZoneRule*>("ITimeZoneRule*", &qax_result);
    qRegisterMetaType<esriSystem::ITimeZoneRule>("ITimeZoneRule", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Year};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline void TimeZoneInfo::GetSizeMax(_ULARGE_INTEGER*& pcbSize)
{
    void *_a[] = {0, (void*)&pcbSize};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void TimeZoneInfo::IsDirty()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline bool TimeZoneInfo::IsEqual(esriSystem::IClone* other)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&other};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
    return qax_result;
}

inline bool TimeZoneInfo::IsIdentical(esriSystem::IClone* other)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&other};
    qt_metacall(QMetaObject::InvokeMetaMethod, 23, _a);
    return qax_result;
}

inline bool TimeZoneInfo::IsSupportedAtVersion(esriSystem::esriArcGISVersion docVersion)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&docVersion};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
    return qax_result;
}

inline void TimeZoneInfo::Load(esriSystem::IStream* pstm)
{
    void *_a[] = {0, (void*)&pstm};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
}

inline int TimeZoneInfo::NextDynamicRuleYear(int currentDynamicRuleYear)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&currentDynamicRuleYear};
    qt_metacall(QMetaObject::InvokeMetaMethod, 28, _a);
    return qax_result;
}

inline void TimeZoneInfo::Save(esriSystem::IStream* pstm, int fClearDirty)
{
    void *_a[] = {0, (void*)&pstm, (void*)&fClearDirty};
    qt_metacall(QMetaObject::InvokeMetaMethod, 29, _a);
}

inline void TimeZoneInfo::Serialize(esriSystem::IXMLSerializeData* data)
{
    void *_a[] = {0, (void*)&data};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}


inline int LocaleInfo::CountryID() const
{
    QVariant qax_result = property("CountryID");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void LocaleInfo::SetCountryID(int value){ setProperty("CountryID", QVariant(value)); }

inline QString LocaleInfo::CountryName() const
{
    QVariant qax_result = property("CountryName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void LocaleInfo::SetCountryName(const QString& value){ setProperty("CountryName", QVariant(value)); }

inline QString LocaleInfo::DisplayName() const
{
    QVariant qax_result = property("DisplayName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void LocaleInfo::SetDisplayName(const QString& value){ setProperty("DisplayName", QVariant(value)); }

inline int LocaleInfo::LanguageID() const
{
    QVariant qax_result = property("LanguageID");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void LocaleInfo::SetLanguageID(int value){ setProperty("LanguageID", QVariant(value)); }

inline QString LocaleInfo::LanguageName() const
{
    QVariant qax_result = property("LanguageName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void LocaleInfo::SetLanguageName(const QString& value){ setProperty("LanguageName", QVariant(value)); }

inline int LocaleInfo::LocaleID() const
{
    QVariant qax_result = property("LocaleID");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}
inline void LocaleInfo::SetLocaleID(int value){ setProperty("LocaleID", QVariant(value)); }

inline QString LocaleInfo::LocalizedCountryName() const
{
    QVariant qax_result = property("LocalizedCountryName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void LocaleInfo::SetLocalizedCountryName(const QString& value){ setProperty("LocalizedCountryName", QVariant(value)); }

inline QString LocaleInfo::LocalizedDisplayName() const
{
    QVariant qax_result = property("LocalizedDisplayName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void LocaleInfo::SetLocalizedDisplayName(const QString& value){ setProperty("LocalizedDisplayName", QVariant(value)); }

inline QString LocaleInfo::LocalizedLanguageName() const
{
    QVariant qax_result = property("LocalizedLanguageName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void LocaleInfo::SetLocalizedLanguageName(const QString& value){ setProperty("LocalizedLanguageName", QVariant(value)); }

inline QString LocaleInfo::MinNamespaceSupported() const
{
    QVariant qax_result = property("MinNamespaceSupported");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline QString LocaleInfo::NativeCountryName() const
{
    QVariant qax_result = property("NativeCountryName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void LocaleInfo::SetNativeCountryName(const QString& value){ setProperty("NativeCountryName", QVariant(value)); }

inline QString LocaleInfo::NativeLanguageName() const
{
    QVariant qax_result = property("NativeLanguageName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void LocaleInfo::SetNativeLanguageName(const QString& value){ setProperty("NativeLanguageName", QVariant(value)); }

inline void LocaleInfo::Assign(esriSystem::IClone* src)
{
    void *_a[] = {0, (void*)&src};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline esriSystem::IClone* LocaleInfo::Clone()
{
    esriSystem::IClone* qax_result = 0;
    qRegisterMetaType<esriSystem::IClone*>("IClone*", &qax_result);
    qRegisterMetaType<esriSystem::IClone>("IClone", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline QVariant LocaleInfo::ConvertToSupportedObject(esriSystem::esriArcGISVersion docVersion)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&docVersion};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline void LocaleInfo::Deserialize(esriSystem::IXMLSerializeData* data)
{
    void *_a[] = {0, (void*)&data};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void LocaleInfo::GetSizeMax(_ULARGE_INTEGER*& pcbSize)
{
    void *_a[] = {0, (void*)&pcbSize};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void LocaleInfo::IsDirty()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline bool LocaleInfo::IsEqual(esriSystem::IClone* other)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&other};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline bool LocaleInfo::IsIdentical(esriSystem::IClone* other)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&other};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline bool LocaleInfo::IsSupportedAtVersion(esriSystem::esriArcGISVersion docVersion)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&docVersion};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline void LocaleInfo::Load(esriSystem::IStream* pstm)
{
    void *_a[] = {0, (void*)&pstm};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}

inline void LocaleInfo::Save(esriSystem::IStream* pstm, int fClearDirty)
{
    void *_a[] = {0, (void*)&pstm, (void*)&fClearDirty};
    qt_metacall(QMetaObject::InvokeMetaMethod, 30, _a);
}

inline void LocaleInfo::Serialize(esriSystem::IXMLSerializeData* data)
{
    void *_a[] = {0, (void*)&data};
    qt_metacall(QMetaObject::InvokeMetaMethod, 31, _a);
}


inline QString TimeReference::MinNamespaceSupported() const
{
    QVariant qax_result = property("MinNamespaceSupported");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline bool TimeReference::RespectsDaylightSavingTime() const
{
    QVariant qax_result = property("RespectsDaylightSavingTime");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void TimeReference::SetRespectsDaylightSavingTime(bool value){ setProperty("RespectsDaylightSavingTime", QVariant(value)); }

inline bool TimeReference::RespectsDynamicAdjustmentRules() const
{
    QVariant qax_result = property("RespectsDynamicAdjustmentRules");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void TimeReference::SetRespectsDynamicAdjustmentRules(bool value){ setProperty("RespectsDynamicAdjustmentRules", QVariant(value)); }

inline esriSystem::ITimeZoneInfo* TimeReference::TimeZoneInfo() const
{
    esriSystem::ITimeZoneInfo* qax_pointer = 0;
    qRegisterMetaType<esriSystem::ITimeZoneInfo*>("ITimeZoneInfo*", &qax_pointer);
    qRegisterMetaType<esriSystem::ITimeZoneInfo>("ITimeZoneInfo", qax_pointer);
    QVariant qax_result = property("TimeZoneInfo");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(esriSystem::ITimeZoneInfo**)qax_result.constData();
}
inline void TimeReference::SetTimeZoneInfo(esriSystem::ITimeZoneInfo* value){
    int typeId = qRegisterMetaType<esriSystem::ITimeZoneInfo*>("esriSystem::ITimeZoneInfo*", &value);
    setProperty("TimeZoneInfo", QVariant(typeId, &value));
}

inline void TimeReference::Assign(esriSystem::IClone* src)
{
    void *_a[] = {0, (void*)&src};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline esriSystem::IClone* TimeReference::Clone()
{
    esriSystem::IClone* qax_result = 0;
    qRegisterMetaType<esriSystem::IClone*>("IClone*", &qax_result);
    qRegisterMetaType<esriSystem::IClone>("IClone", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline QVariant TimeReference::ConvertToSupportedObject(esriSystem::esriArcGISVersion docVersion)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&docVersion};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline void TimeReference::Deserialize(esriSystem::IXMLSerializeData* data)
{
    void *_a[] = {0, (void*)&data};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void TimeReference::GetSizeMax(_ULARGE_INTEGER*& pcbSize)
{
    void *_a[] = {0, (void*)&pcbSize};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void TimeReference::IsDirty()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline bool TimeReference::IsEqual(esriSystem::IClone* other)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&other};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline bool TimeReference::IsIdentical(esriSystem::IClone* other)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&other};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline bool TimeReference::IsSupportedAtVersion(esriSystem::esriArcGISVersion docVersion)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&docVersion};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline void TimeReference::Load(esriSystem::IStream* pstm)
{
    void *_a[] = {0, (void*)&pstm};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void TimeReference::Project(esriSystem::ITime* Time, esriSystem::ITimeReference* otherTimeReference)
{
    void *_a[] = {0, (void*)&Time, (void*)&otherTimeReference};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}

inline void TimeReference::ProjectFromUTC(esriSystem::ITime* Time)
{
    void *_a[] = {0, (void*)&Time};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}

inline void TimeReference::ProjectToUTC(esriSystem::ITime* Time)
{
    void *_a[] = {0, (void*)&Time};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline void TimeReference::Save(esriSystem::IStream* pstm, int fClearDirty)
{
    void *_a[] = {0, (void*)&pstm, (void*)&fClearDirty};
    qt_metacall(QMetaObject::InvokeMetaMethod, 24, _a);
}

inline void TimeReference::Serialize(esriSystem::IXMLSerializeData* data)
{
    void *_a[] = {0, (void*)&data};
    qt_metacall(QMetaObject::InvokeMetaMethod, 25, _a);
}


inline int TimeZoneFactory::FirstLocaleID() const
{
    QVariant qax_result = property("FirstLocaleID");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline QString TimeZoneFactory::FirstTimeZoneWindowsID() const
{
    QVariant qax_result = property("FirstTimeZoneWindowsID");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}

inline esriSystem::ILocaleInfo* TimeZoneFactory::CreateLocaleInfoFromLocaleID(int LocaleID)
{
    esriSystem::ILocaleInfo* qax_result = 0;
    qRegisterMetaType<esriSystem::ILocaleInfo*>("ILocaleInfo*", &qax_result);
    qRegisterMetaType<esriSystem::ILocaleInfo>("ILocaleInfo", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&LocaleID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
    return qax_result;
}

inline esriSystem::ITimeReference* TimeZoneFactory::CreateTimeReferenceFromWindowsID(const QString& WindowsID)
{
    esriSystem::ITimeReference* qax_result = 0;
    qRegisterMetaType<esriSystem::ITimeReference*>("ITimeReference*", &qax_result);
    qRegisterMetaType<esriSystem::ITimeReference>("ITimeReference", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&WindowsID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
    return qax_result;
}

inline esriSystem::ITimeZoneInfo* TimeZoneFactory::CreateTimeZoneInfoFromWindowsID(const QString& WindowsID)
{
    esriSystem::ITimeZoneInfo* qax_result = 0;
    qRegisterMetaType<esriSystem::ITimeZoneInfo*>("ITimeZoneInfo*", &qax_result);
    qRegisterMetaType<esriSystem::ITimeZoneInfo>("ITimeZoneInfo", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&WindowsID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline bool TimeZoneFactory::IsValidLocaleID(int LocaleID)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&LocaleID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline bool TimeZoneFactory::IsValidTimeZoneWindowsID(const QString& WindowsID)
{
    bool qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&WindowsID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
    return qax_result;
}

inline int TimeZoneFactory::NextLocaleID(int currenteLocaleID)
{
    int qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&currenteLocaleID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
    return qax_result;
}

inline QString TimeZoneFactory::NextTimeZoneWindowsID(const QString& currentTimeZoneWindowsID)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&currentTimeZoneWindowsID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
    return qax_result;
}

inline esriSystem::ITimeReference* TimeZoneFactory::QueryLocalTimeReference(bool exactMatch)
{
    esriSystem::ITimeReference* qax_result = 0;
    qRegisterMetaType<esriSystem::ITimeReference*>("ITimeReference*", &qax_result);
    qRegisterMetaType<esriSystem::ITimeReference>("ITimeReference", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&exactMatch};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
    return qax_result;
}

inline QString TimeZoneFactory::QueryLocalTimeZoneWindowsID()
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}

inline QStringList TimeZoneFactory::QueryTimeZoneOlsonIDsFromWindowsID(const QString& WindowsID)
{
    QStringList qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&WindowsID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
    return qax_result;
}

inline QString TimeZoneFactory::QueryTimeZoneWindowsIDFromOlsonID(const QString& olsonID)
{
    QString qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&olsonID};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
    return qax_result;
}

inline void TimeZoneFactory::ReloadTimeZones(const QString& FileName)
{
    void *_a[] = {0, (void*)&FileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 21, _a);
}

inline void TimeZoneFactory::SaveTimeZones(const QString& FileName)
{
    void *_a[] = {0, (void*)&FileName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 22, _a);
}


inline bool CoRESTResource::IsCollection() const
{
    QVariant qax_result = property("IsCollection");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void CoRESTResource::SetIsCollection(bool value){ setProperty("IsCollection", QVariant(value)); }

inline bool CoRESTResource::IsDefaultCollection() const
{
    QVariant qax_result = property("IsDefaultCollection");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void CoRESTResource::SetIsDefaultCollection(bool value){ setProperty("IsDefaultCollection", QVariant(value)); }

inline bool CoRESTResource::IsStatic() const
{
    QVariant qax_result = property("IsStatic");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void CoRESTResource::SetIsStatic(bool value){ setProperty("IsStatic", QVariant(value)); }

inline QString CoRESTResource::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void CoRESTResource::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline QString CoRESTResource::RequiredCapability() const
{
    QVariant qax_result = property("RequiredCapability");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void CoRESTResource::SetRequiredCapability(const QString& value){ setProperty("RequiredCapability", QVariant(value)); }

inline bool CoRESTResource::SupportsETag() const
{
    QVariant qax_result = property("SupportsETag");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void CoRESTResource::SetSupportsETag(bool value){ setProperty("SupportsETag", QVariant(value)); }

inline void CoRESTResource::AddOperation(esriSystem::IRESTOperation* o)
{
    void *_a[] = {0, (void*)&o};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void CoRESTResource::AddResource(esriSystem::IRESTResource* r)
{
    void *_a[] = {0, (void*)&r};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline esriSystem::IRESTOperation* CoRESTResource::FindChildOperation(const QString& Name)
{
    esriSystem::IRESTOperation* qax_result = 0;
    qRegisterMetaType<esriSystem::IRESTOperation*>("IRESTOperation*", &qax_result);
    qRegisterMetaType<esriSystem::IRESTOperation>("IRESTOperation", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Name};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline esriSystem::IRESTResource* CoRESTResource::FindChildResource(const QString& Name)
{
    esriSystem::IRESTResource* qax_result = 0;
    qRegisterMetaType<esriSystem::IRESTResource*>("IRESTResource*", &qax_result);
    qRegisterMetaType<esriSystem::IRESTResource>("IRESTResource", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&Name};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline esriSystem::IEnumRESTOperation* CoRESTResource::GetOperations()
{
    esriSystem::IEnumRESTOperation* qax_result = 0;
    qRegisterMetaType<esriSystem::IEnumRESTOperation*>("IEnumRESTOperation*", &qax_result);
    qRegisterMetaType<esriSystem::IEnumRESTOperation>("IEnumRESTOperation", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}

inline esriSystem::IEnumRESTResource* CoRESTResource::GetResources()
{
    esriSystem::IEnumRESTResource* qax_result = 0;
    qRegisterMetaType<esriSystem::IEnumRESTResource*>("IEnumRESTResource*", &qax_result);
    qRegisterMetaType<esriSystem::IEnumRESTResource>("IEnumRESTResource", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline esriSystem::IJSONObject* CoRESTResource::ToJSONObject()
{
    esriSystem::IJSONObject* qax_result = 0;
    qRegisterMetaType<esriSystem::IJSONObject*>("IJSONObject*", &qax_result);
    qRegisterMetaType<esriSystem::IJSONObject>("IJSONObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 26, _a);
    return qax_result;
}


inline QString CoRESTOperation::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void CoRESTOperation::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline QString CoRESTOperation::OutputFormats() const
{
    QVariant qax_result = property("OutputFormats");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void CoRESTOperation::SetOutputFormats(const QString& value){ setProperty("OutputFormats", QVariant(value)); }

inline QString CoRESTOperation::Parameters() const
{
    QVariant qax_result = property("Parameters");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void CoRESTOperation::SetParameters(const QString& value){ setProperty("Parameters", QVariant(value)); }

inline bool CoRESTOperation::PostOnly() const
{
    QVariant qax_result = property("PostOnly");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void CoRESTOperation::SetPostOnly(bool value){ setProperty("PostOnly", QVariant(value)); }

inline QString CoRESTOperation::RequiredCapability() const
{
    QVariant qax_result = property("RequiredCapability");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void CoRESTOperation::SetRequiredCapability(const QString& value){ setProperty("RequiredCapability", QVariant(value)); }

inline esriSystem::IJSONObject* CoRESTOperation::ToJSONObject()
{
    esriSystem::IJSONObject* qax_result = 0;
    qRegisterMetaType<esriSystem::IJSONObject*>("IJSONObject*", &qax_result);
    qRegisterMetaType<esriSystem::IJSONObject>("IJSONObject", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
    return qax_result;
}


inline void CoRESTDispatcher::Init(esriSystem::IRESTResource* root, esriSystem::IRESTCallback* handler)
{
    void *_a[] = {0, (void*)&root, (void*)&handler};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}


inline bool ProxyServerInfo::CredentialsCancelled() const
{
    QVariant qax_result = property("CredentialsCancelled");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void ProxyServerInfo::SetCredentialsCancelled(bool value){ setProperty("CredentialsCancelled", QVariant(value)); }

inline bool ProxyServerInfo::Enabled() const
{
    QVariant qax_result = property("Enabled");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void ProxyServerInfo::SetEnabled(bool value){ setProperty("Enabled", QVariant(value)); }

inline QString ProxyServerInfo::Password() const
{
    QVariant qax_result = property("Password");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void ProxyServerInfo::SetPassword(const QString& value){ setProperty("Password", QVariant(value)); }

inline QString ProxyServerInfo::ProxyServer() const
{
    QVariant qax_result = property("ProxyServer");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void ProxyServerInfo::SetProxyServer(const QString& value){ setProperty("ProxyServer", QVariant(value)); }

inline QString ProxyServerInfo::UserName() const
{
    QVariant qax_result = property("UserName");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void ProxyServerInfo::SetUserName(const QString& value){ setProperty("UserName", QVariant(value)); }

inline void ProxyServerInfo::CacheProxyCredentials()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void ProxyServerInfo::ReadProxyServerInfo()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void ProxyServerInfo::WriteProxyServerInfo()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}


inline QString SSLInfo::CertPath() const
{
    QVariant qax_result = property("CertPath");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void SSLInfo::SetCertPath(const QString& value){ setProperty("CertPath", QVariant(value)); }

inline bool SSLInfo::VerifyPeer() const
{
    QVariant qax_result = property("VerifyPeer");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void SSLInfo::SetVerifyPeer(bool value){ setProperty("VerifyPeer", QVariant(value)); }

inline void SSLInfo::ReadSSLInfo()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void SSLInfo::WriteSSLInfo()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}


inline esriSystem::IErrorInfo* Message::ErrorInfo() const
{
    esriSystem::IErrorInfo* qax_pointer = 0;
    qRegisterMetaType<esriSystem::IErrorInfo*>("IErrorInfo*", &qax_pointer);
    qRegisterMetaType<esriSystem::IErrorInfo>("IErrorInfo", qax_pointer);
    QVariant qax_result = property("ErrorInfo");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(esriSystem::IErrorInfo**)qax_result.constData();
}

inline QString Message::Name() const
{
    QVariant qax_result = property("Name");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void Message::SetName(const QString& value){ setProperty("Name", QVariant(value)); }

inline QString Message::NamespaceURI() const
{
    QVariant qax_result = property("NamespaceURI");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void Message::SetNamespaceURI(const QString& value){ setProperty("NamespaceURI", QVariant(value)); }

inline esriSystem::IXMLSerializeData* Message::Parameters() const
{
    esriSystem::IXMLSerializeData* qax_pointer = 0;
    qRegisterMetaType<esriSystem::IXMLSerializeData*>("IXMLSerializeData*", &qax_pointer);
    qRegisterMetaType<esriSystem::IXMLSerializeData>("IXMLSerializeData", qax_pointer);
    QVariant qax_result = property("Parameters");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(esriSystem::IXMLSerializeData**)qax_result.constData();
}

inline esriSystem::IPropertySet* Message::Properties() const
{
    esriSystem::IPropertySet* qax_pointer = 0;
    qRegisterMetaType<esriSystem::IPropertySet*>("IPropertySet*", &qax_pointer);
    qRegisterMetaType<esriSystem::IPropertySet>("IPropertySet", qax_pointer);
    QVariant qax_result = property("Properties");
    if (!qax_result.constData()) return 0;
    Q_ASSERT(qax_result.isValid());
    return *(esriSystem::IPropertySet**)qax_result.constData();
}
inline void Message::SetProperties(esriSystem::IPropertySet* value){
    int typeId = qRegisterMetaType<esriSystem::IPropertySet*>("esriSystem::IPropertySet*", &value);
    setProperty("Properties", QVariant(typeId, &value));
}

inline int Message::Result() const
{
    QVariant qax_result = property("Result");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline void Message::InterfaceSupportsErrorInfo(GUID* riid)
{
    void *_a[] = {0, (void*)&riid};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void Message::ReadXML(esriSystem::IStream* Stream)
{
    void *_a[] = {0, (void*)&Stream};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void Message::SetError(int hresult, esriSystem::IErrorInfo* pErrorInfo)
{
    void *_a[] = {0, (void*)&hresult, (void*)&pErrorInfo};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void Message::WriteXML(esriSystem::IStream* Stream)
{
    void *_a[] = {0, (void*)&Stream};
    qt_metacall(QMetaObject::InvokeMetaMethod, 20, _a);
}


inline void ZipArchive::AddFile(const QString& inputFile)
{
    void *_a[] = {0, (void*)&inputFile};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void ZipArchive::CloseArchive()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void ZipArchive::CreateArchive(const QString& archiveName)
{
    void *_a[] = {0, (void*)&archiveName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void ZipArchive::Extract(const QString& outputDir)
{
    void *_a[] = {0, (void*)&outputDir};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void ZipArchive::ExtractFile(const QString& file, const QString& outputDir)
{
    void *_a[] = {0, (void*)&file, (void*)&outputDir};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline esriSystem::IEnumBSTR* ZipArchive::GetFileNames()
{
    esriSystem::IEnumBSTR* qax_result = 0;
    qRegisterMetaType<esriSystem::IEnumBSTR*>("IEnumBSTR*", &qax_result);
    qRegisterMetaType<esriSystem::IEnumBSTR>("IEnumBSTR", qax_result);
    void *_a[] = {(void*)&qax_result};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
    return qax_result;
}

inline void ZipArchive::OpenArchive(const QString& archiveName)
{
    void *_a[] = {0, (void*)&archiveName};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}


inline QString JobMessage::Description() const
{
    QVariant qax_result = property("Description");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void JobMessage::SetDescription(const QString& value){ setProperty("Description", QVariant(value)); }

inline esriSystem::esriJobMessageType JobMessage::MessageType() const
{
    QVariant qax_result = property("MessageType");
    Q_ASSERT(qax_result.isValid());
    return *(esriSystem::esriJobMessageType*)qax_result.constData();
}
inline void JobMessage::SetMessageType(esriSystem::esriJobMessageType value){ setProperty("MessageType", QVariant(value)); }

inline void JobMessage::Deserialize(esriSystem::IXMLSerializeData* data)
{
    void *_a[] = {0, (void*)&data};
    qt_metacall(QMetaObject::InvokeMetaMethod, 9, _a);
}

inline void JobMessage::GetSizeMax(_ULARGE_INTEGER*& pcbSize)
{
    void *_a[] = {0, (void*)&pcbSize};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline void JobMessage::IsDirty()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
}

inline void JobMessage::Load(esriSystem::IStream* pstm)
{
    void *_a[] = {0, (void*)&pstm};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void JobMessage::Save(esriSystem::IStream* pstm, int fClearDirty)
{
    void *_a[] = {0, (void*)&pstm, (void*)&fClearDirty};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void JobMessage::Serialize(esriSystem::IXMLSerializeData* data)
{
    void *_a[] = {0, (void*)&data};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}


inline int JobMessages::Count() const
{
    QVariant qax_result = property("Count");
    Q_ASSERT(qax_result.isValid());
    return *(int*)qax_result.constData();
}

inline void JobMessages::Add(esriSystem::IJobMessage* pMsg)
{
    void *_a[] = {0, (void*)&pMsg};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline void JobMessages::Deserialize(esriSystem::IXMLSerializeData* data)
{
    void *_a[] = {0, (void*)&data};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
}

inline esriSystem::IJobMessage* JobMessages::Element(int index)
{
    esriSystem::IJobMessage* qax_result = 0;
    qRegisterMetaType<esriSystem::IJobMessage*>("IJobMessage*", &qax_result);
    qRegisterMetaType<esriSystem::IJobMessage>("IJobMessage", qax_result);
    void *_a[] = {(void*)&qax_result, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 11, _a);
    return qax_result;
}

inline void JobMessages::GetSizeMax(_ULARGE_INTEGER*& pcbSize)
{
    void *_a[] = {0, (void*)&pcbSize};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
}

inline void JobMessages::Insert(int index, esriSystem::IJobMessage* pMsg)
{
    void *_a[] = {0, (void*)&index, (void*)&pMsg};
    qt_metacall(QMetaObject::InvokeMetaMethod, 13, _a);
}

inline void JobMessages::IsDirty()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 14, _a);
}

inline void JobMessages::Load(esriSystem::IStream* pstm)
{
    void *_a[] = {0, (void*)&pstm};
    qt_metacall(QMetaObject::InvokeMetaMethod, 15, _a);
}

inline void JobMessages::Remove(int index)
{
    void *_a[] = {0, (void*)&index};
    qt_metacall(QMetaObject::InvokeMetaMethod, 16, _a);
}

inline void JobMessages::RemoveAll()
{
    void *_a[] = {0};
    qt_metacall(QMetaObject::InvokeMetaMethod, 17, _a);
}

inline void JobMessages::Save(esriSystem::IStream* pstm, int fClearDirty)
{
    void *_a[] = {0, (void*)&pstm, (void*)&fClearDirty};
    qt_metacall(QMetaObject::InvokeMetaMethod, 18, _a);
}

inline void JobMessages::Serialize(esriSystem::IXMLSerializeData* data)
{
    void *_a[] = {0, (void*)&data};
    qt_metacall(QMetaObject::InvokeMetaMethod, 19, _a);
}


inline bool ESRIScriptEngine::AllowUI() const
{
    QVariant qax_result = property("AllowUI");
    Q_ASSERT(qax_result.isValid());
    return *(bool*)qax_result.constData();
}
inline void ESRIScriptEngine::SetAllowUI(bool value){ setProperty("AllowUI", QVariant(value)); }

inline QString ESRIScriptEngine::Language() const
{
    QVariant qax_result = property("Language");
    Q_ASSERT(qax_result.isValid());
    return *(QString*)qax_result.constData();
}
inline void ESRIScriptEngine::SetLanguage(const QString& value){ setProperty("Language", QVariant(value)); }

inline void ESRIScriptEngine::AddCode(const QString& scriptCode)
{
    void *_a[] = {0, (void*)&scriptCode};
    qt_metacall(QMetaObject::InvokeMetaMethod, 8, _a);
}

inline HRESULT ESRIScriptEngine::Error(int& pLineNumber, int& pCharacterPosition, QString& pErrorSourceCode, QString& pErrorDescription)
{
    HRESULT qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&pLineNumber, (void*)&pCharacterPosition, (void*)&pErrorSourceCode, (void*)&pErrorDescription};
    qt_metacall(QMetaObject::InvokeMetaMethod, 10, _a);
    return qax_result;
}

inline QVariant ESRIScriptEngine::Run(const QString& procedureName, QList<QString&>* pParameters)
{
    QVariant qax_result;
    void *_a[] = {(void*)&qax_result, (void*)&procedureName, (void*)&pParameters};
    qt_metacall(QMetaObject::InvokeMetaMethod, 12, _a);
    return qax_result;
}



#endif

}

QT_BEGIN_NAMESPACE

namespace QtMetaTypePrivate {
template<>
struct QMetaTypeFunctionHelper<esriSystem::IUID, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::IUID*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::IUID();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::IUID*>(t)->esriSystem::IUID::~IUID();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::IUID;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::IUID*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::IUID*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::InputDeviceManager, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::InputDeviceManager*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::InputDeviceManager();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::InputDeviceManager*>(t)->esriSystem::InputDeviceManager::~InputDeviceManager();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::InputDeviceManager;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::InputDeviceManager*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::InputDeviceManager*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::Set, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::Set*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::Set();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::Set*>(t)->esriSystem::Set::~Set();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::Set;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::Set*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::Set*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::Array, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::Array*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::Array();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::Array*>(t)->esriSystem::Array::~Array();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::Array;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::Array*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::Array*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::ObjectStream, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::ObjectStream*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::ObjectStream();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::ObjectStream*>(t)->esriSystem::ObjectStream::~ObjectStream();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::ObjectStream;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::ObjectStream*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::ObjectStream*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::ByteSwapStreamIO, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::ByteSwapStreamIO*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::ByteSwapStreamIO();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::ByteSwapStreamIO*>(t)->esriSystem::ByteSwapStreamIO::~ByteSwapStreamIO();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::ByteSwapStreamIO;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::ByteSwapStreamIO*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::ByteSwapStreamIO*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::VariantStreamIO, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::VariantStreamIO*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::VariantStreamIO();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::VariantStreamIO*>(t)->esriSystem::VariantStreamIO::~VariantStreamIO();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::VariantStreamIO;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::VariantStreamIO*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::VariantStreamIO*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::UID, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::UID*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::UID();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::UID*>(t)->esriSystem::UID::~UID();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::UID;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::UID*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::UID*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::ComponentCategoryManager, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::ComponentCategoryManager*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::ComponentCategoryManager();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::ComponentCategoryManager*>(t)->esriSystem::ComponentCategoryManager::~ComponentCategoryManager();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::ComponentCategoryManager;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::ComponentCategoryManager*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::ComponentCategoryManager*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::CategoryFactory, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::CategoryFactory*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::CategoryFactory();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::CategoryFactory*>(t)->esriSystem::CategoryFactory::~CategoryFactory();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::CategoryFactory;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::CategoryFactory*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::CategoryFactory*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::BaseStatistics, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::BaseStatistics*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::BaseStatistics();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::BaseStatistics*>(t)->esriSystem::BaseStatistics::~BaseStatistics();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::BaseStatistics;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::BaseStatistics*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::BaseStatistics*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::FileStream, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::FileStream*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::FileStream();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::FileStream*>(t)->esriSystem::FileStream::~FileStream();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::FileStream;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::FileStream*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::FileStream*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::NameFactory, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::NameFactory*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::NameFactory();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::NameFactory*>(t)->esriSystem::NameFactory::~NameFactory();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::NameFactory;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::NameFactory*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::NameFactory*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::FileName, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::FileName*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::FileName();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::FileName*>(t)->esriSystem::FileName::~FileName();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::FileName;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::FileName*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::FileName*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::MemoryBlobStream, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::MemoryBlobStream*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::MemoryBlobStream();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::MemoryBlobStream*>(t)->esriSystem::MemoryBlobStream::~MemoryBlobStream();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::MemoryBlobStream;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::MemoryBlobStream*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::MemoryBlobStream*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::ESRILicenseInfo, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::ESRILicenseInfo*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::ESRILicenseInfo();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::ESRILicenseInfo*>(t)->esriSystem::ESRILicenseInfo::~ESRILicenseInfo();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::ESRILicenseInfo;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::ESRILicenseInfo*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::ESRILicenseInfo*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::ExtensionManager, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::ExtensionManager*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::ExtensionManager();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::ExtensionManager*>(t)->esriSystem::ExtensionManager::~ExtensionManager();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::ExtensionManager;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::ExtensionManager*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::ExtensionManager*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::FileNames, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::FileNames*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::FileNames();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::FileNames*>(t)->esriSystem::FileNames::~FileNames();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::FileNames;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::FileNames*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::FileNames*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::PropertySet, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::PropertySet*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::PropertySet();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::PropertySet*>(t)->esriSystem::PropertySet::~PropertySet();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::PropertySet;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::PropertySet*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::PropertySet*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::EnvironmentManager, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::EnvironmentManager*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::EnvironmentManager();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::EnvironmentManager*>(t)->esriSystem::EnvironmentManager::~EnvironmentManager();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::EnvironmentManager;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::EnvironmentManager*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::EnvironmentManager*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::DoubleArray, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::DoubleArray*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::DoubleArray();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::DoubleArray*>(t)->esriSystem::DoubleArray::~DoubleArray();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::DoubleArray;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::DoubleArray*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::DoubleArray*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::LongArray, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::LongArray*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::LongArray();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::LongArray*>(t)->esriSystem::LongArray::~LongArray();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::LongArray;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::LongArray*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::LongArray*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::StrArray, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::StrArray*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::StrArray();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::StrArray*>(t)->esriSystem::StrArray::~StrArray();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::StrArray;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::StrArray*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::StrArray*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::VarArray, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::VarArray*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::VarArray();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::VarArray*>(t)->esriSystem::VarArray::~VarArray();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::VarArray;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::VarArray*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::VarArray*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::PropertySetArray, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::PropertySetArray*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::PropertySetArray();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::PropertySetArray*>(t)->esriSystem::PropertySetArray::~PropertySetArray();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::PropertySetArray;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::PropertySetArray*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::PropertySetArray*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::UnitConverter, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::UnitConverter*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::UnitConverter();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::UnitConverter*>(t)->esriSystem::UnitConverter::~UnitConverter();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::UnitConverter;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::UnitConverter*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::UnitConverter*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::AngularConverter, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::AngularConverter*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::AngularConverter();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::AngularConverter*>(t)->esriSystem::AngularConverter::~AngularConverter();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::AngularConverter;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::AngularConverter*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::AngularConverter*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::ScaleFormat, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::ScaleFormat*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::ScaleFormat();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::ScaleFormat*>(t)->esriSystem::ScaleFormat::~ScaleFormat();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::ScaleFormat;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::ScaleFormat*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::ScaleFormat*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::AoInitialize, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::AoInitialize*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::AoInitialize();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::AoInitialize*>(t)->esriSystem::AoInitialize::~AoInitialize();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::AoInitialize;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::AoInitialize*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::AoInitialize*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::ProductInstalled, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::ProductInstalled*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::ProductInstalled();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::ProductInstalled*>(t)->esriSystem::ProductInstalled::~ProductInstalled();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::ProductInstalled;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::ProductInstalled*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::ProductInstalled*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::LicenseInfoEnum, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::LicenseInfoEnum*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::LicenseInfoEnum();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::LicenseInfoEnum*>(t)->esriSystem::LicenseInfoEnum::~LicenseInfoEnum();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::LicenseInfoEnum;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::LicenseInfoEnum*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::LicenseInfoEnum*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::AoAuthorizeLicense, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::AoAuthorizeLicense*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::AoAuthorizeLicense();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::AoAuthorizeLicense*>(t)->esriSystem::AoAuthorizeLicense::~AoAuthorizeLicense();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::AoAuthorizeLicense;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::AoAuthorizeLicense*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::AoAuthorizeLicense*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::ObjectCopy, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::ObjectCopy*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::ObjectCopy();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::ObjectCopy*>(t)->esriSystem::ObjectCopy::~ObjectCopy();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::ObjectCopy;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::ObjectCopy*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::ObjectCopy*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::XMLPersistedObject, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::XMLPersistedObject*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::XMLPersistedObject();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::XMLPersistedObject*>(t)->esriSystem::XMLPersistedObject::~XMLPersistedObject();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::XMLPersistedObject;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::XMLPersistedObject*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::XMLPersistedObject*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::SystemHelper, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::SystemHelper*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::SystemHelper();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::SystemHelper*>(t)->esriSystem::SystemHelper::~SystemHelper();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::SystemHelper;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::SystemHelper*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::SystemHelper*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::ShortcutName, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::ShortcutName*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::ShortcutName();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::ShortcutName*>(t)->esriSystem::ShortcutName::~ShortcutName();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::ShortcutName;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::ShortcutName*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::ShortcutName*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::ArcGISLocale, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::ArcGISLocale*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::ArcGISLocale();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::ArcGISLocale*>(t)->esriSystem::ArcGISLocale::~ArcGISLocale();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::ArcGISLocale;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::ArcGISLocale*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::ArcGISLocale*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::EqualInterval, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::EqualInterval*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::EqualInterval();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::EqualInterval*>(t)->esriSystem::EqualInterval::~EqualInterval();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::EqualInterval;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::EqualInterval*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::EqualInterval*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::Quantile, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::Quantile*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::Quantile();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::Quantile*>(t)->esriSystem::Quantile::~Quantile();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::Quantile;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::Quantile*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::Quantile*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::DefinedInterval, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::DefinedInterval*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::DefinedInterval();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::DefinedInterval*>(t)->esriSystem::DefinedInterval::~DefinedInterval();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::DefinedInterval;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::DefinedInterval*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::DefinedInterval*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::NaturalBreaks, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::NaturalBreaks*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::NaturalBreaks();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::NaturalBreaks*>(t)->esriSystem::NaturalBreaks::~NaturalBreaks();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::NaturalBreaks;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::NaturalBreaks*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::NaturalBreaks*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::StandardDeviation, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::StandardDeviation*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::StandardDeviation();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::StandardDeviation*>(t)->esriSystem::StandardDeviation::~StandardDeviation();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::StandardDeviation;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::StandardDeviation*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::StandardDeviation*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::GeometricalInterval, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::GeometricalInterval*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::GeometricalInterval();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::GeometricalInterval*>(t)->esriSystem::GeometricalInterval::~GeometricalInterval();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::GeometricalInterval;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::GeometricalInterval*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::GeometricalInterval*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::NumericFormat, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::NumericFormat*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::NumericFormat();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::NumericFormat*>(t)->esriSystem::NumericFormat::~NumericFormat();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::NumericFormat;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::NumericFormat*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::NumericFormat*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::CurrencyFormat, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::CurrencyFormat*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::CurrencyFormat();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::CurrencyFormat*>(t)->esriSystem::CurrencyFormat::~CurrencyFormat();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::CurrencyFormat;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::CurrencyFormat*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::CurrencyFormat*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::PercentageFormat, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::PercentageFormat*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::PercentageFormat();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::PercentageFormat*>(t)->esriSystem::PercentageFormat::~PercentageFormat();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::PercentageFormat;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::PercentageFormat*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::PercentageFormat*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::FractionFormat, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::FractionFormat*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::FractionFormat();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::FractionFormat*>(t)->esriSystem::FractionFormat::~FractionFormat();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::FractionFormat;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::FractionFormat*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::FractionFormat*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::LatLonFormat, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::LatLonFormat*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::LatLonFormat();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::LatLonFormat*>(t)->esriSystem::LatLonFormat::~LatLonFormat();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::LatLonFormat;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::LatLonFormat*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::LatLonFormat*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::AngleFormat, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::AngleFormat*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::AngleFormat();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::AngleFormat*>(t)->esriSystem::AngleFormat::~AngleFormat();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::AngleFormat;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::AngleFormat*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::AngleFormat*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::DirectionFormat, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::DirectionFormat*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::DirectionFormat();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::DirectionFormat*>(t)->esriSystem::DirectionFormat::~DirectionFormat();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::DirectionFormat;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::DirectionFormat*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::DirectionFormat*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::ScientificFormat, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::ScientificFormat*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::ScientificFormat();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::ScientificFormat*>(t)->esriSystem::ScientificFormat::~ScientificFormat();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::ScientificFormat;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::ScientificFormat*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::ScientificFormat*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::RateFormat, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::RateFormat*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::RateFormat();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::RateFormat*>(t)->esriSystem::RateFormat::~RateFormat();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::RateFormat;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::RateFormat*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::RateFormat*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::CustomNumberFormat, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::CustomNumberFormat*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::CustomNumberFormat();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::CustomNumberFormat*>(t)->esriSystem::CustomNumberFormat::~CustomNumberFormat();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::CustomNumberFormat;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::CustomNumberFormat*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::CustomNumberFormat*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::XMLStream, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::XMLStream*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::XMLStream();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::XMLStream*>(t)->esriSystem::XMLStream::~XMLStream();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::XMLStream;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::XMLStream*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::XMLStream*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::XMLReader, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::XMLReader*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::XMLReader();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::XMLReader*>(t)->esriSystem::XMLReader::~XMLReader();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::XMLReader;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::XMLReader*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::XMLReader*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::XMLWriter, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::XMLWriter*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::XMLWriter();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::XMLWriter*>(t)->esriSystem::XMLWriter::~XMLWriter();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::XMLWriter;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::XMLWriter*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::XMLWriter*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::XMLAttributes, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::XMLAttributes*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::XMLAttributes();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::XMLAttributes*>(t)->esriSystem::XMLAttributes::~XMLAttributes();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::XMLAttributes;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::XMLAttributes*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::XMLAttributes*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::XMLNamespaces, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::XMLNamespaces*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::XMLNamespaces();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::XMLNamespaces*>(t)->esriSystem::XMLNamespaces::~XMLNamespaces();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::XMLNamespaces;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::XMLNamespaces*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::XMLNamespaces*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::XMLTypeMapper, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::XMLTypeMapper*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::XMLTypeMapper();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::XMLTypeMapper*>(t)->esriSystem::XMLTypeMapper::~XMLTypeMapper();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::XMLTypeMapper;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::XMLTypeMapper*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::XMLTypeMapper*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::XMLSerializer, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::XMLSerializer*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::XMLSerializer();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::XMLSerializer*>(t)->esriSystem::XMLSerializer::~XMLSerializer();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::XMLSerializer;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::XMLSerializer*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::XMLSerializer*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::XMLSerializerAlt, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::XMLSerializerAlt*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::XMLSerializerAlt();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::XMLSerializerAlt*>(t)->esriSystem::XMLSerializerAlt::~XMLSerializerAlt();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::XMLSerializerAlt;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::XMLSerializerAlt*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::XMLSerializerAlt*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::XMLFlags, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::XMLFlags*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::XMLFlags();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::XMLFlags*>(t)->esriSystem::XMLFlags::~XMLFlags();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::XMLFlags;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::XMLFlags*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::XMLFlags*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::JSONArray, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::JSONArray*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::JSONArray();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::JSONArray*>(t)->esriSystem::JSONArray::~JSONArray();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::JSONArray;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::JSONArray*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::JSONArray*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::JSONObject, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::JSONObject*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::JSONObject();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::JSONObject*>(t)->esriSystem::JSONObject::~JSONObject();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::JSONObject;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::JSONObject*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::JSONObject*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::JSONWriter, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::JSONWriter*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::JSONWriter();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::JSONWriter*>(t)->esriSystem::JSONWriter::~JSONWriter();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::JSONWriter;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::JSONWriter*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::JSONWriter*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::AMFWriter, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::AMFWriter*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::AMFWriter();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::AMFWriter*>(t)->esriSystem::AMFWriter::~AMFWriter();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::AMFWriter;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::AMFWriter*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::AMFWriter*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::JSONReader, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::JSONReader*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::JSONReader();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::JSONReader*>(t)->esriSystem::JSONReader::~JSONReader();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::JSONReader;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::JSONReader*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::JSONReader*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::Time, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::Time*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::Time();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::Time*>(t)->esriSystem::Time::~Time();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::Time;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::Time*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::Time*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::TimeDuration, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::TimeDuration*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::TimeDuration();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::TimeDuration*>(t)->esriSystem::TimeDuration::~TimeDuration();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::TimeDuration;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::TimeDuration*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::TimeDuration*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::TimeInstant, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::TimeInstant*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::TimeInstant();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::TimeInstant*>(t)->esriSystem::TimeInstant::~TimeInstant();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::TimeInstant;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::TimeInstant*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::TimeInstant*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::TimeExtent, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::TimeExtent*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::TimeExtent();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::TimeExtent*>(t)->esriSystem::TimeExtent::~TimeExtent();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::TimeExtent;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::TimeExtent*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::TimeExtent*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::TimeZoneRule, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::TimeZoneRule*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::TimeZoneRule();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::TimeZoneRule*>(t)->esriSystem::TimeZoneRule::~TimeZoneRule();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::TimeZoneRule;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::TimeZoneRule*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::TimeZoneRule*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::TimeZoneInfo, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::TimeZoneInfo*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::TimeZoneInfo();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::TimeZoneInfo*>(t)->esriSystem::TimeZoneInfo::~TimeZoneInfo();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::TimeZoneInfo;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::TimeZoneInfo*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::TimeZoneInfo*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::LocaleInfo, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::LocaleInfo*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::LocaleInfo();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::LocaleInfo*>(t)->esriSystem::LocaleInfo::~LocaleInfo();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::LocaleInfo;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::LocaleInfo*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::LocaleInfo*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::TimeReference, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::TimeReference*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::TimeReference();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::TimeReference*>(t)->esriSystem::TimeReference::~TimeReference();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::TimeReference;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::TimeReference*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::TimeReference*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::TimeZoneFactory, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::TimeZoneFactory*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::TimeZoneFactory();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::TimeZoneFactory*>(t)->esriSystem::TimeZoneFactory::~TimeZoneFactory();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::TimeZoneFactory;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::TimeZoneFactory*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::TimeZoneFactory*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::CoRESTResource, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::CoRESTResource*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::CoRESTResource();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::CoRESTResource*>(t)->esriSystem::CoRESTResource::~CoRESTResource();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::CoRESTResource;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::CoRESTResource*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::CoRESTResource*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::CoRESTOperation, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::CoRESTOperation*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::CoRESTOperation();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::CoRESTOperation*>(t)->esriSystem::CoRESTOperation::~CoRESTOperation();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::CoRESTOperation;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::CoRESTOperation*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::CoRESTOperation*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::CoRESTDispatcher, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::CoRESTDispatcher*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::CoRESTDispatcher();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::CoRESTDispatcher*>(t)->esriSystem::CoRESTDispatcher::~CoRESTDispatcher();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::CoRESTDispatcher;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::CoRESTDispatcher*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::CoRESTDispatcher*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::ProxyServerInfo, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::ProxyServerInfo*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::ProxyServerInfo();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::ProxyServerInfo*>(t)->esriSystem::ProxyServerInfo::~ProxyServerInfo();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::ProxyServerInfo;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::ProxyServerInfo*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::ProxyServerInfo*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::SSLInfo, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::SSLInfo*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::SSLInfo();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::SSLInfo*>(t)->esriSystem::SSLInfo::~SSLInfo();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::SSLInfo;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::SSLInfo*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::SSLInfo*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::Message, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::Message*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::Message();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::Message*>(t)->esriSystem::Message::~Message();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::Message;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::Message*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::Message*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::ZipArchive, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::ZipArchive*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::ZipArchive();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::ZipArchive*>(t)->esriSystem::ZipArchive::~ZipArchive();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::ZipArchive;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::ZipArchive*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::ZipArchive*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::JobMessage, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::JobMessage*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::JobMessage();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::JobMessage*>(t)->esriSystem::JobMessage::~JobMessage();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::JobMessage;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::JobMessage*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::JobMessage*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::JobMessages, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::JobMessages*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::JobMessages();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::JobMessages*>(t)->esriSystem::JobMessages::~JobMessages();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::JobMessages;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::JobMessages*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::JobMessages*>(t); }
#endif // QT_NO_DATASTREAM
};

template<>
struct QMetaTypeFunctionHelper<esriSystem::ESRIScriptEngine, /* Accepted */ true> {
    static void Delete(void *t) { delete static_cast<esriSystem::ESRIScriptEngine*>(t); }
    static void *Create(const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new esriSystem::ESRIScriptEngine();
    }
    static void Destruct(void *t)
    {
        Q_UNUSED(t)
        static_cast<esriSystem::ESRIScriptEngine*>(t)->esriSystem::ESRIScriptEngine::~ESRIScriptEngine();
    }
    static void *Construct(void *where, const void *t)
    {
        Q_ASSERT(!t);
        Q_UNUSED(t)
        return new (where) esriSystem::ESRIScriptEngine;
    }
#ifndef QT_NO_DATASTREAM
    static void Save(QDataStream &stream, const void *t) { stream << *static_cast<const esriSystem::ESRIScriptEngine*>(t); }
    static void Load(QDataStream &stream, void *t) { stream >> *static_cast<esriSystem::ESRIScriptEngine*>(t); }
#endif // QT_NO_DATASTREAM
};

} // namespace QtMetaTypePrivate
QT_END_NAMESPACE

#endif

